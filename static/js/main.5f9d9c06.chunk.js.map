{"version":3,"sources":["algorithms/plain/breadth-first-search.js","components/PlainGraph/PlainGraph.jsx","components/Graph/Vertex/Vertex.jsx","components/Graph/Edge/Edge.jsx","utils/sleep.js","actions/index.js","actions/dialog.js","algorithms/graph/index.js","utils/graphConverter.js","actions/algorithm.js","components/Graph/VisualizationEdge/VisualizationEdge.jsx","components/Graph/Graph.jsx","components/Buttons/Buttons.jsx","components/Sliders/Sliders.jsx","components/DropDownLists/DropDownLists.jsx","components/ToggleSwitches/ToggleSwitches.jsx","algorithms/graph/dfs.js","utils/queue.js","algorithms/graph/bfs.js","algorithms/graph/dijkstra.js","algorithms/graph/prim-mst.js","utils/dsu.js","algorithms/graph/kruskal-mst.js","algorithms/graph/check-connected.js","algorithms/graph/check-bipartite.js","algorithms/graph/radius.js","algorithms/graph/diameter.js","algorithms/graph/topological-sort.js","algorithms/graph/find-bridges.js","algorithms/graph/find-articulation-points.js","algorithms/graph/scc-kosaraju.js","algorithms/graph/euler-path.js","algorithms/graph/euler-cycle.js","actions/matrixDialog.js","components/Menu/Menu.jsx","components/MessageBox/MessageBox.jsx","components/TextInputs/TextInputs.jsx","components/Dialogs/InputDialog/InputDialog.jsx","components/InfoBox/InfoBox.jsx","components/Dialogs/MatrixDialog/AdjacencyMatrix.jsx","components/Dialogs/MatrixDialog/MatrixDialog.jsx","components/App.jsx","serviceWorker.js","reducers/dialog.js","reducers/algorithm.js","reducers/matrixDialog.js","reducers/index.js","index.js","components/App.module.scss","components/PlainGraph/PlainGraph.module.scss","components/Menu/Menu.module.scss","components/Buttons/Buttons.module.scss","components/Sliders/Sliders.module.scss","components/DropDownLists/DropDownLists.module.scss","components/ToggleSwitches/ToggleSwitches.module.scss","components/MessageBox/MessageBox.module.scss","components/Dialogs/InputDialog/InputDialog.module.scss","components/TextInputs/TextInputs.module.scss","components/InfoBox/InfoBox.module.scss","components/Dialogs/MatrixDialog/MatrixDialog.module.scss","components/Dialogs/MatrixDialog/AdjacencyMatrix.module.scss"],"names":["algorithm","cells","cellStart","cellFinish","pathStatus","queue","x","y","parent","current","shift","console","log","next","node","minX","minY","maxX","maxY","res","push","neighbours","length","i","findIndex","n","cx","classnames","bind","styles","CellState","Object","freeze","EMPTY","BLOCKED","START","FINISH","PATH","Cell","status","onMouseEnter","onMouseLeave","className","React","Component","Vertex","radius","name","this","state","VertexState","DEFAULT","hint","hintState","VertexHintState","CLEAR","HIGHLIGHTED","PRE_COMPLETED","COMPLETED","COLOR_1","COLOR_2","VertexComponent","vertex","draggable","onDragStart","onDragEnd","onDragMove","onClick","e","call","target","getChildren","setAttrs","scaleX","scaleY","shadowColor","shadowBlur","shadowOffset","shadowOpacity","moveToTop","handleDragStart","to","duration","shadowOffsetX","shadowOffsetY","handleDragEnd","fill","color","stroke","strokeWidth","vertexBorderWidth","text","fontSize","textColor","width","height","align","verticalAlign","hintColor","labelWidth","Edge","vertexFrom","vertexTo","oriented","weight","_from","_to","EdgeState","_oriented","undefined","FLIPPED","WALKED","ERASED","SHADOWED","EdgeComponent","edgeComponent","edge","edgeType","points","getEdgePointsForType","EdgeType","NOT_ORIENTED","linePoints","hitStrokeWidth","tension","isWeighted","labelPoints","EdgeLabel","labelRadius","labelBorderWidth","ONE_SIDE_ORIENTED","TWO_SIDE_ORIENTED","LOOP","from","isFlipped","dx","dy","angle","Math","atan2","vertexFromOffset","vertexToOffset","xFrom","cos","yFrom","sin","xTo","yTo","xMiddle","yMiddle","anchorDx","sqrt","anchorDy","xMiddleFirst","sleep","ms","Promise","resolve","setTimeout","ActionType","ADD_VERTEX","ADD_EDGE","REMOVE_VERTEX","REMOVE_EDGE","CHANGE_GRAPH_MODE","SELECT_VERTEX","UNSELECT_VERTEX","SHOW_MESSAGE","CLOSE_MESSAGE","UPDATE_VERTEX_POSITION","INVERT_ORIENTATION","ALGORITHM_STEP","CLEAN_GRAPH_SELECTIONS","SET_GRAPH","MOVE_CANVAS","changeGraphMode","graphMode","type","currentMessageId","showMessage","message","isAlert","dispatch","a","messageId","showMessageConnector","closeMessage","algorithmStep","step","moveCanvas","START_DIALOG_FOR_RESULT","CLOSE_DIALOG","closeDialog","VertexAction","SELECT","UNSELECT","ENTER","EXIT","CLEAR_ALL_SELECTIONS","VertexHintAction","REMOVE","SET","HIGHLIGHT","EdgeAction","WALK","SHADOW","FLIP","AlgorithmActionType","VERTEX_ACTION","EDGE_ACTION","VERTEX_HINT_ACTION","PreCallAction","NOTHING","SELECT_EDGE","Criteria","WEIGHTED","CONNECTED","ORIENTED","ACYCLIC","getOperationsCount","trace","operationsCount","forEach","t","isChained","edgesListToAdjacencyList","vertices","edges","adjacencyList","isOriented","entries","verticesList","sort","b","edgesListToReversedAdjacencyList","map","edgesListToAdjacencyMatrix","verticesNumbers","v","nameToIndex","number","index","cell","adjacencyMatrix","Array","j","weighted","PRE_CALL","CALL","PAUSE","POP_TRACE_STEP","SET_ALGORITHM","SET_SPEED","SET_IS_ONE_STEP","CLEAR_TRACE","SHOW_STATISTICS","CLEAR_STATISTICS","setIsOneStep","isOneStep","getState","GraphMode","graph","graphReducer","callConnector","algorithmReducer","pause","start","callSuccess","currentVisualizationId","traceStep","popTraceStep","showStatistics","visualizationId","isActive","speed","VisualizationEdgeComponent","REMOVE_VERTEX_OR_EDGE","ALGORITHM_PRE_CALL_SELECT_VERTEX","ALGORITHM_PRE_CALL_SELECT_EDGE","Graph","isArray","Error","_vertices","_edges","_visualizationEdges","_currentName","max","splice","filter","findEdge","invertOrientation","newEdges","removeVisualizationEdgeByVertices","GraphComponent","draggedVertex","windowWidth","windowHeight","findIndexOfVertex","props","handleVertexDragStart","cancelBubble","setState","updateDraggedVertex","updateVertexPosition","handleVertexDragMove","handleVertexDragEnd","getEdgeType","handleCanvasClick","evt","clientX","canvasX","clientY","canvasY","addVertex","selectedVertex","unselectVertex","handleVertexClick","removeVertex","selectVertex","startDialogForResult","value","addEdge","callAlgorithm","handleEdgeClick","removeEdge","handleCanvasDragEnd","handleResize","window","innerWidth","innerHeight","onresize","key","visualizationEdges","connect","vertexIndex","title","inputPlaceholder","onSubmit","onClose","pattern","onCancel","ButtonComponent","activated","SliderComponent","label","min","onChange","DropDownList","items","item","RoundedToggleSwitch","isChecked","checked","used","preCall","criteria","startTime","performance","now","dfs","action","actionType","toVertex","endTime","statistics","toFixed","Queue","_queue","isEmpty","pop","bfs","d","Number","MAX_SAFE_INTEGER","dijkstra","mstWeight","mst","prim","floor","random","DSU","size","find","dsu","makeSet","union","kruskal","isConnected","isBipartite","p","level","peek","eccentricities","findRadius","diameter","findDiameter","topSortList","addedVertices","sortedVertices","isStartVertex","reverse","topSort","timer","tin","tout","countBridges","findBridges","countArticulationPoints","isArticulationPoint","children","findArticulationPoints","reversedAdjacencyList","componentsNumber","dfsComponents","findComponents","isEuler","degree","outOddVertices","oddVertices","checkForEuler","assign","cur","currentVertices","pathLen","findEulerPath","findEulerCycle","START_MATRIX_DIALOG_FOR_RESULT","CLOSE_MATRIX_DIALOG","closeMatrixDialog","MenuComponent","algorithms","DFS","BFS","Dijkstra","PrimMST","KruskalMST","CheckConnected","CheckBipartite","FindRadius","FindDiameter","TopologicalSort","FindBridges","FindArticulationPoints","SCCKosaraju","EulerPath","EulerCycle","algorithmPaused","handleAlgorithmChange","clearVisualization","setAlgorithm","startVisualization","remainingAlgorithmSteps","clearTrace","clearStatistics","cleanGraphSelections","isVisualizationActive","continue","stepVisualization","stopVisualization","handleAlgorithmSpeedChange","setSpeed","askForAction","writeToFile","json","JSON","stringify","exportData","escape","anchorElement","document","getElementById","setAttribute","click","askReadFromFile","readFromFile","reader","FileReader","file","files","onload","parse","result","setGraph","resetCanvasPosition","readAsText","showAdjacencyMatrix","startMatrixDialog","nextProps","nextState","nextContext","visualizationSpeed","selectedAlgorithm","grid","bounds","cancel","id","style","aria-hidden","href","accept","continueCall","TextInputComponent","placeholder","autoFocus","customStyles","overlay","zIndex","InputDialog","handleChange","validity","valid","submit","preventDefault","submitDialog","cancelDialog","isOpen","onRequestClose","ariaHideApp","dialogReducer","lines","isVisible","isStatisticsShown","line","MatrixCell","topLeft","topRight","bottomLeft","bottomRight","MatrixRow","row","first","last","vertexNumber","AdjacencyMatrix","MatrixDialog","reduce","prev","arr","matrixDialogReducer","submitMatrixDialog","cancelMatrixDialog","App","Menu","Boolean","location","hostname","match","defaultState","dialog","newState","matrixDialog","clone","object","create","getPrototypeOf","unselectSelectedVertex","updateVertexByAction","updateEdgeByAction","updateVertexHintByAction","combineReducers","addVisualizationEdge","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.5f9d9c06.chunk.js","sourcesContent":["export const algorithm = {\n    name: \"Breadth First Search\",\n    run: function (cells, cellStart, cellFinish, pathStatus) {\n        let node = { x: cellStart.x, y: cellStart.y, parent: null };\n\n        const queue = [node];\n        while (queue.length) {\n            let current = queue.shift();\n            if ((current.x !== cellStart.x) || (current.y !== cellStart.y))\n                cells[current.y][current.x] = pathStatus;\n            if ((current.x === cellFinish.x) && (current.y === cellFinish.y)) {\n                // const path = backtrace(current);\n                // TODO: something\n                return;\n            }\n            console.log(current);\n            const next = neighbours(current, 0, 0, cells[0].length - 1, cells.length - 1);\n            for (let i = 0; i < next.length; ++i)\n                if ((cells[next[i].y][next[i].x] !== pathStatus) && !((next[i].x === cellStart.x) && (next[i].y === cellStart.y)) && (queue.findIndex(n => (n.x === next[i].x) && (n.y === next[i].y)) === -1))\n                    queue.push(next[i]);\n        }\n    }\n};\n\nfunction backtrace(node) {\n    const path = [{x: node.x, y: node.y}];\n    while (node.parent !== null) {\n        node = node.parent;\n        path.push({x: node.x, y: node.y});\n    }\n    return path;\n}\n\nfunction neighbours(node, minX, minY, maxX, maxY) {\n    const res = [];\n    if (node.x < maxX)\n        res.push({ x: node.x + 1, y: node.y, parent: node });\n    if (node.x > minX)\n        res.push({ x: node.x - 1, y: node.y, parent: node });\n    if (node.y < maxY)\n        res.push({ x: node.x, y: node.y + 1, parent: node });\n    if (node.y > minY)\n        res.push({ x: node.x, y: node.y - 1, parent: node });\n    return res;\n}","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./PlainGraph.module.scss\";\nimport { algorithm } from \"../../algorithms/plain/breadth-first-search\";\n\nconst cx = classnames.bind(styles);\n\nconst CellState = Object.freeze({ EMPTY: 0, BLOCKED: 1, START: 2, FINISH: 3, PATH: 4});\n\nconst Cell = ({x, y, status, onMouseEnter, onMouseLeave}) => (\n    <rect x={x} y={y} className={cx(\"cell\", {\n            [`cell-blocked`]: status === CellState.BLOCKED,\n            [`cell-path`]: status === CellState.PATH,\n            [`cell-start`]: status === CellState.START,\n            [`cell-finish`]: status === CellState.FINISH\n          })}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}/>\n);\n\nclass PlainGraph extends React.Component {\n    state = {\n        cells: [],\n        cellSize: 40,\n        rows: 1000 / 40 + 10,\n        columns: 2000 / 40 + 10,\n        isMouseDown: false,\n        previousMouseRow: -1,\n        previousMouseColumn: -1,\n        mouseCellState: -1\n    };\n\n    componentDidMount() {\n        const cellSize = 40;\n        const rows = 1000 / cellSize + 10;\n        const columns = 2000 / cellSize + 10;\n        const cells = [];\n        // const rows = window.innerHeight / cellSize + 10, columns = window.innerWidth / cellSize + 10; // TODO: change on resize\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < columns; ++j) {\n                row.push(CellState.EMPTY);\n            }\n            cells.push(row);\n        }\n        cells[2][2] = CellState.START;\n        cells[2][40] = CellState.FINISH;\n        this.setState({ cells: cells, cellSize: cellSize, rows: rows, columns: columns});\n    }\n\n    invertCellUnderMouse = (event) => {\n        this.setState(oldState => {\n            const x = Math.floor(event.x / this.state.cellSize);\n            const y = Math.floor(event.y / this.state.cellSize);\n            if ((x === oldState.previousMouseColumn) && (y === oldState.previousMouseRow))\n                return oldState;\n            const state = {...oldState};\n\n            const currentCellState = state.cells[y][x];\n            if (currentCellState === state.mouseCellState) {\n                if ((currentCellState === CellState.EMPTY) || (currentCellState === CellState.PATH))\n                    state.cells[y][x] = CellState.BLOCKED;\n                else if (currentCellState === CellState.BLOCKED)\n                    state.cells[y][x] = CellState.EMPTY;\n            }\n            state.previousMouseRow = y;\n            state.previousMouseColumn = x;\n\n            return state;\n        });\n    };\n\n    handleMouseDown = (event) => {\n        algorithm.run(this.state.cells, {x:2,y:2},{x:40,y:2}, CellState.PATH);\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.setState({\n            isMouseDown: true,\n            mouseCellState: this.state.cells\n                [Math.floor(reducedEvent.y / this.state.cellSize)]\n                [Math.floor(reducedEvent.x / this.state.cellSize)]\n        });\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    handleMouseUp = (event) => {\n        this.invertCellUnderMouse({ x: event.clientX, y: event.clientY });\n        this.setState({ isMouseDown: false, previousMouseRow: -1, previousMouseColumn: -1 });\n    };\n\n    handleCellMouseEnter = (event) => {\n        if (!this.state.isMouseDown)\n            return;\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    render() {\n        return (\n            <div className={cx(\"plain_graph\")}>\n                <svg className={cx(\"drawing_area\")}\n                     onMouseDown={e => this.handleMouseDown(e)}\n                     onMouseUp={e => this.handleMouseUp(e)}>\n                    {this.state.cells.map((row, y) =>\n                        row.map((cell, x) =>\n                            <Cell\n                                x={x * this.state.cellSize}\n                                y={y * this.state.cellSize}\n                                status={cell}\n                                key={this.state.columns * y + x}\n                                onMouseEnter={e => this.handleCellMouseEnter(e)}/>\n                            )\n                        )\n                    }\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default PlainGraph;","import { Circle, Group, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Vertex {\n    constructor(x, y, radius, name) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.state = VertexState.DEFAULT;\n        this.name = name;\n        this.hint = \"\";\n        this.hintState = VertexHintState.CLEAR;\n    }\n\n    get color() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'white';\n            case VertexState.HIGHLIGHTED:\n                return 'yellow';\n            case VertexState.PRE_COMPLETED:\n                return '#CCCCCC';\n            case VertexState.COMPLETED:\n                return '#444444';\n            case VertexState.COLOR_1:\n                return '#ff0000';\n            case VertexState.COLOR_2:\n                return '#0000ff';\n            default:\n                return 'white';\n        }\n    }\n\n    get textColor() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'black';\n            case VertexState.HIGHLIGHTED:\n                return 'black';\n            case VertexState.PRE_COMPLETED:\n                return 'black';\n            case VertexState.COMPLETED:\n                return 'white';\n            case VertexState.COLOR_1:\n                return 'white';\n            case VertexState.COLOR_2:\n                return 'white';\n            default:\n                return 'black';\n        }\n    }\n\n    get hintColor() {\n        switch (this.hintState) {\n            case VertexHintState.CLEAR:\n                return '#00000000';\n            case VertexHintState.DEFAULT:\n                return '#ff5f3c';\n            case VertexHintState.HIGHLIGHTED:\n                return '#2c99c3';\n            default:\n                return '#00000000';\n        }\n    }\n}\n\nconst handleDragStart = (e, call) => {\n    e.target.getChildren()[0].setAttrs({\n        scaleX: 1.1,\n        scaleY: 1.1,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: { x: 10, y: 10 },\n        shadowOpacity: 0.5\n    });\n    e.target.moveToTop();\n\n    call(e);\n};\n\nconst handleDragEnd = (e, call) => {\n    e.target.getChildren()[0].to({\n        duration: 0.25,\n        scaleX: 1,\n        scaleY: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0\n    });\n\n    call(e);\n};\n\nexport const VertexComponent = ({ vertex, draggable, onDragStart, onDragEnd, onDragMove, onClick }) => {\n    const labelWidth = 40, labelHeight = 20;\n    return (\n        <Group\n            draggable={draggable}\n            onDragStart={e => handleDragStart(e, onDragStart)}\n            onDragEnd={e => handleDragEnd(e, onDragEnd)}\n            onDragMove={onDragMove}\n            onClick={onClick}\n            x={vertex.x}\n            y={vertex.y}>\n            <Circle\n                x={0}\n                y={0}\n                radius={vertex.radius}\n                fill={vertex.color}\n                stroke={'black'}\n                shadowBlur={0}\n                strokeWidth={vertexBorderWidth}\n                shadowOpacity={0.5}/>\n            <Text\n                text={vertex.name}\n                x={-labelWidth / 2.}\n                y={-labelHeight / 2.}\n                fontSize={20}\n                fill={vertex.textColor}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n\n            <Text\n                text={vertex.hint}\n                x={-2 * vertex.radius}\n                y={-2 * vertex.radius}\n                fontSize={25}\n                fill={vertex.hintColor}\n                stroke={vertex.hintColor}\n                width={labelWidth * 2}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>);\n};\n\nexport const vertexBorderWidth = 2;\n\nexport const VertexState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, PRE_COMPLETED: 2, COMPLETED: 3, COLOR_1: 4, COLOR_2: 5 });\nexport const VertexHintState = Object.freeze({ CLEAR: 0, DEFAULT: 1, HIGHLIGHTED: 2 });","import { vertexBorderWidth } from \"../Vertex/Vertex\";\nimport { Arrow, Circle, Group, Line, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Edge {\n    constructor(vertexFrom, vertexTo, oriented, weight) {\n        this._from = vertexFrom;\n        this._to = vertexTo;\n        this.weight = weight;\n        this.state = EdgeState.DEFAULT;\n        this._oriented = oriented;\n    }\n\n    get from() {\n        return this._from;\n    }\n\n    get to() {\n        return this._to;\n    }\n\n    get color() {\n        switch (this.state) {\n            case EdgeState.DEFAULT:\n                return 'black';\n            case EdgeState.HIGHLIGHTED:\n                return '#f7ff00';\n            case EdgeState.WALKED:\n                return '#ff5f3c';\n            case EdgeState.ERASED:\n                return '#ffffff00';\n            case EdgeState.SHADOWED:\n                return '#dddddd';\n            case EdgeState.FLIPPED:\n                return 'black';\n            default:\n                return 'black';\n        }\n    }\n\n    isWeighted() {\n        return (this.weight !== undefined) && (this.weight !== null);\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n\n    isFlipped() {\n        return this.state === EdgeState.FLIPPED;\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n    }\n}\n\nexport const EdgeComponent = ({ edge, edgeType, onClick }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group onClick={onClick}>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeLabel = ({ x, y, text }) => {\n    const labelRadius = 15;\n    const labelHorizontalPadding = 1, labelVerticalPadding = 5;\n    const labelBorderWidth = 0;\n    return (\n        <Group\n            x={x - labelRadius - labelHorizontalPadding - labelBorderWidth}\n            y={y - labelRadius - labelVerticalPadding - labelBorderWidth}\n            width={labelRadius * 2. + 2. * (labelHorizontalPadding + labelBorderWidth)}\n            height={labelRadius * 2. + 2. * (labelVerticalPadding + labelBorderWidth)}>\n            <Circle\n                x={labelRadius + labelHorizontalPadding + labelBorderWidth}\n                y={labelRadius + labelVerticalPadding + labelBorderWidth}\n                radius={labelRadius}\n                fill={'white'}\n                stroke={'black'}\n                strokeWidth={labelBorderWidth}/>\n            <Text\n                x={labelBorderWidth + labelHorizontalPadding}\n                y={labelBorderWidth + labelVerticalPadding}\n                text={text}\n                fontSize={20}\n                width={labelRadius * 2.}\n                height={labelRadius * 2.}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>\n    );\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });\nexport const EdgeState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, ERASED: 2, WALKED: 3, SHADOWED: 4, FLIPPED: 5 });\n\nexport const getEdgePointsForType = (edge, edgeType) => {\n    let vertexFrom = edge.from;\n    let vertexTo = edge.to;\n    if (edge.isFlipped())\n        [vertexFrom, vertexTo] = [vertexTo, vertexFrom];\n\n    const dx = vertexTo.x - vertexFrom.x;\n    const dy = vertexFrom.y - vertexTo.y;\n    const angle = Math.atan2(dy, dx);\n    const vertexFromOffset = vertexFrom.radius + vertexBorderWidth / 2.;\n    const vertexToOffset = vertexTo.radius + vertexBorderWidth / 2.;\n\n    if ((edgeType === EdgeType.ONE_SIDE_ORIENTED) || (edgeType === EdgeType.NOT_ORIENTED)) {\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle);\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xTo, yTo\n            ],\n            labelPoints: [\n                (xFrom + xTo) / 2.,\n                (yFrom + yTo) / 2.\n            ]\n        };\n    } else if (edgeType === EdgeType.TWO_SIDE_ORIENTED) {\n        const angleOffset = 0.25;\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle + angleOffset);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle + angleOffset);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle - angleOffset);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle - angleOffset);\n\n        const middlePointHeightCoefficient = 1. / 15.;\n        const xMiddle = (xFrom + xTo) / 2. - (yFrom - yTo) * middlePointHeightCoefficient;\n        const yMiddle = (yFrom + yTo) / 2. + (xFrom - xTo) * middlePointHeightCoefficient;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddle, yMiddle,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle,\n                yMiddle\n            ]\n        };\n    } else if (edgeType === EdgeType.LOOP) {\n        const xFrom = vertexFrom.x - vertexFromOffset;\n        const yFrom = vertexFrom.y;\n        const xTo = vertexFrom.x - vertexFromOffset;\n        const yTo = vertexFrom.y;\n\n        const anchorDx = 3. * vertexFromOffset / Math.sqrt(2.);\n        const anchorDy = 1.5 * vertexFromOffset / Math.sqrt(2.);\n        const xMiddleFirst = xFrom - anchorDx;\n        const yMiddleFirst = yFrom - anchorDy;\n        const xMiddle = xMiddleFirst - vertexFromOffset;\n        const yMiddle = yFrom;\n        const xMiddleSecond = xTo - anchorDx;\n        const yMiddleSecond = yTo + anchorDy;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddleFirst, yMiddleFirst,\n                xMiddle, yMiddle,\n                xMiddleSecond, yMiddleSecond,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle, yMiddle\n            ]\n        };\n    }\n};","export function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    ADD_VERTEX: 'ADD_VERTEX',\n    ADD_EDGE: 'ADD_EDGE',\n    REMOVE_VERTEX: 'REMOVE_VERTEX',\n    REMOVE_EDGE: 'REMOVE_EDGE',\n    CHANGE_GRAPH_MODE: 'CHANGE_GRAPH_MODE',\n    SELECT_VERTEX: 'SELECT_VERTEX',\n    UNSELECT_VERTEX: 'UNSELECT_VERTEX',\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    CLOSE_MESSAGE: 'CLOSE_MESSAGE',\n    UPDATE_VERTEX_POSITION: 'UPDATE_VERTEX_POSITION',\n    INVERT_ORIENTATION: 'INVERT_ORIENTATION',\n    ALGORITHM_STEP: 'ALGORITHM_STEP',\n    CLEAN_GRAPH_SELECTIONS: 'CLEAN_GRAPH_SELECTIONS',\n    SET_GRAPH: 'SET_GRAPH',\n    MOVE_CANVAS: 'MOVE_CANVAS'\n});\n\nexport const addVertex = (x, y, radius) => ({\n    type: ActionType.ADD_VERTEX,\n    x,\n    y,\n    radius\n});\n\nexport const addEdge = (vertexFrom, vertexTo, weight) => ({\n    type: ActionType.ADD_EDGE,\n    vertexFrom,\n    vertexTo,\n    weight\n});\n\nexport const removeVertex = (vertex) => ({\n    type: ActionType.REMOVE_VERTEX,\n    vertex\n});\n\nexport const removeEdge = (edge) => ({\n    type: ActionType.REMOVE_EDGE,\n    edge\n});\n\nexport const changeGraphMode = (graphMode) => ({\n    type: ActionType.CHANGE_GRAPH_MODE,\n    graphMode\n});\n\nexport const selectVertex = (vertex) => ({\n    type: ActionType.SELECT_VERTEX,\n    vertex\n});\n\nexport const unselectVertex = (vertex) => ({\n    type: ActionType.UNSELECT_VERTEX,\n    vertex\n});\n\nlet currentMessageId = 0;\n\nexport const showMessage = (message, isAlert = false) => async (dispatch) => {\n    const messageId = ++currentMessageId;\n    dispatch(showMessageConnector(message, isAlert));\n    await sleep(2000);\n    if (messageId === currentMessageId)\n        dispatch(closeMessage());\n};\n\nconst showMessageConnector = (message, isAlert = false) => ({\n    type: ActionType.SHOW_MESSAGE,\n    message,\n    isAlert\n});\n\nexport const closeMessage = () => ({\n    type: ActionType.CLOSE_MESSAGE\n});\n\nexport const updateVertexPosition = (vertexIndex, x, y) => ({\n    type: ActionType.UPDATE_VERTEX_POSITION,\n    vertexIndex,\n    x,\n    y\n});\n\nexport const invertOrientation = () => ({\n    type: ActionType.INVERT_ORIENTATION\n});\n\nexport const algorithmStep = (step) => ({\n    type: ActionType.ALGORITHM_STEP,\n    step\n});\n\nexport const cleanGraphSelections = () => ({\n    type: ActionType.CLEAN_GRAPH_SELECTIONS\n});\n\nexport const setGraph = (graph) => ({\n    type: ActionType.SET_GRAPH,\n    graph\n});\n\nexport const moveCanvas = (x, y) => ({\n    type: ActionType.MOVE_CANVAS,\n    x,\n    y\n});","export const ActionType = Object.freeze({\n    START_DIALOG_FOR_RESULT: 'START_DIALOG_FOR_RESULT',\n    CLOSE_DIALOG: 'CLOSE_DIALOG'\n});\n\nexport const startDialogForResult = (title, text, hint, inputPlaceholder, onSubmit, onCancel, pattern = \".*\") => ({\n    type: ActionType.START_DIALOG_FOR_RESULT,\n    title,\n    text,\n    hint,\n    inputPlaceholder,\n    onSubmit,\n    onCancel,\n    pattern\n});\n\nconst closeDialog = () => ({\n   type: ActionType.CLOSE_DIALOG\n});\n\nexport const cancelDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeDialog());\n};\n\nexport const submitDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeDialog());\n};","export const VertexAction = Object.freeze({\n    SELECT: 0,\n    UNSELECT: 1,\n    ENTER: 2,\n    EXIT: 3,\n    COLOR_1: 4,\n    COLOR_2: 5,\n    CLEAR_ALL_SELECTIONS: 6\n});\n\nexport const VertexHintAction = Object.freeze({\n    REMOVE: 0,\n    SET: 1,\n    HIGHLIGHT: 2\n});\n\nexport const EdgeAction = Object.freeze({\n    WALK: 0,\n    HIGHLIGHT: 1,\n    UNSELECT: 2,\n    SHADOW: 3,\n    CLEAR_ALL_SELECTIONS: 4,\n    FLIP: 5\n});\n\nexport const AlgorithmActionType = Object.freeze({\n    VERTEX_ACTION: 0,\n    EDGE_ACTION: 1,\n    VERTEX_HINT_ACTION: 2\n});\n\nexport const PreCallAction = Object.freeze({\n    NOTHING: 0,\n    SELECT_VERTEX: 1,\n    SELECT_EDGE: 2\n});\n\nexport const Criteria = Object.freeze({\n    NOTHING: 0,\n    WEIGHTED: 0b1,\n    CONNECTED: 0b10,\n    NOT_ORIENTED: 0b100,\n    ORIENTED: 0b1000,\n    ACYCLIC: 0b10000\n});\n\nexport const getOperationsCount = (trace) => {\n    let operationsCount = 0;\n    trace.forEach((t, i) => {\n        if ((i + 1 === trace.length) || !t.isChained)\n            ++operationsCount;\n    });\n    return operationsCount;\n};","import { Edge } from \"../components/Graph/Edge/Edge\";\n\nexport const edgesListToAdjacencyList = (vertices, edges) => {\n    const adjacencyList = {};\n    vertices.forEach(vertex => adjacencyList[vertex.name] = []);\n    edges.forEach(edge => {\n        adjacencyList[edge.from.name].push({name: edge.to.name, weight: edge.weight});\n        if (!edge.isOriented() && (edge.from !== edge.to))\n            adjacencyList[edge.to.name].push({name: edge.from.name, weight: edge.weight});\n    });\n    for (let [, verticesList] of Object.entries(adjacencyList))\n        verticesList = verticesList.sort((a, b) => a.name - b.name);\n    return adjacencyList;\n};\n\nexport const edgesListToReversedAdjacencyList = (vertices, edges) => {\n    return edgesListToAdjacencyList(vertices, edges.map(e =>\n        new Edge(e.to, e.from, e.isOriented(), e.weight))\n    );\n};\n\nexport const edgesListToAdjacencyMatrix = (vertices, edges) => {\n    const verticesNumbers = [];\n    vertices.forEach(v => verticesNumbers.push(v.name));\n    verticesNumbers.sort((a, b) => a - b);\n    const nameToIndex = {};\n    verticesNumbers.forEach((number, index) => nameToIndex[number] = index);\n\n    const adjacencyMatrix = new Array(vertices.length);\n    for (let i = 0; i < vertices.length; ++i) {\n        adjacencyMatrix[i] = new Array(vertices.length);\n        for (let j = 0; j < vertices.length; ++j)\n            adjacencyMatrix[i][j] = null;\n    }\n\n    let from, to, cell;\n    edges.forEach(e => {\n        from = nameToIndex[e.from.name];\n        to = nameToIndex[e.to.name];\n        cell = e.weight ? { weighted: true, weight: e.weight } : { weighted : false };\n        adjacencyMatrix[from][to] = cell;\n        if (!e.isOriented())\n            adjacencyMatrix[to][from] = cell;\n    });\n\n    return {adjacencyMatrix, verticesNumbers};\n};","import { algorithmStep, changeGraphMode, closeMessage, showMessage } from \"./index\";\nimport { GraphMode } from \"../components/Graph/Graph\";\nimport { Criteria, PreCallAction } from \"../algorithms/graph\";\nimport { sleep } from \"../utils/sleep\";\nimport { edgesListToAdjacencyList } from \"../utils/graphConverter\";\n\nexport const ActionType = Object.freeze({\n    PRE_CALL: 'PRE_CALL',\n    CALL: 'CALL',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    POP_TRACE_STEP: 'POP_TRACE_STEP',\n    SET_ALGORITHM: 'SET_ALGORITHM',\n    SET_SPEED: 'SET_SPEED',\n    SET_IS_ONE_STEP: 'SET_IS_ONE_STEP',\n    CLEAR_TRACE: 'CLEAR_TRACE',\n    SHOW_STATISTICS: 'SHOW_STATISTICS',\n    CLEAR_STATISTICS: 'CLEAR_STATISTICS'\n});\n\nexport const preCall = (isOneStep = false) => (dispatch, getState) => {\n    dispatch(setIsOneStep(isOneStep));\n\n    const graph = getState().graphReducer.graph;\n    const vertices = graph.vertices;\n    const edges = graph.edges;\n    const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n    const criteria = getState().algorithmReducer.algorithm.criteria;\n    if (criteria & Criteria.WEIGHTED) {\n        for (const edge of edges) {\n            if (!edge.isWeighted()) {\n                dispatch(showMessage(\"Граф должен быть взвешенным!\", true));\n                return;\n            }\n        }\n    }\n    if ((criteria & Criteria.NOT_ORIENTED) && graph.isOriented()) {\n        dispatch(showMessage(\"Граф должен быть неориентированным!\", true));\n        return;\n    }\n    if ((criteria & Criteria.ORIENTED) && !graph.isOriented()) {\n        dispatch(showMessage(\"Граф должен быть ориентированным!\", true));\n        return;\n    }\n    if ((criteria & Criteria.CONNECTED) && (vertices.length > 0)) {\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        const dfs = (v) => {\n            used[v] = true;\n            let to;\n            adjacencyList[v].forEach(toVertex => {\n                to = toVertex.name;\n                if (!used[to]) {\n                    dfs(to);\n                }\n            });\n        };\n        dfs(vertices[0].name);\n\n        for (const v of vertices) {\n            if (!used[v.name]) {\n                dispatch(showMessage(\"Граф должен быть связным!\", true));\n                return;\n            }\n        }\n    }\n    if ((criteria & Criteria.ACYCLIC) && (vertices.length > 0)) {\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = 0);\n        const dfs = (v) => {\n            used[v] = 1;\n            let to;\n            for (const toVertex of adjacencyList[v]) {\n                to = toVertex.name;\n                if (!used[to]) {\n                    if (!dfs(to))\n                        return false;\n                } else if (used[to] === 1) {\n                    return false;\n                }\n            }\n            used[v] = 2;\n            return true;\n        };\n        for (const {name: start} of vertices) {\n            if (!used[start] && !dfs(start)) {\n                dispatch(showMessage(\"Граф должен быть ацикличным!\", true));\n                return;\n            }\n        }\n    }\n\n    const preCall = getState().algorithmReducer.algorithm.preCall;\n    if (preCall === PreCallAction.SELECT_VERTEX) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX));\n        dispatch(showMessage(\"Выберите вершину\"));\n    } else if (preCall === PreCallAction.SELECT_EDGE) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE));\n        dispatch(showMessage(\"Выберите ребро\"));\n    } else if (preCall === PreCallAction.NOTHING) {\n        dispatch(call());\n    }\n};\n\nexport const setSpeed = (speed) => ({\n    type: ActionType.SET_SPEED,\n    speed\n});\n\nexport const setAlgorithm = (algorithm) => ({\n    type: ActionType.SET_ALGORITHM,\n    algorithm\n});\n\nconst setIsOneStep = (isOneStep) => ({\n    type: ActionType.SET_IS_ONE_STEP,\n    isOneStep\n});\n\nexport const call = (vertex, edge) => (dispatch, getState) => {\n    dispatch(closeMessage());\n    dispatch(changeGraphMode(GraphMode.DEFAULT));\n    const graph = getState().graphReducer.graph;\n    dispatch(callConnector(graph, vertex, edge));\n\n    const isOneStep = getState().algorithmReducer.isOneStep;\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nexport const continueCall = (isOneStep = false) => (dispatch) => {\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nconst start = () => ({\n    type: ActionType.START\n});\n\nexport const pause = () => ({\n    type: ActionType.PAUSE\n});\n\nconst callConnector = (graph, vertex, edge) => ({\n    type: ActionType.CALL,\n    graph,\n    vertex,\n    edge\n});\n\nlet currentVisualizationId = 0; // To prevent several visualization 'threads'\n\nconst callSuccess = (isOneStep = false) => async (dispatch, getState) => {\n    if (isOneStep) {\n        let traceStep = {isChained : true};\n        while ((getState().algorithmReducer.trace.length > 0) && traceStep.isChained) {\n            traceStep = getState().algorithmReducer.trace[0];\n            dispatch(algorithmStep(traceStep));\n            dispatch(popTraceStep());\n\n            if (getState().algorithmReducer.trace.length === 0) {\n                dispatch(showStatistics());\n            }\n        }\n        return;\n    }\n\n    const visualizationId = ++currentVisualizationId;\n    let traceStep;\n    while ((getState().algorithmReducer.trace.length > 0) && getState().algorithmReducer.isActive) {\n        traceStep = getState().algorithmReducer.trace[0];\n        dispatch(algorithmStep(traceStep));\n        dispatch(popTraceStep());\n        if ((getState().algorithmReducer.trace.length > 0) && !traceStep.isChained) {\n            await sleep(getState().algorithmReducer.speed);\n            if (currentVisualizationId !== visualizationId)\n                return;\n        }\n    }\n    if (getState().algorithmReducer.isActive) {\n        dispatch(pause());\n        dispatch(showStatistics());\n    }\n};\n\nconst popTraceStep = () => ({\n    type: ActionType.POP_TRACE_STEP\n});\n\nexport const clearTrace = () => ({\n    type: ActionType.CLEAR_TRACE\n});\n\nconst showStatistics = () => ({\n   type: ActionType.SHOW_STATISTICS\n});\n\nexport const clearStatistics = () => ({\n    type: ActionType.CLEAR_STATISTICS\n});","import { Arrow, Group, Line } from \"react-konva\";\nimport React from \"react\";\nimport { EdgeLabel, getEdgePointsForType } from \"../Edge/Edge\";\n\nexport const VisualizationEdgeComponent = ({ edge, edgeType }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Graph.module.scss\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Vertex, VertexComponent } from \"./Vertex/Vertex\";\nimport { Edge, EdgeComponent, EdgeType } from \"./Edge/Edge\";\nimport { connect } from \"react-redux\";\nimport {\n    addEdge,\n    addVertex,\n    moveCanvas,\n    removeEdge,\n    removeVertex,\n    selectVertex,\n    unselectVertex,\n    updateVertexPosition\n} from \"../../actions\";\nimport { startDialogForResult } from \"../../actions/dialog\";\nimport { call } from \"../../actions/algorithm\";\nimport { VisualizationEdgeComponent } from \"./VisualizationEdge/VisualizationEdge\";\n\nconst cx = classnames.bind(styles);\n\nexport const vertexRadius = 20;\n\nconst mapStateToProps = state => ({\n    graph: state.graphReducer.graph,\n    graphMode: state.graphReducer.graphMode,\n    selectedVertex: state.graphReducer.selectedVertex,\n    canvasX: state.graphReducer.canvasX,\n    canvasY: state.graphReducer.canvasY\n});\n\nexport const GraphMode = Object.freeze({\n    DEFAULT: 0,\n    ADD_VERTEX: 1,\n    ADD_EDGE: 2,\n    REMOVE_VERTEX_OR_EDGE: 3,\n    ALGORITHM_PRE_CALL_SELECT_VERTEX: 4,\n    ALGORITHM_PRE_CALL_SELECT_EDGE: 5\n});\n\nexport class Graph {\n    constructor(oriented, vertices = null, edges = null) {\n        if (!vertices || !Array.isArray(vertices) || !edges || !Array.isArray(edges)) {\n            this._vertices = [];\n            this._edges = [];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = 0;\n        } else {\n            for (let i = 0; i < vertices.length; ++i) {\n                if ((vertices[i].name < 0) || (vertices[i].name > 999))\n                    throw new Error(\"Invalid vertex name\");\n\n                for (let j = 0; j < vertices.length; ++j) {\n                    if ((i !== j) && (vertices[i].name === vertices[j].name))\n                        throw new Error(\"Two vertices with equal names\");\n                }\n            }\n\n            for (let i = 0; i < edges.length; ++i) {\n                if (edges[i].weight && ((edges[i].weight < 0) || (edges[i].weight > 99)))\n                    throw new Error(\"Invalid edge weight\");\n                if (vertices.findIndex(v => v.name === edges[i].from.name) === -1)\n                    throw new Error(\"Invalid vertex 'from'\");\n                if (vertices.findIndex(v => v.name === edges[i].to.name) === -1)\n                    throw new Error(\"Invalid vertex 'to'\");\n\n                for (let j = 0; j < edges.length; ++j) {\n                    if (i !== j) {\n                        if (oriented) {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name))\n                                throw new Error(\"Multiedges aren't supported\");\n                        } else {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name)\n                                || (edges[i].to.name === edges[j].from.name) && (edges[i].from.name === edges[j].to.name)) {\n                                throw new Error(\"Multiedges aren't supported\");\n                            }\n                        }\n                    }\n                }\n            }\n\n            this._vertices = [...vertices];\n            this._edges = [...edges];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = Math.max(...vertices.map(v => v.name)) + 1;\n        }\n    }\n\n    addVertex(x, y, radius) {\n        const vertex = new Vertex(x, y, radius, this._currentName++);\n        this._vertices.push(vertex);\n        return vertex;\n    }\n\n    removeVertex(vertex) {\n        const index = this._vertices.findIndex(v => v === vertex);\n        if (index !== -1) {\n            this._vertices.splice(index, 1);\n            this._edges = this._edges.filter(edge => (edge.from.name !== vertex.name) && (edge.to.name !== vertex.name));\n        }\n    }\n\n    findEdge(vertexFrom, vertexTo) {\n        if (this._oriented)\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addEdge(vertexFrom, vertexTo, weight) {\n        const i = this.findEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, this._oriented, weight);\n            this._edges.push(edge);\n            return edge;\n        }\n        else {\n            this._edges[i].weight = weight;\n        }\n    }\n\n    removeEdge(edge) {\n        this._edges = this._edges.filter(e => e !== edge);\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n        if (this._oriented)\n            this._edges.forEach(edge => edge.invertOrientation());\n        else {\n            const newEdges = [];\n            this._edges.forEach(edge => {\n                if (newEdges.findIndex(e => (e.from === edge.from) && (e.to === edge.to)\n                    || (e.to === edge.from) && (e.from === edge.to)) === -1) {\n\n                    edge.invertOrientation();\n                    newEdges.push(edge);\n                }\n            });\n            this._edges = newEdges;\n        }\n    }\n\n    findVisualizationEdge(vertexFrom, vertexTo, oriented) {\n        if (oriented)\n            return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addVisualizationEdge(vertexFrom, vertexTo, oriented, weight) {\n        this.removeVisualizationEdgeByVertices(vertexFrom, vertexTo, oriented);\n        const edge = new Edge(vertexFrom, vertexTo, oriented, weight);\n        this._visualizationEdges.push(edge);\n        return edge;\n    }\n\n    removeVisualizationEdge(edge) {\n        this._visualizationEdges = this._visualizationEdges.filter(e => e !== edge);\n    }\n\n    removeVisualizationEdgeByVertices(vertexFrom, vertexTo, oriented) {\n        if (oriented)\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                (e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)\n            );\n        else\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                ((e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)) &&\n                ((e.to.name !== vertexFrom.name) || (e.from.name !== vertexTo.name))\n            );\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    get visualizationEdges() {\n        return this._visualizationEdges;\n    }\n\n    set visualizationEdges(edges) {\n        this._visualizationEdges = edges;\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n}\n\nclass GraphComponent extends React.Component {\n    state = {\n        draggedVertex: undefined,\n        windowWidth: 700,\n        windowHeight: 700\n    };\n\n    componentDidMount() {\n        const handleResize = () => {\n            this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n        };\n        window.onresize = handleResize;\n        handleResize();\n    }\n\n    findIndexOfVertex = (vertex) => {\n        return this.props.graph.vertices.findIndex(v => v === vertex);\n    };\n\n    handleVertexDragStart = (e, vertex) => {\n        e.cancelBubble = true;\n\n        const i = this.findIndexOfVertex(vertex);\n        this.setState({ draggedVertex: (i !== -1 ? i : undefined) });\n    };\n\n    updateDraggedVertex = (x, y) => {\n        const vertex = this.state.draggedVertex;\n        if (vertex !== undefined)\n            this.props.updateVertexPosition(vertex, x, y);\n    };\n\n    handleVertexDragMove = e => {\n        e.cancelBubble = true;\n\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n    };\n\n    handleVertexDragEnd = (e, vertex) => {\n        e.cancelBubble = true;\n\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n        this.setState({ draggedVertex: undefined });\n    };\n\n    getEdgeType = edge => {\n        const vertexFrom = edge.from, vertexTo = edge.to;\n\n        if (vertexTo === vertexFrom)\n            return EdgeType.LOOP;\n        else if (!edge.isOriented())\n            return EdgeType.NOT_ORIENTED;\n        else if ((this.props.graph.edges.findIndex(e => (e.from === vertexTo) && (e.to === vertexFrom)) !== -1)\n                && (this.props.graph.edges.findIndex(e => (e.to === vertexTo) && (e.from === vertexFrom)) !== -1))\n            return EdgeType.TWO_SIDE_ORIENTED;\n        else\n            return EdgeType.ONE_SIDE_ORIENTED;\n    };\n\n    handleCanvasClick = e => {\n        const x = e.evt.clientX - this.props.canvasX, y = e.evt.clientY - this.props.canvasY;\n\n        if (this.props.graphMode === GraphMode.ADD_VERTEX)\n            this.props.addVertex(x, y, vertexRadius);\n        else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            if (this.props.selectedVertex !== undefined) {\n                this.props.unselectVertex();\n            }\n        }\n    };\n\n    handleVertexClick = (e, vertex) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeVertex(vertex);\n        } else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            e.cancelBubble = true;\n\n            if (this.props.selectedVertex === undefined) {\n                this.props.selectVertex(vertex);\n            }\n            else {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    \"\",\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        this.props.addEdge(this.props.selectedVertex, vertex, value);\n                        this.props.unselectVertex();\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX) {\n            e.cancelBubble = true;\n\n            this.props.callAlgorithm(vertex, null);\n        }\n    };\n\n    handleEdgeClick = (e, edge) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeEdge(edge);\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE) {\n            e.cancelBubble = true;\n            this.props.callAlgorithm(null, edge);\n        }\n    };\n\n    handleCanvasDragEnd = (e) => {\n        this.props.moveCanvas(e.target.x(), e.target.y());\n    };\n\n    render() {\n        return (\n            <Stage\n                x={this.props.canvasX}\n                y={this.props.canvasY}\n                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                onDragEnd={this.handleCanvasDragEnd}\n                onClick={this.handleCanvasClick}\n                width={this.state.windowWidth}\n                height={this.state.windowHeight}>\n                <Layer>\n                    <Rect fill={'white'} x={0} y={0} width={this.state.windowWidth} height={this.state.windowHeight}/>\n                    {\n                        this.props.graph.edges.map((edge, index) =>\n                            <EdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}\n                                onClick={(e) => this.handleEdgeClick(e, edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.visualizationEdges.map((edge, index) =>\n                            <VisualizationEdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.vertices.map((vertex, index) =>\n                            <VertexComponent\n                                key={index}\n                                vertex={vertex}\n                                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                                onClick={(e) => this.handleVertexClick(e, vertex)}\n                                onDragStart={e => this.handleVertexDragStart(e, vertex)}\n                                onDragEnd={e => this.handleVertexDragEnd(e, vertex)}\n                                onDragMove={e => this.handleVertexDragMove(e, vertex)}/>\n                        )\n                    }\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    addVertex: (x, y, radius) => dispatch(addVertex(x, y, radius)),\n    addEdge: (vertexFrom, vertexTo, radius) => dispatch(addEdge(vertexFrom, vertexTo, radius)),\n    removeVertex: (vertex) => dispatch(removeVertex(vertex)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    updateVertexPosition: (vertexIndex, x, y) => dispatch(updateVertexPosition(vertexIndex, x, y)),\n    selectVertex: (vertex) => dispatch(selectVertex(vertex)),\n    unselectVertex: (vertex) => dispatch(unselectVertex(vertex)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern)),\n    callAlgorithm: (vertex, edge) => dispatch(call(vertex, edge)),\n    moveCanvas: (x, y) => dispatch(moveCanvas(x, y))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Buttons.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const ButtonComponent = ({ text, type = \"button\", onClick, activated, className }) => {\n    return (\n        <button type={type} className={cx(\"button\", className, {[`activated`]: activated})} onClick={onClick}>\n            {text}\n        </button>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Sliders.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const SliderComponent = ({ label, value, min, max, onChange }) => {\n    return (\n        <div className={cx(\"slider-wrapper\")}>\n            <div className={cx(\"slider-label\")}>{label}</div>\n            <input\n                type={\"range\"}\n                className={cx(\"slider\")}\n                value={value}\n                min={min}\n                max={max}\n                onChange={onChange}/>\n        </div>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./DropDownLists.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const DropDownList = ({ items, onChange }) => {\n    return (\n        <select className={cx(\"drop-down-list\")} onChange={onChange}>\n            {items.map((item, index) => <option key={index} value={index}>{item}</option>)}\n        </select>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./ToggleSwitches.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const RoundedToggleSwitch = ({ text, onChange, className, isChecked }) => {\n    return (\n        <div className={cx(\"switch-round-wrapper\", className)}>\n            <label className={cx(\"switch-round\")}>\n                <input type={\"checkbox\"} onChange={onChange} checked={isChecked}/>\n                <span className={cx(\"slider\")}/>\n            </label>\n            <span className={cx(\"text\")}>{text}</span>\n        </div>\n    );\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList);\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nexport default {\n    name: \"Поиск в глубину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        dfs(start.name, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export class Queue {\n    constructor() {\n        this._queue = [];\n    }\n\n    get length() {\n        return this._queue.length;\n    }\n\n    isEmpty() {\n        return this._queue.length === 0;\n    }\n\n    push(value) {\n        this._queue.push(value);\n    }\n\n    pop() {\n        // TODO: O(N) -> O(1)\n        return this._queue.shift();\n    }\n\n    peek() {\n        return this._queue[0];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Поиск в ширину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        bfs(start.name, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst dijkstra = (start, vertices, adjacencyList, used, trace) => {\n    const d = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (d[v] + weight < d[to]) {\n                d[to] = d[v] + weight;\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Алгоритм Дейкстры\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.WEIGHTED,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        dijkstra(start.name, vertices.map(v => v.name), adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst prim = (start, vertices, edges, adjacencyList, used, trace) => {\n    edges.forEach(e => {\n        trace.push({ from: e.from.name, to: e.to.name, oriented: false, weight: e.weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    });\n\n    const d = {};\n    const mst = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        mst[v] = null;\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (weight < d[to]) {\n                d[to] = weight;\n                if (mst[to] !== null) {\n                    trace.push({ from: mst[to], to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: false });\n                }\n                mst[to] = v;\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n    let mstWeight = 0;\n    for (const v in d)\n        mstWeight += d[v];\n    return mstWeight;\n};\n\nexport default {\n    name: \"Алгоритм Прима\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const start = vertices[Math.floor(Math.random() * vertices.length)];\n        const mstWeight = prim(start.name, vertices.map(v => v.name), edges, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export class DSU {\n    constructor() {\n        this.parent = {};\n        this.size = {};\n    }\n\n    makeSet(x) {\n        this.parent[x] = x;\n        this.size[x] = 1;\n    }\n\n    find(x) {\n        if (x === this.parent[x])\n            return x;\n        this.parent[x] = this.find(this.parent[x]);\n        return this.parent[x];\n    }\n\n    union(x, y) {\n        x = this.find(x);\n        y = this.find(y);\n        if (x !== y)\n            if (this.size[x] < this.size[y])\n                [x, y] = [y, x];\n            this.parent[y] = x;\n            this.size[x] += this.size[y];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction } from \"./index\";\nimport { DSU } from \"../../utils/dsu\";\n\nconst kruskal = (vertices, edges, trace) => {\n    const dsu = new DSU();\n    vertices.forEach(v => dsu.makeSet(v.name));\n    edges.sort((a, b) => a.weight - b.weight);\n\n    edges.forEach(e => {\n        trace.push({ from: e.from.name, to: e.to.name, oriented: false, weight: e.weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    });\n\n    let mstWeight = 0;\n    let from, to, weight;\n    edges.forEach(e => {\n        from = e.from.name;\n        to = e.to.name;\n        weight = Number(e.weight);\n        trace.push({ from, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n        if (dsu.find(from) !== dsu.find(to)) {\n            mstWeight += weight;\n            dsu.union(from, to);\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else {\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n\n    return mstWeight;\n};\n\nexport default {\n    name: \"Алгоритм Краскала\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const mstWeight = kruskal(vertices, edges, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: false, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n\n    for (const vertex of vertices)\n        if (!used[vertex.name])\n            return false;\n    return true;\n};\n\nexport default {\n    name: \"Проверка на связность\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const start = vertices[Math.floor(Math.random() * vertices.length)];\n        const isConnected = bfs(start.name, vertices, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Граф ${isConnected ? \"связный\" : \"несвязный\"}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList, parent = -1, color = 1) => {\n    used[vertex] = color;\n    trace.push({ vertex, action: color === 1 ? VertexAction.COLOR_1 : VertexAction.COLOR_2, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    for (const toVertex of adjacencyList[vertex]) {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (!dfs(to, adjacencyList, vertex, 3 - color))\n                return false;\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else if ((parent !== to) && (used[to] === color)) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            return false;\n        }\n    }\n    return true;\n};\n\nexport default {\n    name: \"Проверка на двудольность\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = 0);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        let isBipartite = true;\n        for (const {name: vertex} of vertices) {\n            if (!used[vertex]) {\n                isBipartite &= dfs(vertex, adjacencyList);\n                if (!isBipartite)\n                    break;\n            }\n        }\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Граф ${isBipartite ? \"двудольный\" : \"недвудольный\"}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    const d = {}, p = {};\n    vertices.forEach(vertex => {\n        d[vertex.name] = Number.MAX_SAFE_INTEGER;\n        p[vertex.name] = -1;\n    });\n    used[start] = true;\n    const queue = new Queue();\n    queue.push({ vertex: start, level: 0 });\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    let vertex, level, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.peek().vertex;\n        level = queue.pop().level;\n        d[vertex] = level;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                used[to] = true;\n                queue.push({ vertex: to, level: level + 1 });\n                p[to] = vertex;\n            }\n        });\n    }\n\n    while (p[vertex] !== -1) {\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ from: p[vertex], to: vertex, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        vertex = p[vertex];\n    }\n    trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex: start, hint: level, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n    return level;\n};\n\nconst findRadius = (vertices, edges, adjacencyList, trace) => {\n    let used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let eccentricities = {};\n    let radius = Number.MAX_SAFE_INTEGER;\n    for (const {name: start} of vertices) {\n        vertices.forEach(vertex => used[vertex.name] = false);\n        eccentricities[start] = bfs(start, vertices, adjacencyList, used, trace);\n        trace.push({ vertex: start, hint: eccentricities[start], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n\n        trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n\n        radius = Math.min(radius, eccentricities[start]);\n    }\n\n    for (const {name: v} of vertices) {\n        if (eccentricities[v] === radius)\n            trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    }\n\n    return radius;\n};\n\nexport default {\n    name: \"Радиус и центр графа\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED | Criteria.CONNECTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const trace = [];\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        const startTime = window.performance.now();\n\n        const radius = findRadius(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Радиус графа: ${radius}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    const d = {}, p = {};\n    vertices.forEach(vertex => {\n        d[vertex.name] = Number.MAX_SAFE_INTEGER;\n        p[vertex.name] = -1;\n    });\n    used[start] = true;\n    const queue = new Queue();\n    queue.push({ vertex: start, level: 0 });\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    let vertex, level, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.peek().vertex;\n        level = queue.pop().level;\n        d[vertex] = level;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                used[to] = true;\n                queue.push({ vertex: to, level: level + 1 });\n                p[to] = vertex;\n            }\n        });\n    }\n\n    while (p[vertex] !== -1) {\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ from: p[vertex], to: vertex, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        vertex = p[vertex];\n    }\n    trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex: start, hint: level, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n    return level;\n};\n\nconst findDiameter = (vertices, edges, adjacencyList, trace) => {\n    let used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let eccentricities = {};\n    let diameter = 0;\n    for (const {name: start} of vertices) {\n        vertices.forEach(vertex => used[vertex.name] = false);\n        eccentricities[start] = bfs(start, vertices, adjacencyList, used, trace);\n        trace.push({ vertex: start, hint: eccentricities[start], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n\n        trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n\n        diameter = Math.max(diameter, eccentricities[start]);\n    }\n\n    for (const {name: v} of vertices) {\n        if (eccentricities[v] === diameter)\n            trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    }\n\n    return diameter;\n};\n\nexport default {\n    name: \"Диаметр и переферийные вершины графа\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED | Criteria.CONNECTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const trace = [];\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        const startTime = window.performance.now();\n\n        const diameter = findDiameter(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Диаметр графа: ${diameter}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\nlet topSortList = [];\nlet addedVertices = 0;\nlet sortedVertices = 0;\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            dfs(to, adjacencyList);\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        }\n    });\n    trace.push({ vertex, hint: addedVertices++, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    topSortList.push(vertex);\n};\n\nconst topSort = (vertices, edges, adjacencyList, trace) => {\n    used = {};\n    topSortList = [];\n    const isStartVertex = {};\n    vertices.forEach(vertex => {\n        used[vertex.name] = false;\n        isStartVertex[vertex.name] = true;\n    });\n    for (const {name: from} of vertices) {\n        adjacencyList[from].forEach(to => {\n            isStartVertex[to.name] = false;\n        });\n    }\n    addedVertices = 0;\n    sortedVertices = 0;\n\n    for (const {name: start} of vertices) {\n        if (isStartVertex[start]) {\n            dfs(start, adjacencyList);\n        }\n    }\n\n    for (const v of topSortList.reverse()) {\n        trace.push({ vertex: v, hint: sortedVertices++, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        trace.push({ vertex: v, action: VertexAction.UNSELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Топологическая сортировка\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.ORIENTED | Criteria.ACYCLIC,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        topSort(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\nlet timer = 0;\nlet tin = {}, tout = {};\nlet countBridges = 0;\n\nconst dfs = (vertex, adjacencyList, parent = -1) => {\n    used[vertex] = true;\n    tin[vertex] = tout[vertex] = timer++;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (const {name: to} of adjacencyList[vertex]) {\n        if (to === parent)\n            continue;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList, vertex);\n            tout[vertex] = Math.min(tout[vertex], tout[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (tout[to] > tin[vertex]) {\n                ++countBridges;\n                trace.push({ from: vertex, to, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        } else {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            tout[vertex] = Math.min(tout[vertex], tin[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    }\n\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nconst findBridges = (vertices, edges, adjacencyList) => {\n    used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n    timer = 0;\n    tin = {};\n    tout = {};\n    countBridges = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start])\n            dfs(start, adjacencyList);\n    }\n};\n\nexport default {\n    name: \"Поиск мостов\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        findBridges(vertices, edges, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Количество мостов: ${countBridges}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\nlet timer = 0;\nlet tin = {}, tout = {};\nlet countArticulationPoints = 0;\nlet isArticulationPoint = {};\n\nconst dfs = (vertex, adjacencyList, parent = -1) => {\n    used[vertex] = true;\n    tin[vertex] = tout[vertex] = timer++;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n    let children = 0;\n\n    for (const {name: to} of adjacencyList[vertex]) {\n        if (to === parent)\n            continue;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList, vertex);\n            tout[vertex] = Math.min(tout[vertex], tout[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if ((tout[to] >= tin[vertex]) && (parent !== -1) && !isArticulationPoint[vertex]) {\n                ++countArticulationPoints;\n                isArticulationPoint[vertex] = true;\n                trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n            ++children;\n        } else {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            tout[vertex] = Math.min(tout[vertex], tin[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    }\n\n    if (!isArticulationPoint[vertex]) {\n        trace.push({vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION});\n\n        if ((parent === -1) && (children > 1)) {\n            trace.push({vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION});\n        }\n    }\n};\n\nconst findArticulationPoints = (vertices, edges, adjacencyList) => {\n    used = {};\n    vertices.forEach(vertex => {\n        used[vertex.name] = false;\n        isArticulationPoint[vertex.name] = false;\n    });\n    timer = 0;\n    tin = {};\n    tout = {};\n    countArticulationPoints = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start])\n            dfs(start, adjacencyList);\n    }\n};\n\nexport default {\n    name: \"Поиск точек сочленения\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        findArticulationPoints(vertices, edges, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Количество точек сочленения: ${countArticulationPoints}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList, edgesListToReversedAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\nlet topSortList = [];\nlet addedVertices = 0;\nlet sortedVertices = 0;\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            dfs(to, adjacencyList);\n            trace.push({ from: vertex, to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        }\n    });\n    trace.push({ vertex, hint: addedVertices++, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    topSortList.push(vertex);\n};\n\nconst topSort = (vertices, edges, adjacencyList, trace) => {\n    used = {};\n    topSortList = [];\n    vertices.forEach(vertex => used[vertex.name] = false);\n    addedVertices = 0;\n    sortedVertices = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start]) {\n            dfs(start, adjacencyList);\n        }\n    }\n\n    for (const v of topSortList.reverse()) {\n        trace.push({ vertex: v, hint: sortedVertices++, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        trace.push({ vertex: v, action: VertexAction.UNSELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nconst findComponents = (vertices, edges, adjacencyList, trace) => {\n    for (const {from, to} of edges) {\n        trace.push({ from: from.name, to: to.name, oriented: true, action: EdgeAction.FLIP, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    }\n    trace[trace.length - 1].isChained = false;\n\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let componentsNumber = 0;\n\n    const dfsComponents = (vertex) => {\n        used[vertex] = true;\n        trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ vertex, hint: componentsNumber, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION});\n\n        let to;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                dfsComponents(to);\n                trace.push({ from: vertex, to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            }\n        });\n\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    };\n\n    for (const v of topSortList) {\n        if (!used[v]) {\n            dfsComponents(v);\n            ++componentsNumber;\n        }\n    }\n\n    for (const {from, to} of edges) {\n        trace.push({ from: from.name, to: to.name, oriented: true, action: EdgeAction.FLIP, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    }\n\n    return componentsNumber;\n};\n\nexport default {\n    name: \"Конденсация графа (алгоритм Косарайю)\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.ORIENTED,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        topSort(vertices, edges, adjacencyList, trace);\n        const componentsNumber = findComponents(vertices, edges, reversedAdjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Количество компонент сильной связности: ${componentsNumber}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList, edgesListToReversedAdjacencyList } from \"../../utils/graphConverter\";\n\nlet trace = [];\n\nconst checkForEuler = (vertices, edges, adjacencyList, trace) => {\n    let oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    if (!oriented) {\n\n        // Delete loops to prevent odd degrees\n        for (const {name: v} of vertices) {\n            adjacencyList[v] = adjacencyList[v].filter(toVertex => toVertex.name !== v);\n        }\n\n        let oddVertices = 0;\n        for (const {name: v} of vertices) {\n            if (adjacencyList[v].length % 2 === 1) {\n                ++oddVertices;\n                if (oddVertices > 2) {\n                    trace.push({ vertex: v, hint: 1, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                    return false;\n                } else\n                    trace.push({ vertex: v, hint: 1, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    } else {\n        let outOddVertices = 0;\n        let inOddVertices = 0;\n        let degree;\n        for (const {name: v} of vertices) {\n            degree = reversedAdjacencyList[v].length - adjacencyList[v].length;\n            if (degree === 1) {\n                ++outOddVertices;\n                if (outOddVertices > 1) {\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                    return false;\n                } else\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else if (degree === -1) {\n                ++inOddVertices;\n                if (outOddVertices > 1) {\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                    return false;\n                } else\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else if (degree !== 0) {\n                trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    }\n\n    const used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n    const dfs = (v) => {\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n        for (const {name: to} of adjacencyList[v]) {\n            if (!used[to]) {\n                trace.push({ from: v, to, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                dfs(to);\n            }\n        }\n        if (oriented) {\n            for (const {name: from} of reversedAdjacencyList[v]) {\n                if (!used[from]) {\n                    trace.push({ from, to: v, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                    dfs(from);\n                }\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    };\n\n    dfs(vertices[0].name);\n\n    for (const {name: v} of vertices) {\n        if (!used[v]) {\n            if (adjacencyList[v].length > 0) {\n                trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: v, to: adjacencyList[v][0].name, oriented, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        }\n    }\n\n    return true;\n};\n\nconst findEulerPath = (vertices, edges, adjacencyList, trace) => {\n    const oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    let start = vertices[0].name;\n    for (const {name: v} of vertices) {\n        if (!oriented) {\n            if (adjacencyList[v].length % 2 === 1) {\n                start = v;\n                break;\n            }\n        } else {\n            if (reversedAdjacencyList[v].length - adjacencyList[v].length === 1) {\n                start = v;\n                break;\n            }\n        }\n    }\n    trace.push({ vertex: start, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    if (oriented)\n        adjacencyList = reversedAdjacencyList;\n\n    const currentVertices = [];\n    let pathLen = 0;\n    currentVertices.push(start);\n    let cur;\n    while (currentVertices.length > 0) {\n        cur = currentVertices[currentVertices.length - 1];\n        if (adjacencyList[cur].length > 0) {\n            currentVertices.push(adjacencyList[cur][0].name);\n            const to = adjacencyList[cur].shift().name;\n            if (!oriented) {\n                adjacencyList[to] = adjacencyList[to].filter(e => e.name !== cur);\n            }\n            trace.push({ from: cur, to, oriented: true, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else {\n            currentVertices.pop();\n            if (currentVertices.length > 0) {\n                if (pathLen === 0)\n                    trace.push({ vertex: cur, action: VertexAction.COLOR_1, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: currentVertices[currentVertices.length - 1], to: cur, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ from: cur, to: currentVertices[currentVertices.length - 1], oriented: true, weight: ++pathLen, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n    }\n};\n\nexport default {\n    name: \"Эйлеров путь\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        let isEuler = checkForEuler(vertices, edges, Object.assign({}, adjacencyList), trace);\n        if (isEuler) {\n            trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n            trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            findEulerPath(vertices, edges, adjacencyList, trace);\n        }\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Эйлеров путь ${isEuler ? '' : 'не'} существует`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList, edgesListToReversedAdjacencyList } from \"../../utils/graphConverter\";\n\nlet trace = [];\n\nconst checkForEuler = (vertices, edges, adjacencyList, trace) => {\n    let oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    if (!oriented) {\n\n        // Delete loops to prevent odd degrees\n        for (const {name: v} of vertices) {\n            adjacencyList[v] = adjacencyList[v].filter(toVertex => toVertex.name !== v);\n        }\n\n        for (const {name: v} of vertices) {\n            if (adjacencyList[v].length % 2 === 1) {\n                trace.push({ vertex: v, hint: 1, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    } else {\n        let degree;\n        for (const {name: v} of vertices) {\n            degree = reversedAdjacencyList[v].length - adjacencyList[v].length;\n            if (degree !== 0) {\n                trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    }\n\n    const used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n    const dfs = (v) => {\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n        for (const {name: to} of adjacencyList[v]) {\n            if (!used[to]) {\n                trace.push({ from: v, to, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                dfs(to);\n            }\n        }\n        if (oriented) {\n            for (const {name: from} of reversedAdjacencyList[v]) {\n                if (!used[from]) {\n                    trace.push({ from, to: v, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                    dfs(from);\n                }\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    };\n\n    dfs(vertices[0].name);\n\n    for (const {name: v} of vertices) {\n        if (!used[v]) {\n            if (adjacencyList[v].length > 0) {\n                trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: v, to: adjacencyList[v][0].name, oriented, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        }\n    }\n\n    return true;\n};\n\nconst findEulerCycle = (vertices, edges, adjacencyList, trace) => {\n    const oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    let start = vertices[0].name;\n    trace.push({ vertex: start, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    if (oriented)\n        adjacencyList = reversedAdjacencyList;\n\n    const currentVertices = [];\n    let pathLen = 0;\n    currentVertices.push(start);\n    let cur;\n    while (currentVertices.length > 0) {\n        cur = currentVertices[currentVertices.length - 1];\n        if (adjacencyList[cur].length > 0) {\n            currentVertices.push(adjacencyList[cur][0].name);\n            const to = adjacencyList[cur].shift().name;\n            if (!oriented) {\n                adjacencyList[to] = adjacencyList[to].filter(e => e.name !== cur);\n            }\n            trace.push({ from: cur, to, oriented: true, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else {\n            currentVertices.pop();\n            if (currentVertices.length > 0) {\n                if (pathLen === 0)\n                    trace.push({ vertex: cur, action: VertexAction.COLOR_1, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: currentVertices[currentVertices.length - 1], to: cur, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ from: cur, to: currentVertices[currentVertices.length - 1], oriented: true, weight: ++pathLen, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n    }\n};\n\nexport default {\n    name: \"Эйлеров цикл\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        let isEuler = checkForEuler(vertices, edges, Object.assign({}, adjacencyList), trace);\n        if (isEuler) {\n            trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n            trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            findEulerCycle(vertices, edges, adjacencyList, trace);\n        }\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Эйлеров цикл ${isEuler ? '' : 'не'} существует`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export const ActionType = Object.freeze({\n    START_MATRIX_DIALOG_FOR_RESULT: 'START_MATRIX_DIALOG_FOR_RESULT',\n    CLOSE_MATRIX_DIALOG: 'CLOSE_MATRIX_DIALOG'\n});\n\nexport const startMatrixDialogForResult = () => ({\n    type: ActionType.START_MATRIX_DIALOG_FOR_RESULT\n});\n\nconst closeMatrixDialog = () => ({\n   type: ActionType.CLOSE_MATRIX_DIALOG\n});\n\nexport const cancelMatrixDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeMatrixDialog());\n};\n\nexport const submitMatrixDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeMatrixDialog());\n};","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Menu.module.scss\";\nimport Draggable from 'react-draggable';\nimport { ButtonComponent } from \"../Buttons/Buttons\";\nimport { SliderComponent } from \"../Sliders/Sliders\";\nimport { DropDownList } from \"../DropDownLists/DropDownLists\";\nimport {\n    changeGraphMode,\n    cleanGraphSelections,\n    closeMessage,\n    invertOrientation,\n    moveCanvas,\n    setGraph,\n    showMessage\n} from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { Graph, GraphMode, vertexRadius } from \"../Graph/Graph\";\nimport { RoundedToggleSwitch } from \"../ToggleSwitches/ToggleSwitches\";\nimport {\n    call,\n    clearStatistics,\n    clearTrace,\n    continueCall,\n    pause,\n    preCall,\n    setAlgorithm,\n    setSpeed\n} from \"../../actions/algorithm\";\nimport DFS from \"../../algorithms/graph/dfs\"\nimport BFS from \"../../algorithms/graph/bfs\"\nimport Dijkstra from \"../../algorithms/graph/dijkstra\"\nimport PrimMST from \"../../algorithms/graph/prim-mst\"\nimport KruskalMST from \"../../algorithms/graph/kruskal-mst\"\nimport CheckConnected from \"../../algorithms/graph/check-connected\"\nimport CheckBipartite from \"../../algorithms/graph/check-bipartite\"\nimport FindRadius from \"../../algorithms/graph/radius\"\nimport FindDiameter from \"../../algorithms/graph/diameter\"\nimport TopologicalSort from \"../../algorithms/graph/topological-sort\"\nimport FindBridges from \"../../algorithms/graph/find-bridges\"\nimport FindArticulationPoints from \"../../algorithms/graph/find-articulation-points\"\nimport SCCKosaraju from \"../../algorithms/graph/scc-kosaraju\"\nimport EulerPath from \"../../algorithms/graph/euler-path\"\nimport EulerCycle from \"../../algorithms/graph/euler-cycle\"\nimport { Vertex } from \"../Graph/Vertex/Vertex\";\nimport { Edge } from \"../Graph/Edge/Edge\";\nimport { startMatrixDialogForResult } from \"../../actions/matrixDialog\";\n\nconst cx = classnames.bind(styles);\n\nconst minAlgorithmSpeed = 0;\nconst maxAlgorithmSpeed = 1000;\n\nconst mapStateToProps = state => ({\n    graphMode: state.graphReducer.graphMode,\n    isOriented: state.graphReducer.graph.isOriented(),\n    isVisualizationActive: state.algorithmReducer.isActive,\n    visualizationSpeed: state.algorithmReducer.speed,\n    selectedAlgorithm: state.algorithmReducer.algorithm,\n    remainingAlgorithmSteps: state.algorithmReducer.trace.length,\n    graph: state.graphReducer.graph\n});\n\nclass MenuComponent extends React.Component {\n    state = {\n        algorithms: [\n            DFS,\n            BFS,\n            Dijkstra,\n            PrimMST,\n            KruskalMST,\n            CheckConnected,\n            CheckBipartite,\n            FindRadius,\n            FindDiameter,\n            TopologicalSort,\n            FindBridges,\n            FindArticulationPoints,\n            SCCKosaraju,\n            EulerPath,\n            EulerCycle\n        ],\n        algorithmPaused: false\n    };\n\n    componentDidMount() {\n        this.props.setAlgorithm(this.state.algorithms[0]);\n        this.props.setSpeed((minAlgorithmSpeed + maxAlgorithmSpeed) / 2);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (nextProps.graphMode !== this.props.graphMode)\n            return true;\n        if (nextProps.isOriented !== this.props.isOriented)\n            return true;\n        if (nextProps.isVisualizationActive !== this.props.isVisualizationActive)\n            return true;\n        if (nextProps.visualizationSpeed !== this.props.visualizationSpeed)\n            return true;\n        if (nextProps.selectedAlgorithm !== this.props.selectedAlgorithm)\n            return true;\n        if (nextProps.remainingAlgorithmSteps !== this.props.remainingAlgorithmSteps)\n            return true;\n        return false;\n    }\n\n    handleAlgorithmChange = e => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n\n        this.props.setAlgorithm(this.state.algorithms[e.target.value]);\n    };\n\n    startVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.clearTrace();\n            this.props.clearStatistics();\n            this.props.cleanGraphSelections();\n            this.props.preCall();\n        } else if (this.props.isVisualizationActive) {\n            this.props.pause();\n            this.setState({ algorithmPaused: true });\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue();\n        }\n    };\n\n    stepVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.clearTrace();\n            this.props.clearStatistics();\n            this.props.cleanGraphSelections();\n            this.props.preCall(true);\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue(true);\n        }\n    };\n\n    stopVisualization = () => {\n        this.clearVisualization();\n        this.props.closeMessage();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n    };\n\n    handleAlgorithmSpeedChange = e => {\n        this.props.setSpeed(maxAlgorithmSpeed - e.target.value);\n    };\n\n    askForAction = (message, graphMode) => {\n        this.clearVisualization();\n\n        this.props.showMessage(message);\n        this.props.changeGraphMode(graphMode);\n    };\n\n    closeMessage = () => {\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n    };\n\n    invertOrientation = () => {\n        this.clearVisualization();\n\n        this.props.invertOrientation();\n    };\n\n    clearVisualization = () => {\n        this.props.pause();\n        this.setState({ algorithmPaused: false });\n        this.props.cleanGraphSelections();\n        this.props.clearTrace();\n        this.props.clearStatistics();\n    };\n\n    writeToFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        const json = JSON.stringify({\n            vertices: this.props.graph.vertices.map(v => ({\n                x: v.x,\n                y: v.y,\n                name: v.name\n            })),\n            edges: this.props.graph.edges.map(e => ({\n                from: e.from.name,\n                to: e.to.name,\n                weight: e.weight\n            })),\n            oriented: this.props.isOriented\n        });\n\n        const exportData = \"data:text/json;charset=utf-8,\" + escape(json);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"graph.json\");\n        anchorElement.click();\n    };\n\n    askReadFromFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        document.getElementById(\"fileLoad\").click();\n    };\n\n    readFromFile = (e) => {\n        const reader = new FileReader();\n        const file = e.target.files[0];\n\n        reader.onload = (e) => {\n            try {\n                const json = JSON.parse(e.target.result);\n\n                const oriented = json.oriented;\n                const vertices = json.vertices.map(v => new Vertex(v.x, v.y, vertexRadius, v.name));\n                const edges = json.edges.map(e =>\n                    new Edge(\n                        vertices.find(v => v.name === e.from),\n                        vertices.find(v => v.name === e.to),\n                        oriented,\n                        e.weight\n                    )\n                );\n\n                const graph = new Graph(oriented, vertices, edges);\n\n                if (oriented !== this.props.isOriented)\n                    this.invertOrientation();\n                this.props.setGraph(graph);\n                this.props.resetCanvasPosition();\n            } catch (e) {\n                this.props.showMessage(\"Некорректный формат файла\");\n            }\n        };\n\n        reader.readAsText(file);\n        document.getElementById(\"fileLoad\").value = null;\n    };\n\n    showAdjacencyMatrix = () => {\n        this.props.startMatrixDialog();\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"} cancel={[\"button\", \"input\", \"select\"]}>\n                <div className={cx(\"menu\")}>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"graph-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Режим просмотра\"}\n                                onClick={() => this.closeMessage()}\n                                activated={this.props.graphMode === GraphMode.DEFAULT}/>\n                            <ButtonComponent\n                                text={\"Добавить вершину\"}\n                                onClick={() => this.askForAction(\"Выберите точку для добавления вершины\", GraphMode.ADD_VERTEX)}\n                                activated={this.props.graphMode === GraphMode.ADD_VERTEX}/>\n                            <ButtonComponent\n                                text={\"Добавить ребро\"}\n                                onClick={() => this.askForAction(\"Выберите вершины, которые нужно соединить ребром\", GraphMode.ADD_EDGE)}\n                                activated={this.props.graphMode === GraphMode.ADD_EDGE}/>\n                            <ButtonComponent\n                                text={\"Удалить вершину/ребро\"}\n                                onClick={() => this.askForAction(\"Выберите объект для удаления\", GraphMode.REMOVE_VERTEX_OR_EDGE)}\n                                activated={this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE}/>\n                        </div>\n                        <RoundedToggleSwitch\n                            className={cx(\"switch\")}\n                            text={\"Ориентированный?\"}\n                            onChange={() => this.invertOrientation()}\n                            isChecked={this.props.isOriented}/>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"algorithms-list\")}>\n                            <DropDownList\n                                items={this.state.algorithms.map(a => a.name)}\n                                onChange={this.handleAlgorithmChange}/>\n                        </div>\n                        <div className={cx(\"slider\")}>\n                            <SliderComponent\n                                label={\"Скорость анимации\"}\n                                value={maxAlgorithmSpeed - this.props.visualizationSpeed}\n                                min={minAlgorithmSpeed}\n                                max={maxAlgorithmSpeed}\n                                onChange={this.handleAlgorithmSpeedChange}/>\n                        </div>\n                        <div className={cx(\"visualization-control-buttons\")}>\n                            <ButtonComponent\n                                text={this.state.algorithmPaused ? \"Далее\" : (this.props.isVisualizationActive ? \"Пауза\" : \"Старт\")}\n                                onClick={this.startVisualization}/>\n                            <ButtonComponent text={\"Шаг\"} onClick={this.stepVisualization}/>\n                            <ButtonComponent text={\"Стоп\"} onClick={this.stopVisualization}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"file-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Сохранить\"}\n                                onClick={() => this.writeToFile()}\n                                activated={false}/>\n                            <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save graph</a>\n\n                            <ButtonComponent\n                                text={\"Загрузить\"}\n                                onClick={() => this.askReadFromFile()}\n                                activated={false}/>\n                            <input id=\"fileLoad\" type=\"file\" accept=\".json\" style={{\"display\": \"none\"}} onChange={(e) => this.readFromFile(e)}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"matrix-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Матрица смежности\"}\n                                onClick={() => this.showAdjacencyMatrix()}\n                                activated={false}/>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeGraphMode: (graphMode) => dispatch(changeGraphMode(graphMode)),\n    showMessage: (message) => dispatch(showMessage(message)),\n    closeMessage: () => dispatch(closeMessage()),\n    invertOrientation: () => dispatch(invertOrientation()),\n    setAlgorithm: (algorithm) => dispatch(setAlgorithm(algorithm)),\n    setSpeed: (speed) => dispatch(setSpeed(speed)),\n    preCall: (isOneStep) => dispatch(preCall(isOneStep)),\n    call: () => dispatch(call()),\n    pause: () => dispatch(pause()),\n    continue: (isOneStep) => dispatch(continueCall(isOneStep)),\n    cleanGraphSelections: () => dispatch(cleanGraphSelections()),\n    clearTrace: () => dispatch(clearTrace()),\n    clearStatistics: () => dispatch(clearStatistics()),\n    setGraph: (graph) => dispatch(setGraph(graph)),\n    startMatrixDialog: () => dispatch(startMatrixDialogForResult()),\n    resetCanvasPosition: () => dispatch(moveCanvas(0, 0))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MessageBox.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message,\n    isAlert: state.graphReducer.isAlert\n});\n\nconst MessageBox = ({ message, isAlert }) => {\n    return (\n        <div className={cx(\"message-box\", {[`invisible`]: message === undefined}, {[`alert`]: isAlert})}>\n            {message}\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(MessageBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./TextInputs.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const TextInputComponent = ({ value, placeholder, onChange, pattern, className, autoFocus = false }) => {\n    return (\n        <input\n            className={cx(\"text-input\", className)}\n            type=\"text\"\n            pattern={pattern}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}\n            autoFocus={autoFocus}/>\n    );\n};","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InputDialog.module.scss\";\nimport { cancelDialog, submitDialog } from \"../../../actions/dialog\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { TextInputComponent } from \"../../TextInputs/TextInputs\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.dialogReducer.isOpen,\n    title: state.dialogReducer.title,\n    text: state.dialogReducer.text,\n    hint: state.dialogReducer.hint,\n    inputPlaceholder: state.dialogReducer.inputPlaceholder,\n    pattern: state.dialogReducer.pattern,\n    onSubmit: state.dialogReducer.onSubmit,\n    onCancel: state.dialogReducer.onCancel\n});\n\nclass InputDialog extends React.Component {\n    state = {\n        value: \"\"\n    };\n\n    handleChange = (e) => {\n        if (e.target.validity.valid)\n            this.setState({ value: e.target.value });\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n        this.setState({ value: \"\" });\n        this.props.submitDialog(this.props.onSubmit, this.state.value);\n    };\n\n    cancel = () => {\n        this.setState({ value: \"\" });\n        this.props.cancelDialog(this.props.onCancel);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => {\n                    this.setState({ value: \"\" });\n                    this.props.cancelDialog(this.props.onCancel);\n                }}\n                ariaHideApp={false}\n                className={cx(\"input-dialog\")}\n                style={customStyles}>\n\n                <h2>{this.props.title}</h2>\n                <div>{this.props.text}</div>\n                <form onSubmit={(e) => this.submit(e)}>\n                    <TextInputComponent\n                        autoFocus={true}\n                        className={cx(\"text-input\")}\n                        placeholder={this.props.inputPlaceholder}\n                        pattern={this.props.pattern}\n                        onChange={this.handleChange}\n                        value={this.state.value}/>\n\n                    <ButtonComponent\n                        type={\"submit\"}\n                        className={cx(\"button\")}\n                        text={\"Ок\"}\n                        onClick={(e) => this.submit(e)}/>\n                    <ButtonComponent\n                        className={cx(\"button\")}\n                        text={\"Отмена\"}\n                        onClick={() => this.cancel()}/>\n                </form>\n\n                <div className={cx(\"hint\")}>{this.props.hint}</div>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputDialog);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InfoBox.module.scss\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    lines: state.algorithmReducer.statistics,\n    isVisible: state.algorithmReducer.isStatisticsShown\n});\n\nconst InfoBox = ({ lines, isVisible }) => {\n    return (\n        <div className={cx(\"info-box\", {[`invisible`]: !(isVisible && Array.isArray(lines) && lines.length)})}>\n            {lines.map((line, index) => <div className={cx(\"text\")} key={index}>{line}</div>)}\n        </div>\n    );\n};\n\nInfoBox.propTypes = {\n    lines: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.symbol,\n        PropTypes.bool\n    ])),\n    isVisible: PropTypes.bool\n};\n\nexport default connect(mapStateToProps)(InfoBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./AdjacencyMatrix.module.scss\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\n\nconst cx = classnames.bind(styles);\n\nconst MatrixCell = ({ cell, topLeft, topRight, bottomLeft, bottomRight }) => {\n    return (\n        <div className={cx(\"matrix-cell\", {[`empty`]: !cell},\n            {[`non-weighted`]: cell && !cell.weighted},\n            {[`top-left-cell`]: topLeft},\n            {[`top-right-cell`]: topRight},\n            {[`bottom-left-cell`]: bottomLeft},\n            {[`bottom-right-cell`]: bottomRight})}>\n            {cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"}\n        </div>\n    );\n};\n\nconst MatrixRow = ({ row, first, last, vertexNumber }) => {\n    return (\n        <div className={cx(\"matrix-row\")}>\n            <div className={cx(\"label-cell\")}>{vertexNumber}</div>\n            {row.map((cell, index) =>\n                <MatrixCell\n                    key={index}\n                    cell={cell}\n                    topLeft={(index === 0) && first}\n                    topRight={(index + 1 === row.length) && first}\n                    bottomLeft={(index === 0) && last}\n                    bottomRight={(index + 1 === row.length) && last}/>)\n            }\n        </div>\n    );\n};\n\nconst AdjacencyMatrix = ({ graph }) => {\n    const {adjacencyMatrix, verticesNumbers} = edgesListToAdjacencyMatrix(graph.vertices, graph.edges);\n    return (\n        <div className={cx(\"matrix\")}>\n            <div className={cx(\"label-cell\")}>{\" \"}</div>\n            {verticesNumbers.map(v => <div key={v} className={cx(\"label-cell\")}>{v}</div>)}\n            {adjacencyMatrix.map((row, index) =>\n                <MatrixRow\n                    key={index}\n                    row={row}\n                    first={index === 0}\n                    last={index + 1 === graph.vertices.length}\n                    vertexNumber={verticesNumbers[index]}/>)\n            }\n        </div>\n    );\n};\n\nexport default AdjacencyMatrix;","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MatrixDialog.module.scss\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\nimport { cancelMatrixDialog, submitMatrixDialog } from \"../../../actions/matrixDialog\";\nimport AdjacencyMatrix from \"./AdjacencyMatrix\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.matrixDialogReducer.isOpen,\n    graph: state.graphReducer.graph\n});\n\nclass MatrixDialog extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (!this.props.isOpen && !nextProps.isOpen)\n            return false;\n        return true;\n    }\n\n    writeToFile = () => {\n        let {adjacencyMatrix} = edgesListToAdjacencyMatrix(this.props.graph.vertices, this.props.graph.edges);\n\n        adjacencyMatrix = adjacencyMatrix.map(row => row.map(cell => cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"));\n        adjacencyMatrix = adjacencyMatrix.reduce((prev, arr) => prev + arr.reduce((line, cell) => line + cell + \" \", \"\") + \"\\n\", \"\");\n\n        const exportData = \"data:text/plain;charset=utf-8,\" + escape(adjacencyMatrix);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"adjacencyMatrix.txt\");\n        anchorElement.click();\n    };\n\n    cancel = () => {\n        this.props.cancelDialog(null);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => this.cancel()}\n                ariaHideApp={false}\n                className={cx(\"matrix-dialog\")}\n                style={customStyles}>\n\n                <AdjacencyMatrix graph={this.props.graph}/>\n\n                <ButtonComponent\n                    type={\"submit\"}\n                    className={cx(\"button\")}\n                    text={\"Сохранить в файл\"}\n                    onClick={() => this.writeToFile()}/>\n                <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save matrix</a>\n\n                <ButtonComponent\n                    className={cx(\"button\")}\n                    text={\"Закрыть\"}\n                    onClick={() => this.cancel()}/>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitMatrixDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelMatrixDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatrixDialog);","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./App.module.scss\";\nimport PlainGraph from \"./PlainGraph/PlainGraph\";\nimport GraphComponent from \"./Graph/Graph\";\nimport MenuComponent from \"./Menu/Menu\";\nimport MessageBox from \"./MessageBox/MessageBox\";\nimport InputDialog from \"./Dialogs/InputDialog/InputDialog\";\nimport InfoBox from \"./InfoBox/InfoBox\";\nimport MatrixDialog from \"./Dialogs/MatrixDialog/MatrixDialog\";\n\nconst cx = classnames.bind(styles);\n\nconst App = () => (\n    <div className={cx(\"app\")}>\n        <MenuComponent/>\n        <GraphComponent/>\n        <MessageBox/>\n        <InfoBox/>\n        <InputDialog/>\n        <MatrixDialog/>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionType } from \"../actions/dialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false,\n    title: \"\",\n    text: \"\",\n    hint: \"\",\n    inputPlaceholder: \"\",\n    onSubmit: null,\n    onClose: null,\n    pattern: \".*\"\n};\n\nconst dialog = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.START_DIALOG_FOR_RESULT:\n            newState = {\n                ...state,\n                isOpen: true,\n                title: action.title,\n                text: action.text,\n                hint: action.hint,\n                inputPlaceholder: action.inputPlaceholder,\n                pattern: action.pattern\n            };\n\n            newState.onSubmit = (value) => {\n                const onSubmit = action.onSubmit;\n                if (onSubmit)\n                    onSubmit(value);\n            };\n            newState.onCancel = () => {\n                const onCancel = action.onCancel;\n                if (onCancel)\n                    onCancel();\n            };\n\n            return newState;\n        case ActionType.CLOSE_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default dialog;","import { ActionType } from \"../actions/algorithm\";\nimport React from \"react\";\nimport { PreCallAction } from \"../algorithms/graph/index\";\n\nconst defaultState = {\n    trace: [],\n    isActive: false,\n    algorithm: null,\n    speed: 1000,\n    isOneStep: false,\n    statistics: [],\n    isStatisticsShown: false\n};\n\nconst algorithm = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.CALL:\n            newState = {\n                ...state\n            };\n\n            const preCall = state.algorithm.preCall;\n            const vertices = action.graph.vertices;\n            const edges = action.graph.edges;\n            let result;\n            if (preCall === PreCallAction.SELECT_VERTEX) {\n                result = state.algorithm.call(vertices, edges, action.vertex);\n            } else if (preCall === PreCallAction.SELECT_EDGE) {\n                result = state.algorithm.call(vertices, edges, action.edge);\n            } else if (preCall === PreCallAction.NOTHING) {\n                result = state.algorithm.call(vertices, edges);\n            }\n            newState.trace = result.trace;\n            newState.statistics = result.statistics;\n\n            return newState;\n        case ActionType.POP_TRACE_STEP:\n            newState = {\n                ...state,\n                trace: [...state.trace]\n            };\n\n            newState.trace.shift();\n\n            return newState;\n        case ActionType.START:\n            return {\n                ...state,\n                isActive: true\n            };\n        case ActionType.PAUSE:\n            return {\n                ...state,\n                isActive: false\n            };\n        case ActionType.SET_ALGORITHM:\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        case ActionType.SET_SPEED:\n            return {\n                ...state,\n                speed: action.speed\n            };\n        case ActionType.SET_IS_ONE_STEP:\n            return {\n                ...state,\n                isOneStep: action.isOneStep\n            };\n        case ActionType.CLEAR_TRACE:\n            return {\n                ...state,\n                trace: []\n            };\n        case ActionType.SHOW_STATISTICS:\n            return {\n                ...state,\n                isStatisticsShown: true\n            };\n        case ActionType.CLEAR_STATISTICS:\n            return {\n                ...state,\n                statistics: [],\n                isStatisticsShown: false\n            };\n        default:\n            return state;\n    }\n};\n\nexport default algorithm;","import { ActionType } from \"../actions/matrixDialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false\n};\n\nconst matrixDialog = (state = defaultState, action) => {\n    switch (action.type) {\n        case ActionType.START_MATRIX_DIALOG_FOR_RESULT:\n            return {\n                ...state,\n                isOpen: true\n            };\n        case ActionType.CLOSE_MATRIX_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default matrixDialog;","import { Graph, GraphMode } from \"../components/Graph/Graph\";\nimport { ActionType } from \"../actions\";\nimport { VertexHintState, VertexState } from \"../components/Graph/Vertex/Vertex\";\nimport { combineReducers } from \"redux\";\nimport dialog from \"./dialog\";\nimport algorithm from \"./algorithm\";\nimport matrixDialog from \"./matrixDialog\";\nimport { AlgorithmActionType, EdgeAction, VertexAction, VertexHintAction } from \"../algorithms/graph\";\nimport { EdgeState } from \"../components/Graph/Edge/Edge\";\n\nconst defaultState = {\n    graph: new Graph(false),\n    message: undefined,\n    isAlert: false,\n    graphMode: GraphMode.DEFAULT,\n    selectedVertex: undefined, // For 'ADD_EDGE' // TODO: Do 'ADD_EDGE' in a cleaner way\n    canvasX: 0,\n    canvasY: 0\n};\n\nconst clone = object => {\n    return Object.assign( Object.create( Object.getPrototypeOf(object)), object);\n};\n\nconst unselectSelectedVertex = (state) => {\n    if (state.selectedVertex !== undefined) {\n        const i = state.graph.vertices.findIndex(v => v === state.selectedVertex);\n        if (i !== -1)\n            state.graph.vertices[i].state = VertexState.DEFAULT;\n        state.selectedVertex = undefined;\n    }\n};\n\nconst updateVertexByAction = (vertex, action) => {\n    switch (action) {\n        case VertexAction.SELECT:\n            vertex.state = VertexState.HIGHLIGHTED;\n            break;\n        case VertexAction.ENTER:\n            vertex.state = VertexState.PRE_COMPLETED;\n            break;\n        case VertexAction.EXIT:\n            vertex.state = VertexState.COMPLETED;\n            break;\n        case VertexAction.UNSELECT:\n            vertex.state = VertexState.DEFAULT;\n            break;\n        case VertexAction.COLOR_1:\n            vertex.state = VertexState.COLOR_1;\n            break;\n        case VertexAction.COLOR_2:\n            vertex.state = VertexState.COLOR_2;\n            break;\n        default:\n    }\n};\n\nconst updateEdgeByAction = (edge, action) => {\n    switch (action) {\n        case EdgeAction.WALK:\n            edge.state = EdgeState.WALKED;\n            break;\n        case EdgeAction.HIGHLIGHT:\n            edge.state = EdgeState.HIGHLIGHTED;\n            break;\n        case EdgeAction.SHADOW:\n            edge.state = EdgeState.SHADOWED;\n            break;\n        default:\n    }\n};\n\nconst updateVertexHintByAction = (vertex, action) => {\n    switch (action) {\n        case VertexHintAction.REMOVE:\n            vertex.hintState = VertexHintState.CLEAR;\n            break;\n        case VertexHintAction.SET:\n            vertex.hintState = VertexHintState.DEFAULT;\n            break;\n        case VertexHintAction.HIGHLIGHT:\n            vertex.hintState = VertexHintState.HIGHLIGHTED;\n            break;\n        default:\n    }\n};\n\nconst cleanGraphSelections = (state) => {\n    state.graph.vertices.forEach(v => {\n        v.state = VertexState.DEFAULT;\n        v.hintState = VertexHintState.CLEAR;\n        v.hint = \"\";\n    });\n    state.graph.edges.forEach(e => e.state = EdgeState.DEFAULT);\n    state.graph.visualizationEdges = [];\n    state.selectedVertex = undefined;\n};\n\nconst reducer = (state = defaultState, action) => {\n    let newState;\n    let i;\n    switch (action.type) {\n        case ActionType.ADD_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addVertex(action.x, action.y, action.radius);\n\n            return newState;\n        case ActionType.ADD_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addEdge(action.vertexFrom, action.vertexTo, action.weight);\n\n            return newState;\n        case ActionType.REMOVE_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeVertex(action.vertex);\n\n            return newState;\n        case ActionType.REMOVE_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeEdge(action.edge);\n\n            return newState;\n        case ActionType.UPDATE_VERTEX_POSITION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.vertices[action.vertexIndex].x = action.x;\n            newState.graph.vertices[action.vertexIndex].y = action.y;\n\n            return newState;\n        case ActionType.CHANGE_GRAPH_MODE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            if (action.graphMode !== newState.graphMode) {\n                newState.graphMode = action.graphMode;\n\n                unselectSelectedVertex(newState);\n            }\n\n            return newState;\n        case ActionType.SELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            i = newState.graph.vertices.findIndex(v => v === action.vertex);\n            if (i !== -1) {\n                newState.graph.vertices[i].state = VertexState.HIGHLIGHTED;\n                newState.selectedVertex = action.vertex;\n            }\n\n            return newState;\n        case ActionType.UNSELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            return newState;\n        case ActionType.SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message,\n                isAlert: action.isAlert\n            };\n        case ActionType.CLOSE_MESSAGE:\n            return {\n                ...state,\n                message: undefined,\n                isAlert: false\n            };\n        case ActionType.INVERT_ORIENTATION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.invertOrientation();\n\n            return newState;\n        case ActionType.ALGORITHM_STEP:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            const step = action.step;\n            if (step.actionType === AlgorithmActionType.VERTEX_ACTION) {\n                if (step.action === VertexAction.CLEAR_ALL_SELECTIONS) {\n                    newState.graph.vertices.forEach(v => v.state = VertexState.DEFAULT);\n                } else {\n                    const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                    if (vertex)\n                        updateVertexByAction(vertex, step.action);\n                }\n            } else if (step.actionType === AlgorithmActionType.EDGE_ACTION) {\n                if (step.action === EdgeAction.CLEAR_ALL_SELECTIONS) {\n                    newState.graph.visualizationEdges = [];\n                } else if (step.action === EdgeAction.FLIP) {\n                    const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                    const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                    const edge = newState.graph.findEdge(vertexFrom, vertexTo);\n                    if (edge !== -1) {\n                        if (newState.graph.edges[edge].state === EdgeState.FLIPPED)\n                            newState.graph.edges[edge].state = EdgeState.DEFAULT;\n                        else\n                            newState.graph.edges[edge].state = EdgeState.FLIPPED;\n                    }\n                } else {\n                    const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                    const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                    if (step.action === EdgeAction.UNSELECT) {\n                        newState.graph.removeVisualizationEdgeByVertices(vertexFrom, vertexTo, step.oriented);\n                    } else {\n                        const edge = newState.graph.addVisualizationEdge(vertexFrom, vertexTo, step.oriented, step.weight);\n                        updateEdgeByAction(edge, step.action);\n                    }\n                }\n            } else if (step.actionType === AlgorithmActionType.VERTEX_HINT_ACTION) {\n                const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                if (vertex) {\n                    if (step.action === VertexHintAction.REMOVE)\n                        vertex.hint = \"\";\n                    else\n                        vertex.hint = step.hint;\n                    updateVertexHintByAction(vertex, step.action);\n                }\n            }\n\n            return newState;\n        case ActionType.CLEAN_GRAPH_SELECTIONS:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            cleanGraphSelections(newState);\n\n            return newState;\n        case ActionType.SET_GRAPH:\n            return {\n                ...state,\n                graph: action.graph\n            };\n        case ActionType.MOVE_CANVAS:\n            return {\n                ...state,\n                canvasX: action.x,\n                canvasY: action.y\n            };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    graphReducer: reducer,\n    dialogReducer: dialog,\n    algorithmReducer: algorithm,\n    matrixDialogReducer: matrixDialog\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2at_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plain_graph\":\"PlainGraph_plain_graph__132cd\",\"drawing_area\":\"PlainGraph_drawing_area__poiJd\",\"cell\":\"PlainGraph_cell__2tDfs\",\"cell-blocked\":\"PlainGraph_cell-blocked__13I9p\",\"cell-path\":\"PlainGraph_cell-path__1JSUa\",\"cell-start\":\"PlainGraph_cell-start__2FTb6\",\"cell-finish\":\"PlainGraph_cell-finish__2icJo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2xbQm\",\"menu-sub\":\"Menu_menu-sub__2jhA1\",\"graph-control-buttons\":\"Menu_graph-control-buttons__2CY62\",\"switch\":\"Menu_switch__3Y97k\",\"visualization-control-buttons\":\"Menu_visualization-control-buttons__1OTXW\",\"file-control-buttons\":\"Menu_file-control-buttons__3PmTU\",\"algorithms-list\":\"Menu_algorithms-list__2mwx1\",\"slider\":\"Menu_slider__RA1Ez\",\"matrix-control-buttons\":\"Menu_matrix-control-buttons__26fCf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__1L6GG\",\"activated\":\"Buttons_activated__EZOmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider-wrapper\":\"Sliders_slider-wrapper__GIw-8\",\"slider-label\":\"Sliders_slider-label__1w08l\",\"slider\":\"Sliders_slider__1gqJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drop-down-list\":\"DropDownLists_drop-down-list__ix94o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch-round-wrapper\":\"ToggleSwitches_switch-round-wrapper__g2bxh\",\"switch-round\":\"ToggleSwitches_switch-round__1bQ1T\",\"slider\":\"ToggleSwitches_slider__Q-bUA\",\"text\":\"ToggleSwitches_text__1sKta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message-box\":\"MessageBox_message-box__2uEgD\",\"invisible\":\"MessageBox_invisible__10Wwp\",\"alert\":\"MessageBox_alert__14QTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-dialog\":\"InputDialog_input-dialog__2SLyF\",\"text-input\":\"InputDialog_text-input__2zjdU\",\"button\":\"InputDialog_button__1ZFHJ\",\"hint\":\"InputDialog_hint__1ftkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"TextInputs_text-input__3mPdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info-box\":\"InfoBox_info-box__3t_A2\",\"text\":\"InfoBox_text__sgPCj\",\"invisible\":\"InfoBox_invisible__1un1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix-dialog\":\"MatrixDialog_matrix-dialog__2YGd3\",\"button\":\"MatrixDialog_button__3KxWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"AdjacencyMatrix_matrix__3b96v\",\"matrix-row\":\"AdjacencyMatrix_matrix-row__3vHpl\",\"top-left-cell\":\"AdjacencyMatrix_top-left-cell__1-lFt\",\"top-right-cell\":\"AdjacencyMatrix_top-right-cell__1RYRb\",\"bottom-left-cell\":\"AdjacencyMatrix_bottom-left-cell__23nQC\",\"bottom-right-cell\":\"AdjacencyMatrix_bottom-right-cell__2r29f\",\"matrix-cell\":\"AdjacencyMatrix_matrix-cell__2Z91s\",\"label-cell\":\"AdjacencyMatrix_label-cell__3YJYr\",\"empty\":\"AdjacencyMatrix_empty__3-1PZ\"};"],"sourceRoot":""}