{"version":3,"sources":["algorithms/plain/breadth-first-search.js","components/PlainGraph/PlainGraph.jsx","components/Graph/Vertex/Vertex.jsx","components/Graph/Edge/Edge.jsx","utils/sleep.js","actions/index.js","actions/dialog.js","algorithms/graph/index.js","actions/algorithm.js","components/Graph/VisualizationEdge/VisualizationEdge.jsx","components/Graph/Graph.jsx","components/Buttons/Buttons.jsx","components/Sliders/Sliders.jsx","components/DropDownLists/DropDownLists.jsx","components/ToggleSwitches/ToggleSwitches.jsx","utils/graphConverter.js","algorithms/graph/dfs.js","utils/queue.js","algorithms/graph/bfs.js","components/Menu/Menu.jsx","components/MessageBox/MessageBox.jsx","components/TextInputs/TextInputs.jsx","components/Dialogs/InputDialog/InputDialog.jsx","components/InfoBox/InfoBox.jsx","components/App.jsx","serviceWorker.js","reducers/dialog.js","reducers/algorithm.js","reducers/index.js","index.js","components/App.module.scss","components/PlainGraph/PlainGraph.module.scss","components/Menu/Menu.module.scss","components/Buttons/Buttons.module.scss","components/Sliders/Sliders.module.scss","components/DropDownLists/DropDownLists.module.scss","components/ToggleSwitches/ToggleSwitches.module.scss","components/MessageBox/MessageBox.module.scss","components/Dialogs/InputDialog/InputDialog.module.scss","components/TextInputs/TextInputs.module.scss","components/InfoBox/InfoBox.module.scss"],"names":["algorithm","cells","cellStart","cellFinish","pathStatus","queue","x","y","parent","current","shift","console","log","next","node","minX","minY","maxX","maxY","res","push","neighbours","length","i","findIndex","n","cx","classnames","bind","styles","CellState","Object","freeze","EMPTY","BLOCKED","START","FINISH","PATH","Cell","status","onMouseEnter","onMouseLeave","className","React","Component","Vertex","radius","name","this","state","VertexState","DEFAULT","HIGHLIGHTED","PRE_COMPLETED","COMPLETED","VertexComponent","vertex","draggable","onDragStart","onDragEnd","onDragMove","onClick","e","call","target","getChildren","setAttrs","scaleX","scaleY","shadowColor","shadowBlur","shadowOffset","shadowOpacity","moveToTop","handleDragStart","to","duration","shadowOffsetX","shadowOffsetY","handleDragEnd","fill","color","stroke","strokeWidth","vertexBorderWidth","text","fontSize","textColor","width","height","align","verticalAlign","Edge","vertexFrom","vertexTo","oriented","weight","_from","_to","EdgeState","_oriented","undefined","WALKED","ERASED","EdgeComponent","edgeComponent","edge","edgeType","points","getEdgePointsForType","EdgeType","NOT_ORIENTED","linePoints","hitStrokeWidth","tension","isWeighted","labelPoints","EdgeLabel","labelRadius","labelBorderWidth","ONE_SIDE_ORIENTED","TWO_SIDE_ORIENTED","LOOP","from","dx","dy","angle","Math","atan2","vertexFromOffset","vertexToOffset","xFrom","cos","yFrom","sin","xTo","yTo","xMiddle","yMiddle","anchorDx","sqrt","anchorDy","xMiddleFirst","sleep","ms","Promise","resolve","setTimeout","ActionType","ADD_VERTEX","ADD_EDGE","REMOVE_VERTEX","REMOVE_EDGE","CHANGE_GRAPH_MODE","SELECT_VERTEX","UNSELECT_VERTEX","SHOW_MESSAGE","CLOSE_MESSAGE","UPDATE_VERTEX_POSITION","INVERT_ORIENTATION","ALGORITHM_STEP","CLEAN_GRAPH_SELECTIONS","SET_GRAPH","changeGraphMode","graphMode","type","currentMessageId","showMessage","message","dispatch","a","messageId","showMessageConnector","closeMessage","algorithmStep","step","START_DIALOG_FOR_RESULT","CLOSE_DIALOG","closeDialog","VertexAction","SELECT","UNSELECT","ENTER","EXIT","EdgeAction","WALK","HIGHLIGHT","AlgorithmActionType","VERTEX_ACTION","EDGE_ACTION","PreCallAction","NOTHING","SELECT_EDGE","PRE_CALL","CALL","PAUSE","POP_TRACE_STEP","SET_ALGORITHM","SET_SPEED","SET_IS_ONE_STEP","CLEAR_TRACE","CLEAR_STATISTICS","setIsOneStep","isOneStep","getState","GraphMode","graph","graphReducer","callConnector","algorithmReducer","pause","start","callSuccess","currentVisualizationId","trace","popTraceStep","visualizationId","isActive","speed","VisualizationEdgeComponent","REMOVE_VERTEX_OR_EDGE","ALGORITHM_PRE_CALL_SELECT_VERTEX","ALGORITHM_PRE_CALL_SELECT_EDGE","Graph","vertices","edges","Array","isArray","Error","j","v","_vertices","_edges","_visualizationEdges","_currentName","max","map","index","splice","filter","findEdge","forEach","invertOrientation","newEdges","findVisualizationEdge","GraphComponent","draggedVertex","windowWidth","windowHeight","findIndexOfVertex","props","handleVertexDragStart","setState","updateDraggedVertex","updateVertexPosition","handleVertexDragMove","handleVertexDragEnd","getEdgeType","isOriented","handleCanvasClick","evt","clientX","clientY","addVertex","selectedVertex","unselectVertex","handleVertexClick","cancelBubble","removeVertex","selectVertex","startDialogForResult","value","addEdge","callAlgorithm","handleEdgeClick","removeEdge","handleResize","window","innerWidth","innerHeight","onresize","key","visualizationEdges","connect","vertexIndex","title","hint","inputPlaceholder","onSubmit","onClose","pattern","onCancel","ButtonComponent","activated","SliderComponent","label","min","onChange","DropDownList","items","item","RoundedToggleSwitch","isChecked","checked","edgesListToAdjacencyList","adjacencyList","entries","verticesList","sort","b","edgesListToAdjacencyMatrix","verticesNumbers","nameToIndex","number","cell","adjacencyMatrix","weighted","used","preCall","startTime","performance","now","dfs","action","actionType","endTime","statistics","toFixed","Queue","_queue","isEmpty","pop","bfs","MenuComponent","algorithms","DFS","BFS","algorithmPaused","handleAlgorithmChange","clearVisualization","setAlgorithm","startVisualization","remainingAlgorithmSteps","cleanGraphSelections","isVisualizationActive","continue","stepVisualization","stopVisualization","handleAlgorithmSpeedChange","setSpeed","askForAction","clearTrace","clearStatistics","writeToFile","json","JSON","stringify","exportData","escape","anchorElement","document","getElementById","setAttribute","click","askReadFromFile","readFromFile","reader","FileReader","file","files","onload","parse","result","find","setGraph","readAsText","showAdjacencyMatrix","nextProps","nextState","nextContext","visualizationSpeed","selectedAlgorithm","grid","bounds","cancel","id","style","aria-hidden","href","accept","continueCall","TextInputComponent","placeholder","autoFocus","customStyles","overlay","zIndex","InputDialog","handleChange","validity","valid","submit","preventDefault","submitDialog","cancelDialog","isOpen","onRequestClose","ariaHideApp","dialogReducer","lines","line","App","Menu","Boolean","location","hostname","match","defaultState","dialog","newState","clone","object","assign","create","getPrototypeOf","unselectSelectedVertex","updateVertexByAction","updateEdgeByAction","combineReducers","addVisualizationEdge","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.05f4ef83.chunk.js","sourcesContent":["export const algorithm = {\n    name: \"Breadth First Search\",\n    run: function (cells, cellStart, cellFinish, pathStatus) {\n        let node = { x: cellStart.x, y: cellStart.y, parent: null };\n\n        const queue = [node];\n        while (queue.length) {\n            let current = queue.shift();\n            if ((current.x !== cellStart.x) || (current.y !== cellStart.y))\n                cells[current.y][current.x] = pathStatus;\n            if ((current.x === cellFinish.x) && (current.y === cellFinish.y)) {\n                // const path = backtrace(current);\n                // TODO: something\n                return;\n            }\n            console.log(current);\n            const next = neighbours(current, 0, 0, cells[0].length - 1, cells.length - 1);\n            for (let i = 0; i < next.length; ++i)\n                if ((cells[next[i].y][next[i].x] !== pathStatus) && !((next[i].x === cellStart.x) && (next[i].y === cellStart.y)) && (queue.findIndex(n => (n.x === next[i].x) && (n.y === next[i].y)) === -1))\n                    queue.push(next[i]);\n        }\n    }\n};\n\nfunction backtrace(node) {\n    const path = [{x: node.x, y: node.y}];\n    while (node.parent !== null) {\n        node = node.parent;\n        path.push({x: node.x, y: node.y});\n    }\n    return path;\n}\n\nfunction neighbours(node, minX, minY, maxX, maxY) {\n    const res = [];\n    if (node.x < maxX)\n        res.push({ x: node.x + 1, y: node.y, parent: node });\n    if (node.x > minX)\n        res.push({ x: node.x - 1, y: node.y, parent: node });\n    if (node.y < maxY)\n        res.push({ x: node.x, y: node.y + 1, parent: node });\n    if (node.y > minY)\n        res.push({ x: node.x, y: node.y - 1, parent: node });\n    return res;\n}","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./PlainGraph.module.scss\";\nimport { algorithm } from \"../../algorithms/plain/breadth-first-search\";\n\nconst cx = classnames.bind(styles);\n\nconst CellState = Object.freeze({ EMPTY: 0, BLOCKED: 1, START: 2, FINISH: 3, PATH: 4});\n\nconst Cell = ({x, y, status, onMouseEnter, onMouseLeave}) => (\n    <rect x={x} y={y} className={cx(\"cell\", {\n            [`cell-blocked`]: status === CellState.BLOCKED,\n            [`cell-path`]: status === CellState.PATH,\n            [`cell-start`]: status === CellState.START,\n            [`cell-finish`]: status === CellState.FINISH\n          })}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}/>\n);\n\nclass PlainGraph extends React.Component {\n    state = {\n        cells: [],\n        cellSize: 40,\n        rows: 1000 / 40 + 10,\n        columns: 2000 / 40 + 10,\n        isMouseDown: false,\n        previousMouseRow: -1,\n        previousMouseColumn: -1,\n        mouseCellState: -1\n    };\n\n    componentDidMount() {\n        const cellSize = 40;\n        const rows = 1000 / cellSize + 10;\n        const columns = 2000 / cellSize + 10;\n        const cells = [];\n        // const rows = window.innerHeight / cellSize + 10, columns = window.innerWidth / cellSize + 10; // TODO: change on resize\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < columns; ++j) {\n                row.push(CellState.EMPTY);\n            }\n            cells.push(row);\n        }\n        cells[2][2] = CellState.START;\n        cells[2][40] = CellState.FINISH;\n        this.setState({ cells: cells, cellSize: cellSize, rows: rows, columns: columns});\n    }\n\n    invertCellUnderMouse = (event) => {\n        this.setState(oldState => {\n            const x = Math.floor(event.x / this.state.cellSize);\n            const y = Math.floor(event.y / this.state.cellSize);\n            if ((x === oldState.previousMouseColumn) && (y === oldState.previousMouseRow))\n                return oldState;\n            const state = {...oldState};\n\n            const currentCellState = state.cells[y][x];\n            if (currentCellState === state.mouseCellState) {\n                if ((currentCellState === CellState.EMPTY) || (currentCellState === CellState.PATH))\n                    state.cells[y][x] = CellState.BLOCKED;\n                else if (currentCellState === CellState.BLOCKED)\n                    state.cells[y][x] = CellState.EMPTY;\n            }\n            state.previousMouseRow = y;\n            state.previousMouseColumn = x;\n\n            return state;\n        });\n    };\n\n    handleMouseDown = (event) => {\n        algorithm.run(this.state.cells, {x:2,y:2},{x:40,y:2}, CellState.PATH);\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.setState({\n            isMouseDown: true,\n            mouseCellState: this.state.cells\n                [Math.floor(reducedEvent.y / this.state.cellSize)]\n                [Math.floor(reducedEvent.x / this.state.cellSize)]\n        });\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    handleMouseUp = (event) => {\n        this.invertCellUnderMouse({ x: event.clientX, y: event.clientY });\n        this.setState({ isMouseDown: false, previousMouseRow: -1, previousMouseColumn: -1 });\n    };\n\n    handleCellMouseEnter = (event) => {\n        if (!this.state.isMouseDown)\n            return;\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    render() {\n        return (\n            <div className={cx(\"plain_graph\")}>\n                <svg className={cx(\"drawing_area\")}\n                     onMouseDown={e => this.handleMouseDown(e)}\n                     onMouseUp={e => this.handleMouseUp(e)}>\n                    {this.state.cells.map((row, y) =>\n                        row.map((cell, x) =>\n                            <Cell\n                                x={x * this.state.cellSize}\n                                y={y * this.state.cellSize}\n                                status={cell}\n                                key={this.state.columns * y + x}\n                                onMouseEnter={e => this.handleCellMouseEnter(e)}/>\n                            )\n                        )\n                    }\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default PlainGraph;","import { Circle, Group, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Vertex {\n    constructor(x, y, radius, name) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.state = VertexState.DEFAULT;\n        this.name = name;\n    }\n\n    get color() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'white';\n            case VertexState.HIGHLIGHTED:\n                return 'yellow';\n            case VertexState.PRE_COMPLETED:\n                return '#CCCCCC';\n            case VertexState.COMPLETED:\n                return '#444444';\n            default:\n                return 'white';\n        }\n    }\n\n    get textColor() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'black';\n            case VertexState.HIGHLIGHTED:\n                return 'black';\n            case VertexState.PRE_COMPLETED:\n                return 'black';\n            case VertexState.COMPLETED:\n                return 'white';\n            default:\n                return 'black';\n        }\n    }\n}\n\nconst handleDragStart = (e, call) => {\n    e.target.getChildren()[0].setAttrs({\n        scaleX: 1.1,\n        scaleY: 1.1,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: { x: 10, y: 10 },\n        shadowOpacity: 0.5\n    });\n    e.target.moveToTop();\n\n    call(e);\n};\n\nconst handleDragEnd = (e, call) => {\n    e.target.getChildren()[0].to({\n        duration: 0.25,\n        scaleX: 1,\n        scaleY: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0\n    });\n\n    call(e);\n};\n\nexport const VertexComponent = ({ vertex, draggable, onDragStart, onDragEnd, onDragMove, onClick }) => {\n    const labelWidth = 40, labelHeight = 20;\n    return (\n        <Group\n            draggable={draggable}\n            onDragStart={e => handleDragStart(e, onDragStart)}\n            onDragEnd={e => handleDragEnd(e, onDragEnd)}\n            onDragMove={onDragMove}\n            onClick={onClick}\n            x={vertex.x}\n            y={vertex.y}>\n            <Circle\n                x={0}\n                y={0}\n                radius={vertex.radius}\n                fill={vertex.color}\n                stroke={'black'}\n                shadowBlur={0}\n                strokeWidth={vertexBorderWidth}\n                shadowOpacity={0.5}/>\n            <Text\n                text={vertex.name}\n                x={-labelWidth / 2.}\n                y={-labelHeight / 2.}\n                fontSize={20}\n                fill={vertex.textColor}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>);\n};\n\nexport const vertexBorderWidth = 2;\n\nexport const VertexState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, PRE_COMPLETED: 2, COMPLETED: 3 });","import { vertexBorderWidth } from \"../Vertex/Vertex\";\nimport { Arrow, Circle, Group, Line, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Edge {\n    constructor(vertexFrom, vertexTo, oriented, weight) {\n        this._from = vertexFrom;\n        this._to = vertexTo;\n        this.weight = weight;\n        this.state = EdgeState.DEFAULT;\n        this._oriented = oriented;\n    }\n\n    get from() {\n        return this._from;\n    }\n\n    get to() {\n        return this._to;\n    }\n\n    get color() {\n        switch (this.state) {\n            case EdgeState.DEFAULT:\n                return 'black';\n            case EdgeState.HIGHLIGHTED:\n                return '#f7ff00';\n            case EdgeState.WALKED:\n                return '#ff5f3c';\n            case EdgeState.ERASED:\n                return '#ffffff00';\n            default:\n                return 'black';\n        }\n    }\n\n    isWeighted() {\n        return (this.weight !== undefined) && (this.weight !== null);\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n    }\n}\n\nexport const EdgeComponent = ({ edge, edgeType, onClick }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group onClick={onClick}>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeLabel = ({ x, y, text }) => {\n    const labelRadius = 15;\n    const labelHorizontalPadding = 1, labelVerticalPadding = 5;\n    const labelBorderWidth = 0;\n    return (\n        <Group\n            x={x - labelRadius - labelHorizontalPadding - labelBorderWidth}\n            y={y - labelRadius - labelVerticalPadding - labelBorderWidth}\n            width={labelRadius * 2. + 2. * (labelHorizontalPadding + labelBorderWidth)}\n            height={labelRadius * 2. + 2. * (labelVerticalPadding + labelBorderWidth)}>\n            <Circle\n                x={labelRadius + labelHorizontalPadding + labelBorderWidth}\n                y={labelRadius + labelVerticalPadding + labelBorderWidth}\n                radius={labelRadius}\n                fill={'white'}\n                stroke={'black'}\n                strokeWidth={labelBorderWidth}/>\n            <Text\n                x={labelBorderWidth + labelHorizontalPadding}\n                y={labelBorderWidth + labelVerticalPadding}\n                text={text}\n                fontSize={20}\n                width={labelRadius * 2.}\n                height={labelRadius * 2.}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>\n    );\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });\nexport const EdgeState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, ERASED: 2, WALKED: 3 });\n\nexport const getEdgePointsForType = (edge, edgeType) => {\n    const vertexFrom = edge.from;\n    const vertexTo = edge.to;\n    const dx = vertexTo.x - vertexFrom.x;\n    const dy = vertexFrom.y - vertexTo.y;\n    const angle = Math.atan2(dy, dx);\n    const vertexFromOffset = vertexFrom.radius + vertexBorderWidth / 2.;\n    const vertexToOffset = vertexTo.radius + vertexBorderWidth / 2.;\n\n    if ((edgeType === EdgeType.ONE_SIDE_ORIENTED) || (edgeType === EdgeType.NOT_ORIENTED)) {\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle);\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xTo, yTo\n            ],\n            labelPoints: [\n                (xFrom + xTo) / 2.,\n                (yFrom + yTo) / 2.\n            ]\n        };\n    } else if (edgeType === EdgeType.TWO_SIDE_ORIENTED) {\n        const angleOffset = 0.25;\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle + angleOffset);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle + angleOffset);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle - angleOffset);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle - angleOffset);\n\n        const middlePointHeightCoefficient = 1. / 15.;\n        const xMiddle = (xFrom + xTo) / 2. - (yFrom - yTo) * middlePointHeightCoefficient;\n        const yMiddle = (yFrom + yTo) / 2. + (xFrom - xTo) * middlePointHeightCoefficient;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddle, yMiddle,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle,\n                yMiddle\n            ]\n        };\n    } else if (edgeType === EdgeType.LOOP) {\n        const xFrom = vertexFrom.x - vertexFromOffset;\n        const yFrom = vertexFrom.y;\n        const xTo = vertexFrom.x - vertexFromOffset;\n        const yTo = vertexFrom.y;\n\n        const anchorDx = 3. * vertexFromOffset / Math.sqrt(2.);\n        const anchorDy = 1.5 * vertexFromOffset / Math.sqrt(2.);\n        const xMiddleFirst = xFrom - anchorDx;\n        const yMiddleFirst = yFrom - anchorDy;\n        const xMiddle = xMiddleFirst - vertexFromOffset;\n        const yMiddle = yFrom;\n        const xMiddleSecond = xTo - anchorDx;\n        const yMiddleSecond = yTo + anchorDy;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddleFirst, yMiddleFirst,\n                xMiddle, yMiddle,\n                xMiddleSecond, yMiddleSecond,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle, yMiddle\n            ]\n        };\n    }\n};","export function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    ADD_VERTEX: 'ADD_VERTEX',\n    ADD_EDGE: 'ADD_EDGE',\n    REMOVE_VERTEX: 'REMOVE_VERTEX',\n    REMOVE_EDGE: 'REMOVE_EDGE',\n    CHANGE_GRAPH_MODE: 'CHANGE_GRAPH_MODE',\n    SELECT_VERTEX: 'SELECT_VERTEX',\n    UNSELECT_VERTEX: 'UNSELECT_VERTEX',\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    CLOSE_MESSAGE: 'CLOSE_MESSAGE',\n    UPDATE_VERTEX_POSITION: 'UPDATE_VERTEX_POSITION',\n    INVERT_ORIENTATION: 'INVERT_ORIENTATION',\n    ALGORITHM_STEP: 'ALGORITHM_STEP',\n    CLEAN_GRAPH_SELECTIONS: 'CLEAN_GRAPH_SELECTIONS',\n    SET_GRAPH: 'SET_GRAPH'\n});\n\nexport const addVertex = (x, y, radius) => ({\n    type: ActionType.ADD_VERTEX,\n    x,\n    y,\n    radius\n});\n\nexport const addEdge = (vertexFrom, vertexTo, weight) => ({\n    type: ActionType.ADD_EDGE,\n    vertexFrom,\n    vertexTo,\n    weight\n});\n\nexport const removeVertex = (vertex) => ({\n    type: ActionType.REMOVE_VERTEX,\n    vertex\n});\n\nexport const removeEdge = (edge) => ({\n    type: ActionType.REMOVE_EDGE,\n    edge\n});\n\nexport const changeGraphMode = (graphMode) => ({\n    type: ActionType.CHANGE_GRAPH_MODE,\n    graphMode\n});\n\nexport const selectVertex = (vertex) => ({\n    type: ActionType.SELECT_VERTEX,\n    vertex\n});\n\nexport const unselectVertex = (vertex) => ({\n    type: ActionType.UNSELECT_VERTEX,\n    vertex\n});\n\nlet currentMessageId = 0;\n\nexport const showMessage = (message) => async (dispatch) => {\n    const messageId = ++currentMessageId;\n    dispatch(showMessageConnector(message));\n    await sleep(2000);\n    if (messageId === currentMessageId)\n        dispatch(closeMessage());\n};\n\nconst showMessageConnector = (message) => ({\n    type: ActionType.SHOW_MESSAGE,\n    message\n});\n\nexport const closeMessage = () => ({\n    type: ActionType.CLOSE_MESSAGE\n});\n\nexport const updateVertexPosition = (vertexIndex, x, y) => ({\n    type: ActionType.UPDATE_VERTEX_POSITION,\n    vertexIndex,\n    x,\n    y\n});\n\nexport const invertOrientation = () => ({\n    type: ActionType.INVERT_ORIENTATION\n});\n\nexport const algorithmStep = (step) => ({\n    type: ActionType.ALGORITHM_STEP,\n    step\n});\n\nexport const cleanGraphSelections = () => ({\n    type: ActionType.CLEAN_GRAPH_SELECTIONS\n});\n\nexport const setGraph = (graph) => ({\n    type: ActionType.SET_GRAPH,\n    graph\n});","export const ActionType = Object.freeze({\n    START_DIALOG_FOR_RESULT: 'START_DIALOG_FOR_RESULT',\n    CLOSE_DIALOG: 'CLOSE_DIALOG'\n});\n\nexport const startDialogForResult = (title, text, hint, inputPlaceholder, onSubmit, onCancel, pattern = \".*\") => ({\n    type: ActionType.START_DIALOG_FOR_RESULT,\n    title,\n    text,\n    hint,\n    inputPlaceholder,\n    onSubmit,\n    onCancel,\n    pattern\n});\n\nconst closeDialog = () => ({\n   type: ActionType.CLOSE_DIALOG\n});\n\nexport const cancelDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeDialog());\n};\n\nexport const submitDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeDialog());\n};","export const VertexAction = Object.freeze({\n    SELECT: 0,\n    UNSELECT: 1,\n    ENTER: 2,\n    EXIT: 3,\n});\n\nexport const EdgeAction = Object.freeze({\n    WALK: 0,\n    HIGHLIGHT: 1\n});\n\nexport const AlgorithmActionType = Object.freeze({\n    VERTEX_ACTION: 0,\n    EDGE_ACTION: 1\n});\n\nexport const PreCallAction = Object.freeze({\n    NOTHING: 0,\n    SELECT_VERTEX: 1,\n    SELECT_EDGE: 2\n});","import { algorithmStep, changeGraphMode, closeMessage, showMessage } from \"./index\";\nimport { GraphMode } from \"../components/Graph/Graph\";\nimport { PreCallAction } from \"../algorithms/graph\";\nimport { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    PRE_CALL: 'PRE_CALL',\n    CALL: 'CALL',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    POP_TRACE_STEP: 'POP_TRACE_STEP',\n    SET_ALGORITHM: 'SET_ALGORITHM',\n    SET_SPEED: 'SET_SPEED',\n    SET_IS_ONE_STEP: 'SET_IS_ONE_STEP',\n    CLEAR_TRACE: 'CLEAR_TRACE',\n    CLEAR_STATISTICS: 'CLEAR_STATISTICS'\n});\n\nexport const preCall = (isOneStep = false) => (dispatch, getState) => {\n    dispatch(setIsOneStep(isOneStep));\n\n    const preCall = getState().algorithmReducer.algorithm.preCall;\n    if (preCall === PreCallAction.SELECT_VERTEX) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX));\n        dispatch(showMessage(\"Выберите вершину\"));\n    } else if (preCall === PreCallAction.SELECT_EDGE) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE));\n        dispatch(showMessage(\"Выберите ребро\"));\n    } else if (preCall === PreCallAction.NOTHING) {\n        dispatch(call());\n    }\n};\n\nexport const setSpeed = (speed) => ({\n    type: ActionType.SET_SPEED,\n    speed\n});\n\nexport const setAlgorithm = (algorithm) => ({\n    type: ActionType.SET_ALGORITHM,\n    algorithm\n});\n\nconst setIsOneStep = (isOneStep) => ({\n    type: ActionType.SET_IS_ONE_STEP,\n    isOneStep\n});\n\nexport const call = (vertex, edge) => (dispatch, getState) => {\n    dispatch(closeMessage());\n    dispatch(changeGraphMode(GraphMode.DEFAULT));\n    const graph = getState().graphReducer.graph;\n    dispatch(callConnector(graph, vertex, edge));\n\n    const isOneStep = getState().algorithmReducer.isOneStep;\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nexport const continueCall = (isOneStep = false) => (dispatch) => {\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nconst start = () => ({\n    type: ActionType.START\n});\n\nexport const pause = () => ({\n    type: ActionType.PAUSE\n});\n\nconst callConnector = (graph, vertex, edge) => ({\n    type: ActionType.CALL,\n    graph,\n    vertex,\n    edge\n});\n\nlet currentVisualizationId = 0; // To prevent several visualization 'threads'\n\nconst callSuccess = (isOneStep = false) => async (dispatch, getState) => {\n    if (isOneStep) {\n        if (getState().algorithmReducer.trace.length > 0) {\n            dispatch(algorithmStep(getState().algorithmReducer.trace[0]));\n            dispatch(popTraceStep());\n        }\n        return;\n    }\n\n    const visualizationId = ++currentVisualizationId;\n    while ((getState().algorithmReducer.trace.length > 0) && getState().algorithmReducer.isActive) {\n        dispatch(algorithmStep(getState().algorithmReducer.trace[0]));\n        dispatch(popTraceStep());\n        if (getState().algorithmReducer.trace.length > 0) {\n            await sleep(getState().algorithmReducer.speed);\n            if (currentVisualizationId !== visualizationId)\n                return;\n        }\n    }\n    if (getState().algorithmReducer.isActive) {\n        dispatch(pause());\n    }\n};\n\nconst popTraceStep = () => ({\n    type: ActionType.POP_TRACE_STEP\n});\n\nexport const clearTrace = () => ({\n    type: ActionType.CLEAR_TRACE\n});\n\nexport const clearStatistics = () => ({\n    type: ActionType.CLEAR_STATISTICS\n});","import { Arrow, Group, Line } from \"react-konva\";\nimport React from \"react\";\nimport { EdgeLabel, getEdgePointsForType } from \"../Edge/Edge\";\n\nexport const VisualizationEdgeComponent = ({ edge, edgeType }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Graph.module.scss\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Vertex, VertexComponent } from \"./Vertex/Vertex\";\nimport { Edge, EdgeComponent, EdgeType } from \"./Edge/Edge\";\nimport { connect } from \"react-redux\";\nimport {\n    addEdge,\n    addVertex,\n    removeEdge,\n    removeVertex,\n    selectVertex,\n    unselectVertex,\n    updateVertexPosition\n} from \"../../actions\";\nimport { startDialogForResult } from \"../../actions/dialog\";\nimport { call } from \"../../actions/algorithm\";\nimport { VisualizationEdgeComponent } from \"./VisualizationEdge/VisualizationEdge\";\n\nconst cx = classnames.bind(styles);\n\nexport const vertexRadius = 20;\n\nconst mapStateToProps = state => ({\n    graph: state.graphReducer.graph,\n    graphMode: state.graphReducer.graphMode,\n    selectedVertex: state.graphReducer.selectedVertex\n});\n\nexport const GraphMode = Object.freeze({\n    DEFAULT: 0,\n    ADD_VERTEX: 1,\n    ADD_EDGE: 2,\n    REMOVE_VERTEX_OR_EDGE: 3,\n    ALGORITHM_PRE_CALL_SELECT_VERTEX: 4,\n    ALGORITHM_PRE_CALL_SELECT_EDGE: 5\n});\n\nexport class Graph {\n    constructor(oriented, vertices = null, edges = null) {\n        if (!vertices || !Array.isArray(vertices) || !edges || !Array.isArray(edges)) {\n            this._vertices = [];\n            this._edges = [];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = 0;\n        } else {\n            for (let i = 0; i < vertices.length; ++i) {\n                if ((vertices[i].name < 0) || (vertices[i].name > 999))\n                    throw new Error(\"Invalid vertex name\");\n\n                for (let j = 0; j < vertices.length; ++j) {\n                    if ((i !== j) && (vertices[i].name === vertices[j].name))\n                        throw new Error(\"Two vertices with equal names\");\n                }\n            }\n\n            for (let i = 0; i < edges.length; ++i) {\n                if (edges[i].weight && ((edges[i].weight < 0) || (edges[i].weight > 99)))\n                    throw new Error(\"Invalid edge weight\");\n                if (vertices.findIndex(v => v.name === edges[i].from.name) === -1)\n                    throw new Error(\"Invalid vertex 'from'\");\n                if (vertices.findIndex(v => v.name === edges[i].to.name) === -1)\n                    throw new Error(\"Invalid vertex 'to'\");\n\n                for (let j = 0; j < edges.length; ++j) {\n                    if (i !== j) {\n                        if (oriented) {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name))\n                                throw new Error(\"Multiedges aren't supported\");\n                        } else {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name)\n                                || (edges[i].to.name === edges[j].from.name) && (edges[i].from.name === edges[j].to.name)) {\n                                throw new Error(\"Multiedges aren't supported\");\n                            }\n                        }\n                    }\n                }\n            }\n\n            this._vertices = [...vertices];\n            this._edges = [...edges];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = Math.max(...vertices.map(v => v.name)) + 1;\n        }\n    }\n\n    addVertex(x, y, radius) {\n        const vertex = new Vertex(x, y, radius, this._currentName++);\n        this._vertices.push(vertex);\n        return vertex;\n    }\n\n    removeVertex(vertex) {\n        const index = this._vertices.findIndex(v => v === vertex);\n        if (index !== -1) {\n            this._vertices.splice(index, 1);\n            this._edges = this._edges.filter(edge => (edge.from.name !== vertex.name) && (edge.to.name !== vertex.name));\n        }\n    }\n\n    findEdge(vertexFrom, vertexTo) {\n        if (this._oriented)\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addEdge(vertexFrom, vertexTo, weight) {\n        const i = this.findEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, this._oriented, weight);\n            this._edges.push(edge);\n            return edge;\n        }\n        else {\n            this._edges[i].weight = weight;\n        }\n    }\n\n    removeEdge(edge) {\n        this._edges = this._edges.filter(e => e !== edge);\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n        if (this._oriented)\n            this._edges.forEach(edge => edge.invertOrientation());\n        else {\n            const newEdges = [];\n            this._edges.forEach(edge => {\n                if (newEdges.findIndex(e => (e.from === edge.from) && (e.to === edge.to)\n                    || (e.to === edge.from) && (e.from === edge.to)) === -1) {\n\n                    edge.invertOrientation();\n                    newEdges.push(edge);\n                }\n            });\n            this._edges = newEdges;\n        }\n    }\n\n    findVisualizationEdge(vertexFrom, vertexTo) {\n        return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n    }\n\n    addVisualizationEdge(vertexFrom, vertexTo, oriented, weight) {\n        const i = this.findVisualizationEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, oriented, weight);\n            this._visualizationEdges.push(edge);\n            return edge;\n        }\n        else {\n            this._visualizationEdges[i].weight = weight;\n            return this._visualizationEdges[i];\n        }\n    }\n\n    removeVisualizationEdge(edge) {\n        this._visualizationEdges = this._visualizationEdges.filter(e => e !== edge);\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    get visualizationEdges() {\n        return this._visualizationEdges;\n    }\n\n    set visualizationEdges(edges) {\n        this._visualizationEdges = edges;\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n}\n\nclass GraphComponent extends React.Component {\n    state = {\n        draggedVertex: undefined,\n        windowWidth: 700,\n        windowHeight: 700\n    };\n\n    componentDidMount() {\n        const handleResize = () => {\n            this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n        };\n        window.onresize = handleResize;\n        handleResize();\n    }\n\n    findIndexOfVertex = (vertex) => {\n        return this.props.graph.vertices.findIndex(v => v === vertex);\n    };\n\n    handleVertexDragStart = (e, vertex) => {\n        const i = this.findIndexOfVertex(vertex);\n        this.setState({ draggedVertex: (i !== -1 ? i : undefined) });\n    };\n\n    updateDraggedVertex = (x, y) => {\n        const vertex = this.state.draggedVertex;\n        if (vertex !== undefined)\n            this.props.updateVertexPosition(vertex, x, y);\n    };\n\n    handleVertexDragMove = e => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n    };\n\n    handleVertexDragEnd = (e, vertex) => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n        this.setState({ draggedVertex: undefined });\n    };\n\n    getEdgeType = edge => {\n        const vertexFrom = edge.from, vertexTo = edge.to;\n\n        if (vertexTo === vertexFrom)\n            return EdgeType.LOOP;\n        else if (!edge.isOriented())\n            return EdgeType.NOT_ORIENTED;\n        else if ((this.props.graph.edges.findIndex(e => (e.from === vertexTo) && (e.to === vertexFrom)) !== -1)\n                && (this.props.graph.edges.findIndex(e => (e.to === vertexTo) && (e.from === vertexFrom)) !== -1))\n            return EdgeType.TWO_SIDE_ORIENTED;\n        else\n            return EdgeType.ONE_SIDE_ORIENTED;\n    };\n\n    handleCanvasClick = e => {\n        const x = e.evt.clientX, y = e.evt.clientY;\n\n        if (this.props.graphMode === GraphMode.ADD_VERTEX)\n            this.props.addVertex(x, y, vertexRadius);\n        else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            if (this.props.selectedVertex !== undefined) {\n                this.props.unselectVertex();\n            }\n        }\n    };\n\n    handleVertexClick = (e, vertex) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeVertex(vertex);\n        } else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            e.cancelBubble = true;\n\n            if (this.props.selectedVertex === undefined) {\n                this.props.selectVertex(vertex);\n            }\n            else {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    \"\",\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        this.props.addEdge(this.props.selectedVertex, vertex, value);\n                        this.props.unselectVertex();\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX) {\n            e.cancelBubble = true;\n\n            this.props.callAlgorithm(vertex, null);\n        }\n    };\n\n    handleEdgeClick = (e, edge) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeEdge(edge);\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE) {\n            e.cancelBubble = true;\n            this.props.callAlgorithm(null, edge);\n        }\n    };\n\n    render() {\n        return (\n            <Stage onClick={this.handleCanvasClick} width={this.state.windowWidth} height={this.state.windowHeight}>\n                <Layer>\n                    <Rect fill={'white'} x={0} y={0} width={this.state.windowWidth} height={this.state.windowHeight}/>\n                    {\n                        this.props.graph.edges.map((edge, index) =>\n                            <EdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}\n                                onClick={(e) => this.handleEdgeClick(e, edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.visualizationEdges.map((edge, index) =>\n                            <VisualizationEdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.vertices.map((vertex, index) =>\n                            <VertexComponent\n                                key={index}\n                                vertex={vertex}\n                                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                                onClick={(e) => this.handleVertexClick(e, vertex)}\n                                onDragStart={e => this.handleVertexDragStart(e, vertex)}\n                                onDragEnd={e => this.handleVertexDragEnd(e, vertex)}\n                                onDragMove={e => this.handleVertexDragMove(e, vertex)}/>\n                        )\n                    }\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    addVertex: (x, y, radius) => dispatch(addVertex(x, y, radius)),\n    addEdge: (vertexFrom, vertexTo, radius) => dispatch(addEdge(vertexFrom, vertexTo, radius)),\n    removeVertex: (vertex) => dispatch(removeVertex(vertex)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    updateVertexPosition: (vertexIndex, x, y) => dispatch(updateVertexPosition(vertexIndex, x, y)),\n    selectVertex: (vertex) => dispatch(selectVertex(vertex)),\n    unselectVertex: (vertex) => dispatch(unselectVertex(vertex)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern)),\n    callAlgorithm: (vertex, edge) => dispatch(call(vertex, edge))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Buttons.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const ButtonComponent = ({ text, type = \"button\", onClick, activated, className }) => {\n    return (\n        <button type={type} className={cx(\"button\", className, {[`activated`]: activated})} onClick={onClick}>\n            {text}\n        </button>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Sliders.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const SliderComponent = ({ label, value, min, max, onChange }) => {\n    return (\n        <div className={cx(\"slider-wrapper\")}>\n            <div className={cx(\"slider-label\")}>{label}</div>\n            <input\n                type={\"range\"}\n                className={cx(\"slider\")}\n                value={value}\n                min={min}\n                max={max}\n                onChange={onChange}/>\n        </div>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./DropDownLists.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const DropDownList = ({ items, onChange }) => {\n    return (\n        <select className={cx(\"drop-down-list\")} onChange={onChange}>\n            {items.map((item, index) => <option key={index} value={index}>{item}</option>)}\n        </select>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./ToggleSwitches.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const RoundedToggleSwitch = ({ text, onChange, className, isChecked }) => {\n    return (\n        <div className={cx(\"switch-round-wrapper\", className)}>\n            <label className={cx(\"switch-round\")}>\n                <input type={\"checkbox\"} onChange={onChange} checked={isChecked}/>\n                <span className={cx(\"slider\")}/>\n            </label>\n            <span className={cx(\"text\")}>{text}</span>\n        </div>\n    );\n};","export const edgesListToAdjacencyList = (vertices, edges) => {\n    const adjacencyList = {};\n    vertices.forEach(vertex => adjacencyList[vertex.name] = []);\n    edges.forEach(edge => {\n        adjacencyList[edge.from.name].push(edge.to.name);\n        if (!edge.isOriented() && (edge.from !== edge.to))\n            adjacencyList[edge.to.name].push(edge.from.name);\n    });\n    for (let [, verticesList] of Object.entries(adjacencyList))\n        verticesList = verticesList.sort((a, b) => a - b);\n    return adjacencyList;\n};\n\nexport const edgesListToAdjacencyMatrix = (vertices, edges) => {\n    const verticesNumbers = [];\n    vertices.forEach(v => verticesNumbers.push(v.name));\n    verticesNumbers.sort((a, b) => a - b);\n    const nameToIndex = {};\n    verticesNumbers.forEach((number, index) => nameToIndex[number] = index);\n\n    const adjacencyMatrix = new Array(vertices.length);\n    for (let i = 0; i < vertices.length; ++i)\n        adjacencyMatrix[i] = new Array(vertices.length);\n\n    let from, to, cell;\n    edges.forEach(e => {\n        from = nameToIndex[e.from.name];\n        to = nameToIndex[e.to.name];\n        cell = e.weight ? { weighted: true, weight: e.weight } : { weighted : false };\n        adjacencyMatrix[from][to] = cell;\n    });\n\n    return adjacencyMatrix;\n};","import { AlgorithmActionType, EdgeAction, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    adjacencyList[vertex].forEach(to => {\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList);\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nexport default {\n    name: \"Поиск в глубину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        dfs(start.name, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${trace.length}`\n            ]\n        };\n    }\n};","export class Queue {\n    constructor() {\n        this._queue = [];\n    }\n\n    get length() {\n        return this._queue.length;\n    }\n\n    isEmpty() {\n        return this._queue.length === 0;\n    }\n\n    push(value) {\n        this._queue.push(value);\n    }\n\n    pop() {\n        // TODO: O(N) -> O(1)\n        return this._queue.shift();\n    }\n\n    peek() {\n        return this._queue[0];\n    }\n}","import { AlgorithmActionType, EdgeAction, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(to => {\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Поиск в ширину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        bfs(start.name, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${trace.length}`\n            ]\n        };\n    }\n};","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Menu.module.scss\";\nimport Draggable from 'react-draggable';\nimport { ButtonComponent } from \"../Buttons/Buttons\";\nimport { SliderComponent } from \"../Sliders/Sliders\";\nimport { DropDownList } from \"../DropDownLists/DropDownLists\";\nimport {\n    changeGraphMode,\n    cleanGraphSelections,\n    closeMessage,\n    invertOrientation,\n    setGraph,\n    showMessage\n} from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { Graph, GraphMode, vertexRadius } from \"../Graph/Graph\";\nimport { RoundedToggleSwitch } from \"../ToggleSwitches/ToggleSwitches\";\nimport {\n    call,\n    clearStatistics,\n    clearTrace,\n    continueCall,\n    pause,\n    preCall,\n    setAlgorithm,\n    setSpeed\n} from \"../../actions/algorithm\";\nimport DFS from \"../../algorithms/graph/dfs\"\nimport BFS from \"../../algorithms/graph/bfs\"\nimport { Vertex } from \"../Graph/Vertex/Vertex\";\nimport { Edge } from \"../Graph/Edge/Edge\";\nimport { edgesListToAdjacencyMatrix } from \"../../utils/graphConverter\";\n\nconst cx = classnames.bind(styles);\n\nconst minAlgorithmSpeed = 0;\nconst maxAlgorithmSpeed = 1000;\n\nconst mapStateToProps = state => ({\n    graphMode: state.graphReducer.graphMode,\n    isOriented: state.graphReducer.graph.isOriented(),\n    isVisualizationActive: state.algorithmReducer.isActive,\n    visualizationSpeed: state.algorithmReducer.speed,\n    selectedAlgorithm: state.algorithmReducer.algorithm,\n    remainingAlgorithmSteps: state.algorithmReducer.trace.length,\n    graph: state.graphReducer.graph\n});\n\nclass MenuComponent extends React.Component {\n    state = {\n        algorithms: [DFS, BFS],\n        algorithmPaused: false\n    };\n\n    componentDidMount() {\n        this.props.setAlgorithm(this.state.algorithms[0]);\n        this.props.setSpeed((minAlgorithmSpeed + maxAlgorithmSpeed) / 2);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (nextProps.graphMode !== this.props.graphMode)\n            return true;\n        if (nextProps.isOriented !== this.props.isOriented)\n            return true;\n        if (nextProps.isVisualizationActive !== this.props.isVisualizationActive)\n            return true;\n        if (nextProps.visualizationSpeed !== this.props.visualizationSpeed)\n            return true;\n        if (nextProps.selectedAlgorithm !== this.props.selectedAlgorithm)\n            return true;\n        if (nextProps.remainingAlgorithmSteps !== this.props.remainingAlgorithmSteps)\n            return true;\n        return false;\n    }\n\n    handleAlgorithmChange = e => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n\n        this.props.setAlgorithm(this.state.algorithms[e.target.value]);\n    };\n\n    startVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.cleanGraphSelections();\n            this.props.preCall();\n        } else if (this.props.isVisualizationActive) {\n            this.props.pause();\n            this.setState({ algorithmPaused: true });\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue();\n        }\n    };\n\n    stepVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.cleanGraphSelections();\n            this.props.preCall(true);\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue(true);\n        }\n    };\n\n    stopVisualization = () => {\n        this.clearVisualization();\n        this.props.closeMessage();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n    };\n\n    handleAlgorithmSpeedChange = e => {\n        this.props.setSpeed(maxAlgorithmSpeed - e.target.value);\n    };\n\n    askForAction = (message, graphMode) => {\n        this.clearVisualization();\n\n        this.props.showMessage(message);\n        this.props.changeGraphMode(graphMode);\n    };\n\n    closeMessage = () => {\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n    };\n\n    invertOrientation = () => {\n        this.clearVisualization();\n\n        this.props.invertOrientation();\n    };\n\n    clearVisualization = () => {\n        this.props.pause();\n        this.setState({ algorithmPaused: false });\n        this.props.cleanGraphSelections();\n        this.props.clearTrace();\n        this.props.clearStatistics();\n    };\n\n    writeToFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        const json = JSON.stringify({\n            vertices: this.props.graph.vertices.map(v => ({\n                x: v.x,\n                y: v.y,\n                name: v.name\n            })),\n            edges: this.props.graph.edges.map(e => ({\n                from: e.from.name,\n                to: e.to.name,\n                weight: e.weight\n            })),\n            oriented: this.props.isOriented\n        });\n\n        const exportData = \"data:text/json;charset=utf-8,\" + escape(json);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"graph.json\");\n        anchorElement.click();\n    };\n\n    askReadFromFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        document.getElementById(\"fileLoad\").click();\n    };\n\n    readFromFile = (e) => {\n        const reader = new FileReader();\n        const file = e.target.files[0];\n\n        reader.onload = (e) => {\n            try {\n                const json = JSON.parse(e.target.result);\n\n                const oriented = json.oriented;\n                const vertices = json.vertices.map(v => new Vertex(v.x, v.y, vertexRadius, v.name));\n                const edges = json.edges.map(e =>\n                    new Edge(\n                        vertices.find(v => v.name === e.from),\n                        vertices.find(v => v.name === e.to),\n                        oriented,\n                        e.weight\n                    )\n                );\n\n                const graph = new Graph(oriented, vertices, edges);\n\n                if (oriented !== this.props.isOriented)\n                    this.invertOrientation();\n                this.props.setGraph(graph);\n            } catch (e) {\n                this.props.showMessage(\"Некорректный формат файла\");\n            }\n        };\n\n        reader.readAsText(file);\n        document.getElementById(\"fileLoad\").value = null;\n    };\n\n    showAdjacencyMatrix = () => {\n        console.log(edgesListToAdjacencyMatrix(this.props.graph.vertices, this.props.graph.edges));\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"} cancel={[\"button\", \"input\", \"select\"]}>\n                <div className={cx(\"menu\")}>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"graph-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Режим просмотра\"} // TODO: Find proper name\n                                onClick={() => this.closeMessage()}\n                                activated={this.props.graphMode === GraphMode.DEFAULT}/>\n                            <ButtonComponent\n                                text={\"Добавить вершину\"}\n                                onClick={() => this.askForAction(\"Выберите точку для добавления вершины\", GraphMode.ADD_VERTEX)}\n                                activated={this.props.graphMode === GraphMode.ADD_VERTEX}/>\n                            <ButtonComponent\n                                text={\"Добавить ребро\"}\n                                onClick={() => this.askForAction(\"Выберите вершины, которые нужно соединить ребром\", GraphMode.ADD_EDGE)}\n                                activated={this.props.graphMode === GraphMode.ADD_EDGE}/>\n                            <ButtonComponent\n                                text={\"Удалить вершину/ребро\"}\n                                onClick={() => this.askForAction(\"Выберите объект для удаления\", GraphMode.REMOVE_VERTEX_OR_EDGE)}\n                                activated={this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE}/>\n                        </div>\n                        <RoundedToggleSwitch\n                            className={cx(\"switch\")}\n                            text={\"Ориентированный?\"}\n                            onChange={() => this.invertOrientation()}\n                            isChecked={this.props.isOriented}/>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"algorithms-list\")}>\n                            <DropDownList\n                                items={this.state.algorithms.map(a => a.name)}\n                                onChange={this.handleAlgorithmChange}/>\n                        </div>\n                        <div className={cx(\"slider\")}>\n                            <SliderComponent\n                                label={\"Скорость анимации\"}\n                                value={maxAlgorithmSpeed - this.props.visualizationSpeed}\n                                min={minAlgorithmSpeed}\n                                max={maxAlgorithmSpeed}\n                                onChange={this.handleAlgorithmSpeedChange}/>\n                        </div>\n                        <div className={cx(\"visualization-control-buttons\")}>\n                            <ButtonComponent\n                                text={this.state.algorithmPaused ? \"Далее\" : (this.props.isVisualizationActive ? \"Пауза\" : \"Старт\")}\n                                onClick={this.startVisualization}/>\n                            <ButtonComponent text={\"Шаг\"} onClick={this.stepVisualization}/>\n                            <ButtonComponent text={\"Стоп\"} onClick={this.stopVisualization}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"file-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Сохранить\"}\n                                onClick={() => this.writeToFile()}\n                                activated={false}/>\n                            <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save graph</a>\n\n                            <ButtonComponent\n                                text={\"Загрузить\"}\n                                onClick={() => this.askReadFromFile()}\n                                activated={false}/>\n                            <input id=\"fileLoad\" type=\"file\" accept=\".json\" style={{\"display\": \"none\"}} onChange={(e) => this.readFromFile(e)}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"file-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Матрица смежности\"}\n                                onClick={() => this.showAdjacencyMatrix()}\n                                activated={false}/>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeGraphMode: (graphMode) => dispatch(changeGraphMode(graphMode)),\n    showMessage: (message) => dispatch(showMessage(message)),\n    closeMessage: () => dispatch(closeMessage()),\n    invertOrientation: () => dispatch(invertOrientation()),\n    setAlgorithm: (algorithm) => dispatch(setAlgorithm(algorithm)),\n    setSpeed: (speed) => dispatch(setSpeed(speed)),\n    preCall: (isOneStep) => dispatch(preCall(isOneStep)),\n    call: () => dispatch(call()),\n    pause: () => dispatch(pause()),\n    continue: (isOneStep) => dispatch(continueCall(isOneStep)),\n    cleanGraphSelections: () => dispatch(cleanGraphSelections()),\n    clearTrace: () => dispatch(clearTrace()),\n    clearStatistics: () => dispatch(clearStatistics()),\n    setGraph: (graph) => dispatch(setGraph(graph))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MessageBox.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message\n});\n\nconst MessageBox = ({ message }) => {\n    return (\n        <div className={cx(\"message-box\", {[`invisible`]: message === undefined})}>\n            {message}\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(MessageBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./TextInputs.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const TextInputComponent = ({ value, placeholder, onChange, pattern, className, autoFocus = false }) => {\n    return (\n        <input\n            className={cx(\"text-input\", className)}\n            type=\"text\"\n            pattern={pattern}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}\n            autoFocus={autoFocus}/>\n    );\n};","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InputDialog.module.scss\";\nimport { cancelDialog, submitDialog } from \"../../../actions/dialog\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { TextInputComponent } from \"../../TextInputs/TextInputs\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.dialogReducer.isOpen,\n    title: state.dialogReducer.title,\n    text: state.dialogReducer.text,\n    hint: state.dialogReducer.hint,\n    inputPlaceholder: state.dialogReducer.inputPlaceholder,\n    pattern: state.dialogReducer.pattern,\n    onSubmit: state.dialogReducer.onSubmit,\n    onCancel: state.dialogReducer.onCancel\n});\n\nclass InputDialog extends React.Component {\n    state = {\n        value: \"\"\n    };\n\n    handleChange = (e) => {\n        if (e.target.validity.valid)\n            this.setState({ value: e.target.value });\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n        this.setState({ value: \"\" });\n        this.props.submitDialog(this.props.onSubmit, this.state.value);\n    };\n\n    cancel = () => {\n        this.setState({ value: \"\" });\n        this.props.cancelDialog(this.props.onCancel);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => {\n                    this.setState({ value: \"\" });\n                    this.props.cancelDialog(this.props.onCancel);\n                }}\n                ariaHideApp={false}\n                className={cx(\"input-dialog\")}\n                style={customStyles}>\n\n                <h2>{this.props.title}</h2>\n                <div>{this.props.text}</div>\n                <form onSubmit={(e) => this.submit(e)}>\n                    <TextInputComponent\n                        autoFocus={true}\n                        className={cx(\"text-input\")}\n                        placeholder={this.props.inputPlaceholder}\n                        pattern={this.props.pattern}\n                        onChange={this.handleChange}\n                        value={this.state.value}/>\n\n                    <ButtonComponent\n                        type={\"submit\"}\n                        className={cx(\"button\")}\n                        text={\"Ок\"}\n                        onClick={(e) => this.submit(e)}/>\n                    <ButtonComponent\n                        className={cx(\"button\")}\n                        text={\"Отмена\"}\n                        onClick={() => this.cancel()}/>\n                </form>\n\n                <div className={cx(\"hint\")}>{this.props.hint}</div>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputDialog);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InfoBox.module.scss\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    lines: state.algorithmReducer.statistics\n});\n\nconst InfoBox = ({ lines }) => {\n    return (\n        <div className={cx(\"info-box\", {[`invisible`]: !(Array.isArray(lines) && lines.length)})}>\n            {lines.map((line, index) => <div className={cx(\"text\")} key={index}>{line}</div>)}\n        </div>\n    );\n};\n\nInfoBox.propTypes = {\n    lines: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.symbol,\n        PropTypes.bool\n    ]))\n};\n\nexport default connect(mapStateToProps)(InfoBox);","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./App.module.scss\";\nimport PlainGraph from \"./PlainGraph/PlainGraph\";\nimport GraphComponent from \"./Graph/Graph\";\nimport MenuComponent from \"./Menu/Menu\";\nimport MessageBox from \"./MessageBox/MessageBox\";\nimport InputDialog from \"./Dialogs/InputDialog/InputDialog\";\nimport InfoBox from \"./InfoBox/InfoBox\";\n\nconst cx = classnames.bind(styles);\n\nconst App = () => (\n    <div className={cx(\"app\")}>\n        <MenuComponent/>\n        <GraphComponent/>\n        <MessageBox/>\n        <InfoBox/>\n        <InputDialog/>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionType } from \"../actions/dialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false,\n    title: \"\",\n    text: \"\",\n    hint: \"\",\n    inputPlaceholder: \"\",\n    onSubmit: null,\n    onClose: null,\n    pattern: \".*\"\n};\n\nconst dialog = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.START_DIALOG_FOR_RESULT:\n            newState = {\n                ...state,\n                isOpen: true,\n                title: action.title,\n                text: action.text,\n                hint: action.hint,\n                inputPlaceholder: action.inputPlaceholder,\n                pattern: action.pattern\n            };\n\n            newState.onSubmit = (value) => {\n                const onSubmit = action.onSubmit;\n                if (onSubmit)\n                    onSubmit(value);\n            };\n            newState.onCancel = () => {\n                const onCancel = action.onCancel;\n                if (onCancel)\n                    onCancel();\n            };\n\n            return newState;\n        case ActionType.CLOSE_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default dialog;","import { ActionType } from \"../actions/algorithm\";\nimport React from \"react\";\nimport { PreCallAction } from \"../algorithms/graph/index\";\n\nconst defaultState = {\n    trace: [],\n    isActive: false,\n    algorithm: null,\n    speed: 1000,\n    isOneStep: false,\n    statistics: []\n};\n\nconst algorithm = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.CALL:\n            newState = {\n                ...state\n            };\n\n            const preCall = state.algorithm.preCall;\n            const vertices = action.graph.vertices;\n            const edges = action.graph.edges;\n            let result;\n            if (preCall === PreCallAction.SELECT_VERTEX) {\n                result = state.algorithm.call(vertices, edges, action.vertex);\n            } else if (preCall === PreCallAction.SELECT_EDGE) {\n                result = state.algorithm.call(vertices, edges, action.edge);\n            }\n            newState.trace = result.trace;\n            newState.statistics = result.statistics;\n\n            return newState;\n        case ActionType.POP_TRACE_STEP:\n            newState = {\n                ...state,\n                trace: [...state.trace]\n            };\n\n            newState.trace.shift();\n\n            return newState;\n        case ActionType.START:\n            return {\n                ...state,\n                isActive: true\n            };\n        case ActionType.PAUSE:\n            return {\n                ...state,\n                isActive: false\n            };\n        case ActionType.SET_ALGORITHM:\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        case ActionType.SET_SPEED:\n            return {\n                ...state,\n                speed: action.speed\n            };\n        case ActionType.SET_IS_ONE_STEP:\n            return {\n                ...state,\n                isOneStep: action.isOneStep\n            };\n        case ActionType.CLEAR_TRACE:\n            return {\n                ...state,\n                trace: []\n            };\n        case ActionType.CLEAR_STATISTICS:\n            return {\n                ...state,\n                statistics: []\n            };\n        default:\n            return state;\n    }\n};\n\nexport default algorithm;","import { Graph, GraphMode } from \"../components/Graph/Graph\";\nimport { ActionType } from \"../actions\";\nimport { VertexState } from \"../components/Graph/Vertex/Vertex\";\nimport { combineReducers } from \"redux\";\nimport dialog from \"./dialog\";\nimport algorithm from \"./algorithm\";\nimport { AlgorithmActionType, EdgeAction, VertexAction } from \"../algorithms/graph\";\nimport { EdgeState } from \"../components/Graph/Edge/Edge\";\n\nconst defaultState = {\n    graph: new Graph(false),\n    message: undefined,\n    graphMode: GraphMode.DEFAULT,\n    selectedVertex: undefined // For 'ADD_EDGE' // TODO: Do 'ADD_EDGE' in a cleaner way\n};\n\nconst clone = object => {\n    return Object.assign( Object.create( Object.getPrototypeOf(object)), object);\n};\n\nconst unselectSelectedVertex = (state) => {\n    if (state.selectedVertex !== undefined) {\n        const i = state.graph.vertices.findIndex(v => v === state.selectedVertex);\n        if (i !== -1)\n            state.graph.vertices[i].state = VertexState.DEFAULT;\n        state.selectedVertex = undefined;\n    }\n};\n\nconst updateVertexByAction = (vertex, action) => {\n    switch (action) {\n        case VertexAction.SELECT:\n            vertex.state = VertexState.HIGHLIGHTED;\n            break;\n        case VertexAction.ENTER:\n            vertex.state = VertexState.PRE_COMPLETED;\n            break;\n        case VertexAction.EXIT:\n            vertex.state = VertexState.COMPLETED;\n            break;\n        default:\n    }\n};\n\nconst updateEdgeByAction = (edge, action) => {\n    switch (action) {\n        case EdgeAction.WALK:\n            edge.state = EdgeState.WALKED;\n            break;\n        case EdgeAction.HIGHLIGHT:\n            edge.state = EdgeState.HIGHLIGHTED;\n            break;\n        default:\n    }\n};\n\nconst cleanGraphSelections = (state) => {\n    state.graph.vertices.forEach(v => v.state = VertexState.DEFAULT);\n    state.graph.edges.forEach(e => e.state = EdgeState.DEFAULT);\n    state.graph.visualizationEdges = [];\n    state.selectedVertex = undefined;\n};\n\nconst reducer = (state = defaultState, action) => {\n    let newState;\n    let i;\n    switch (action.type) {\n        case ActionType.ADD_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addVertex(action.x, action.y, action.radius);\n\n            return newState;\n        case ActionType.ADD_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addEdge(action.vertexFrom, action.vertexTo, action.weight);\n\n            return newState;\n        case ActionType.REMOVE_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeVertex(action.vertex);\n\n            return newState;\n        case ActionType.REMOVE_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeEdge(action.edge);\n\n            return newState;\n        case ActionType.UPDATE_VERTEX_POSITION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.vertices[action.vertexIndex].x = action.x;\n            newState.graph.vertices[action.vertexIndex].y = action.y;\n\n            return newState;\n        case ActionType.CHANGE_GRAPH_MODE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            if (action.graphMode !== newState.graphMode) {\n                newState.graphMode = action.graphMode;\n\n                unselectSelectedVertex(newState);\n            }\n\n            return newState;\n        case ActionType.SELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            i = newState.graph.vertices.findIndex(v => v === action.vertex);\n            if (i !== -1) {\n                newState.graph.vertices[i].state = VertexState.HIGHLIGHTED;\n                newState.selectedVertex = action.vertex;\n            }\n\n            return newState;\n        case ActionType.UNSELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            return newState;\n        case ActionType.SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message\n            };\n        case ActionType.CLOSE_MESSAGE:\n            return {\n                ...state,\n                message: undefined\n            };\n        case ActionType.INVERT_ORIENTATION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.invertOrientation();\n\n            return newState;\n        case ActionType.ALGORITHM_STEP:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            const step = action.step;\n            if (step.actionType === AlgorithmActionType.VERTEX_ACTION) {\n                const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                if (vertex)\n                    updateVertexByAction(vertex, step.action);\n            } else if (step.actionType === AlgorithmActionType.EDGE_ACTION) {\n                const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                const edge = newState.graph.addVisualizationEdge(vertexFrom, vertexTo, step.oriented, step.weight);\n                updateEdgeByAction(edge, step.action);\n            }\n\n            return newState;\n        case ActionType.CLEAN_GRAPH_SELECTIONS:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            cleanGraphSelections(newState);\n\n            return newState;\n        case ActionType.SET_GRAPH:\n            return {\n                ...state,\n                graph: action.graph\n            };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    graphReducer: reducer,\n    dialogReducer: dialog,\n    algorithmReducer: algorithm\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2at_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plain_graph\":\"PlainGraph_plain_graph__132cd\",\"drawing_area\":\"PlainGraph_drawing_area__poiJd\",\"cell\":\"PlainGraph_cell__2tDfs\",\"cell-blocked\":\"PlainGraph_cell-blocked__13I9p\",\"cell-path\":\"PlainGraph_cell-path__1JSUa\",\"cell-start\":\"PlainGraph_cell-start__2FTb6\",\"cell-finish\":\"PlainGraph_cell-finish__2icJo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2xbQm\",\"menu-sub\":\"Menu_menu-sub__2jhA1\",\"graph-control-buttons\":\"Menu_graph-control-buttons__2CY62\",\"switch\":\"Menu_switch__3Y97k\",\"visualization-control-buttons\":\"Menu_visualization-control-buttons__1OTXW\",\"file-control-buttons\":\"Menu_file-control-buttons__3PmTU\",\"algorithms-list\":\"Menu_algorithms-list__2mwx1\",\"slider\":\"Menu_slider__RA1Ez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__1L6GG\",\"activated\":\"Buttons_activated__EZOmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider-wrapper\":\"Sliders_slider-wrapper__GIw-8\",\"slider-label\":\"Sliders_slider-label__1w08l\",\"slider\":\"Sliders_slider__1gqJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drop-down-list\":\"DropDownLists_drop-down-list__ix94o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch-round-wrapper\":\"ToggleSwitches_switch-round-wrapper__g2bxh\",\"switch-round\":\"ToggleSwitches_switch-round__1bQ1T\",\"slider\":\"ToggleSwitches_slider__Q-bUA\",\"text\":\"ToggleSwitches_text__1sKta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message-box\":\"MessageBox_message-box__2uEgD\",\"invisible\":\"MessageBox_invisible__10Wwp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-dialog\":\"InputDialog_input-dialog__2SLyF\",\"text-input\":\"InputDialog_text-input__2zjdU\",\"button\":\"InputDialog_button__1ZFHJ\",\"hint\":\"InputDialog_hint__1ftkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"TextInputs_text-input__3mPdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info-box\":\"InfoBox_info-box__3t_A2\",\"text\":\"InfoBox_text__sgPCj\",\"invisible\":\"InfoBox_invisible__1un1A\"};"],"sourceRoot":""}