{"version":3,"sources":["algorithms/plain/breadth-first-search.js","components/PlainGraph/PlainGraph.jsx","components/Graph/Vertex/Vertex.jsx","components/Graph/Edge/Edge.jsx","utils/sleep.js","actions/index.js","actions/dialog.js","algorithms/graph/index.js","utils/graphConverter.js","actions/algorithm.js","components/Graph/VisualizationEdge/VisualizationEdge.jsx","components/Graph/Graph.jsx","components/Buttons/Buttons.jsx","components/Sliders/Sliders.jsx","components/DropDownLists/DropDownLists.jsx","components/ToggleSwitches/ToggleSwitches.jsx","algorithms/graph/dfs.js","utils/queue.js","algorithms/graph/bfs.js","algorithms/graph/dijkstra.js","algorithms/graph/prim-mst.js","utils/dsu.js","algorithms/graph/kruskal-mst.js","actions/matrixDialog.js","components/Menu/Menu.jsx","components/MessageBox/MessageBox.jsx","components/TextInputs/TextInputs.jsx","components/Dialogs/InputDialog/InputDialog.jsx","components/InfoBox/InfoBox.jsx","components/Dialogs/MatrixDialog/AdjacencyMatrix.jsx","components/Dialogs/MatrixDialog/MatrixDialog.jsx","components/App.jsx","serviceWorker.js","reducers/dialog.js","reducers/algorithm.js","reducers/matrixDialog.js","reducers/index.js","index.js","components/App.module.scss","components/PlainGraph/PlainGraph.module.scss","components/Menu/Menu.module.scss","components/Buttons/Buttons.module.scss","components/Sliders/Sliders.module.scss","components/DropDownLists/DropDownLists.module.scss","components/ToggleSwitches/ToggleSwitches.module.scss","components/MessageBox/MessageBox.module.scss","components/Dialogs/InputDialog/InputDialog.module.scss","components/TextInputs/TextInputs.module.scss","components/InfoBox/InfoBox.module.scss","components/Dialogs/MatrixDialog/MatrixDialog.module.scss","components/Dialogs/MatrixDialog/AdjacencyMatrix.module.scss"],"names":["algorithm","cells","cellStart","cellFinish","pathStatus","queue","x","y","parent","current","shift","console","log","next","node","minX","minY","maxX","maxY","res","push","neighbours","length","i","findIndex","n","cx","classnames","bind","styles","CellState","Object","freeze","EMPTY","BLOCKED","START","FINISH","PATH","Cell","status","onMouseEnter","onMouseLeave","className","React","Component","Vertex","radius","name","this","state","VertexState","DEFAULT","hint","hintState","VertexHintState","CLEAR","HIGHLIGHTED","PRE_COMPLETED","COMPLETED","VertexComponent","vertex","draggable","onDragStart","onDragEnd","onDragMove","onClick","e","call","target","getChildren","setAttrs","scaleX","scaleY","shadowColor","shadowBlur","shadowOffset","shadowOpacity","moveToTop","handleDragStart","to","duration","shadowOffsetX","shadowOffsetY","handleDragEnd","fill","color","stroke","strokeWidth","vertexBorderWidth","text","fontSize","textColor","width","height","align","verticalAlign","hintColor","Edge","vertexFrom","vertexTo","oriented","weight","_from","_to","EdgeState","_oriented","undefined","WALKED","ERASED","EdgeComponent","edgeComponent","edge","edgeType","points","getEdgePointsForType","EdgeType","NOT_ORIENTED","linePoints","hitStrokeWidth","tension","isWeighted","labelPoints","EdgeLabel","labelRadius","labelBorderWidth","ONE_SIDE_ORIENTED","TWO_SIDE_ORIENTED","LOOP","from","dx","dy","angle","Math","atan2","vertexFromOffset","vertexToOffset","xFrom","cos","yFrom","sin","xTo","yTo","xMiddle","yMiddle","anchorDx","sqrt","anchorDy","xMiddleFirst","sleep","ms","Promise","resolve","setTimeout","ActionType","ADD_VERTEX","ADD_EDGE","REMOVE_VERTEX","REMOVE_EDGE","CHANGE_GRAPH_MODE","SELECT_VERTEX","UNSELECT_VERTEX","SHOW_MESSAGE","CLOSE_MESSAGE","UPDATE_VERTEX_POSITION","INVERT_ORIENTATION","ALGORITHM_STEP","CLEAN_GRAPH_SELECTIONS","SET_GRAPH","changeGraphMode","graphMode","type","currentMessageId","showMessage","message","isAlert","dispatch","a","messageId","showMessageConnector","closeMessage","algorithmStep","step","START_DIALOG_FOR_RESULT","CLOSE_DIALOG","closeDialog","VertexAction","SELECT","UNSELECT","ENTER","EXIT","VertexHintAction","REMOVE","SET","HIGHLIGHT","EdgeAction","WALK","AlgorithmActionType","VERTEX_ACTION","EDGE_ACTION","VERTEX_HINT_ACTION","PreCallAction","NOTHING","SELECT_EDGE","Criteria","WEIGHTED","CONNECTED","getOperationsCount","trace","operationsCount","forEach","t","isChained","edgesListToAdjacencyList","vertices","edges","adjacencyList","isOriented","entries","verticesList","sort","b","edgesListToAdjacencyMatrix","verticesNumbers","v","nameToIndex","number","index","cell","adjacencyMatrix","Array","j","weighted","PRE_CALL","CALL","PAUSE","POP_TRACE_STEP","SET_ALGORITHM","SET_SPEED","SET_IS_ONE_STEP","CLEAR_TRACE","SHOW_STATISTICS","CLEAR_STATISTICS","setIsOneStep","isOneStep","getState","GraphMode","graph","graphReducer","callConnector","algorithmReducer","pause","start","callSuccess","currentVisualizationId","traceStep","popTraceStep","showStatistics","visualizationId","isActive","speed","VisualizationEdgeComponent","REMOVE_VERTEX_OR_EDGE","ALGORITHM_PRE_CALL_SELECT_VERTEX","ALGORITHM_PRE_CALL_SELECT_EDGE","Graph","isArray","Error","_vertices","_edges","_visualizationEdges","_currentName","max","map","splice","filter","findEdge","invertOrientation","newEdges","findVisualizationEdge","GraphComponent","draggedVertex","windowWidth","windowHeight","findIndexOfVertex","props","handleVertexDragStart","setState","updateDraggedVertex","updateVertexPosition","handleVertexDragMove","handleVertexDragEnd","getEdgeType","handleCanvasClick","evt","clientX","clientY","addVertex","selectedVertex","unselectVertex","handleVertexClick","cancelBubble","removeVertex","selectVertex","startDialogForResult","value","addEdge","callAlgorithm","handleEdgeClick","removeEdge","handleResize","window","innerWidth","innerHeight","onresize","key","visualizationEdges","connect","vertexIndex","title","inputPlaceholder","onSubmit","onClose","pattern","onCancel","ButtonComponent","activated","SliderComponent","label","min","onChange","DropDownList","items","item","RoundedToggleSwitch","isChecked","checked","used","preCall","criteria","startTime","performance","now","dfs","action","actionType","toVertex","endTime","statistics","toFixed","Queue","_queue","isEmpty","pop","bfs","d","Number","MAX_SAFE_INTEGER","dijkstra","mstWeight","mst","prim","floor","random","DSU","size","find","dsu","makeSet","union","kruskal","START_MATRIX_DIALOG_FOR_RESULT","CLOSE_MATRIX_DIALOG","closeMatrixDialog","MenuComponent","algorithms","DFS","BFS","Dijkstra","PrimMST","KruskalMST","algorithmPaused","handleAlgorithmChange","clearVisualization","setAlgorithm","startVisualization","remainingAlgorithmSteps","clearTrace","clearStatistics","cleanGraphSelections","isVisualizationActive","continue","stepVisualization","stopVisualization","handleAlgorithmSpeedChange","setSpeed","askForAction","writeToFile","json","JSON","stringify","exportData","escape","anchorElement","document","getElementById","setAttribute","click","askReadFromFile","readFromFile","reader","FileReader","file","files","onload","parse","result","setGraph","readAsText","showAdjacencyMatrix","startMatrixDialog","nextProps","nextState","nextContext","visualizationSpeed","selectedAlgorithm","grid","bounds","cancel","id","style","aria-hidden","href","accept","continueCall","TextInputComponent","placeholder","autoFocus","customStyles","overlay","zIndex","InputDialog","handleChange","validity","valid","submit","preventDefault","submitDialog","cancelDialog","isOpen","onRequestClose","ariaHideApp","dialogReducer","lines","isVisible","isStatisticsShown","line","MatrixCell","topLeft","topRight","bottomLeft","bottomRight","MatrixRow","row","first","last","vertexNumber","AdjacencyMatrix","MatrixDialog","reduce","prev","arr","matrixDialogReducer","submitMatrixDialog","cancelMatrixDialog","App","Menu","Boolean","location","hostname","match","defaultState","dialog","newState","matrixDialog","clone","object","assign","create","getPrototypeOf","unselectSelectedVertex","updateVertexByAction","updateEdgeByAction","updateVertexHintByAction","combineReducers","removeVisualizationEdgeByVertices","addVisualizationEdge","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.c7a47e6b.chunk.js","sourcesContent":["export const algorithm = {\n    name: \"Breadth First Search\",\n    run: function (cells, cellStart, cellFinish, pathStatus) {\n        let node = { x: cellStart.x, y: cellStart.y, parent: null };\n\n        const queue = [node];\n        while (queue.length) {\n            let current = queue.shift();\n            if ((current.x !== cellStart.x) || (current.y !== cellStart.y))\n                cells[current.y][current.x] = pathStatus;\n            if ((current.x === cellFinish.x) && (current.y === cellFinish.y)) {\n                // const path = backtrace(current);\n                // TODO: something\n                return;\n            }\n            console.log(current);\n            const next = neighbours(current, 0, 0, cells[0].length - 1, cells.length - 1);\n            for (let i = 0; i < next.length; ++i)\n                if ((cells[next[i].y][next[i].x] !== pathStatus) && !((next[i].x === cellStart.x) && (next[i].y === cellStart.y)) && (queue.findIndex(n => (n.x === next[i].x) && (n.y === next[i].y)) === -1))\n                    queue.push(next[i]);\n        }\n    }\n};\n\nfunction backtrace(node) {\n    const path = [{x: node.x, y: node.y}];\n    while (node.parent !== null) {\n        node = node.parent;\n        path.push({x: node.x, y: node.y});\n    }\n    return path;\n}\n\nfunction neighbours(node, minX, minY, maxX, maxY) {\n    const res = [];\n    if (node.x < maxX)\n        res.push({ x: node.x + 1, y: node.y, parent: node });\n    if (node.x > minX)\n        res.push({ x: node.x - 1, y: node.y, parent: node });\n    if (node.y < maxY)\n        res.push({ x: node.x, y: node.y + 1, parent: node });\n    if (node.y > minY)\n        res.push({ x: node.x, y: node.y - 1, parent: node });\n    return res;\n}","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./PlainGraph.module.scss\";\nimport { algorithm } from \"../../algorithms/plain/breadth-first-search\";\n\nconst cx = classnames.bind(styles);\n\nconst CellState = Object.freeze({ EMPTY: 0, BLOCKED: 1, START: 2, FINISH: 3, PATH: 4});\n\nconst Cell = ({x, y, status, onMouseEnter, onMouseLeave}) => (\n    <rect x={x} y={y} className={cx(\"cell\", {\n            [`cell-blocked`]: status === CellState.BLOCKED,\n            [`cell-path`]: status === CellState.PATH,\n            [`cell-start`]: status === CellState.START,\n            [`cell-finish`]: status === CellState.FINISH\n          })}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}/>\n);\n\nclass PlainGraph extends React.Component {\n    state = {\n        cells: [],\n        cellSize: 40,\n        rows: 1000 / 40 + 10,\n        columns: 2000 / 40 + 10,\n        isMouseDown: false,\n        previousMouseRow: -1,\n        previousMouseColumn: -1,\n        mouseCellState: -1\n    };\n\n    componentDidMount() {\n        const cellSize = 40;\n        const rows = 1000 / cellSize + 10;\n        const columns = 2000 / cellSize + 10;\n        const cells = [];\n        // const rows = window.innerHeight / cellSize + 10, columns = window.innerWidth / cellSize + 10; // TODO: change on resize\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < columns; ++j) {\n                row.push(CellState.EMPTY);\n            }\n            cells.push(row);\n        }\n        cells[2][2] = CellState.START;\n        cells[2][40] = CellState.FINISH;\n        this.setState({ cells: cells, cellSize: cellSize, rows: rows, columns: columns});\n    }\n\n    invertCellUnderMouse = (event) => {\n        this.setState(oldState => {\n            const x = Math.floor(event.x / this.state.cellSize);\n            const y = Math.floor(event.y / this.state.cellSize);\n            if ((x === oldState.previousMouseColumn) && (y === oldState.previousMouseRow))\n                return oldState;\n            const state = {...oldState};\n\n            const currentCellState = state.cells[y][x];\n            if (currentCellState === state.mouseCellState) {\n                if ((currentCellState === CellState.EMPTY) || (currentCellState === CellState.PATH))\n                    state.cells[y][x] = CellState.BLOCKED;\n                else if (currentCellState === CellState.BLOCKED)\n                    state.cells[y][x] = CellState.EMPTY;\n            }\n            state.previousMouseRow = y;\n            state.previousMouseColumn = x;\n\n            return state;\n        });\n    };\n\n    handleMouseDown = (event) => {\n        algorithm.run(this.state.cells, {x:2,y:2},{x:40,y:2}, CellState.PATH);\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.setState({\n            isMouseDown: true,\n            mouseCellState: this.state.cells\n                [Math.floor(reducedEvent.y / this.state.cellSize)]\n                [Math.floor(reducedEvent.x / this.state.cellSize)]\n        });\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    handleMouseUp = (event) => {\n        this.invertCellUnderMouse({ x: event.clientX, y: event.clientY });\n        this.setState({ isMouseDown: false, previousMouseRow: -1, previousMouseColumn: -1 });\n    };\n\n    handleCellMouseEnter = (event) => {\n        if (!this.state.isMouseDown)\n            return;\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    render() {\n        return (\n            <div className={cx(\"plain_graph\")}>\n                <svg className={cx(\"drawing_area\")}\n                     onMouseDown={e => this.handleMouseDown(e)}\n                     onMouseUp={e => this.handleMouseUp(e)}>\n                    {this.state.cells.map((row, y) =>\n                        row.map((cell, x) =>\n                            <Cell\n                                x={x * this.state.cellSize}\n                                y={y * this.state.cellSize}\n                                status={cell}\n                                key={this.state.columns * y + x}\n                                onMouseEnter={e => this.handleCellMouseEnter(e)}/>\n                            )\n                        )\n                    }\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default PlainGraph;","import { Circle, Group, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Vertex {\n    constructor(x, y, radius, name) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.state = VertexState.DEFAULT;\n        this.name = name;\n        this.hint = \"\";\n        this.hintState = VertexHintState.CLEAR;\n    }\n\n    get color() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'white';\n            case VertexState.HIGHLIGHTED:\n                return 'yellow';\n            case VertexState.PRE_COMPLETED:\n                return '#CCCCCC';\n            case VertexState.COMPLETED:\n                return '#444444';\n            default:\n                return 'white';\n        }\n    }\n\n    get textColor() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'black';\n            case VertexState.HIGHLIGHTED:\n                return 'black';\n            case VertexState.PRE_COMPLETED:\n                return 'black';\n            case VertexState.COMPLETED:\n                return 'white';\n            default:\n                return 'black';\n        }\n    }\n\n    get hintColor() {\n        switch (this.hintState) {\n            case VertexHintState.CLEAR:\n                return '#00000000';\n            case VertexHintState.DEFAULT:\n                return '#ff5f3c';\n            case VertexState.HIGHLIGHTED:\n                return '#f7ff00';\n            default:\n                return '#00000000';\n        }\n    }\n}\n\nconst handleDragStart = (e, call) => {\n    e.target.getChildren()[0].setAttrs({\n        scaleX: 1.1,\n        scaleY: 1.1,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: { x: 10, y: 10 },\n        shadowOpacity: 0.5\n    });\n    e.target.moveToTop();\n\n    call(e);\n};\n\nconst handleDragEnd = (e, call) => {\n    e.target.getChildren()[0].to({\n        duration: 0.25,\n        scaleX: 1,\n        scaleY: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0\n    });\n\n    call(e);\n};\n\nexport const VertexComponent = ({ vertex, draggable, onDragStart, onDragEnd, onDragMove, onClick }) => {\n    const labelWidth = 40, labelHeight = 20;\n    return (\n        <Group\n            draggable={draggable}\n            onDragStart={e => handleDragStart(e, onDragStart)}\n            onDragEnd={e => handleDragEnd(e, onDragEnd)}\n            onDragMove={onDragMove}\n            onClick={onClick}\n            x={vertex.x}\n            y={vertex.y}>\n            <Circle\n                x={0}\n                y={0}\n                radius={vertex.radius}\n                fill={vertex.color}\n                stroke={'black'}\n                shadowBlur={0}\n                strokeWidth={vertexBorderWidth}\n                shadowOpacity={0.5}/>\n            <Text\n                text={vertex.name}\n                x={-labelWidth / 2.}\n                y={-labelHeight / 2.}\n                fontSize={20}\n                fill={vertex.textColor}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n\n            <Text\n                text={vertex.hint}\n                x={-2 * vertex.radius}\n                y={-2 * vertex.radius}\n                fontSize={20}\n                fill={vertex.hintColor}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>);\n};\n\nexport const vertexBorderWidth = 2;\n\nexport const VertexState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, PRE_COMPLETED: 2, COMPLETED: 3 });\nexport const VertexHintState = Object.freeze({ CLEAR: 0, DEFAULT: 1, HIGHLIGHTED: 2 });","import { vertexBorderWidth } from \"../Vertex/Vertex\";\nimport { Arrow, Circle, Group, Line, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Edge {\n    constructor(vertexFrom, vertexTo, oriented, weight) {\n        this._from = vertexFrom;\n        this._to = vertexTo;\n        this.weight = weight;\n        this.state = EdgeState.DEFAULT;\n        this._oriented = oriented;\n    }\n\n    get from() {\n        return this._from;\n    }\n\n    get to() {\n        return this._to;\n    }\n\n    get color() {\n        switch (this.state) {\n            case EdgeState.DEFAULT:\n                return 'black';\n            case EdgeState.HIGHLIGHTED:\n                return '#f7ff00';\n            case EdgeState.WALKED:\n                return '#ff5f3c';\n            case EdgeState.ERASED:\n                return '#ffffff00';\n            default:\n                return 'black';\n        }\n    }\n\n    isWeighted() {\n        return (this.weight !== undefined) && (this.weight !== null);\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n    }\n}\n\nexport const EdgeComponent = ({ edge, edgeType, onClick }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group onClick={onClick}>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeLabel = ({ x, y, text }) => {\n    const labelRadius = 15;\n    const labelHorizontalPadding = 1, labelVerticalPadding = 5;\n    const labelBorderWidth = 0;\n    return (\n        <Group\n            x={x - labelRadius - labelHorizontalPadding - labelBorderWidth}\n            y={y - labelRadius - labelVerticalPadding - labelBorderWidth}\n            width={labelRadius * 2. + 2. * (labelHorizontalPadding + labelBorderWidth)}\n            height={labelRadius * 2. + 2. * (labelVerticalPadding + labelBorderWidth)}>\n            <Circle\n                x={labelRadius + labelHorizontalPadding + labelBorderWidth}\n                y={labelRadius + labelVerticalPadding + labelBorderWidth}\n                radius={labelRadius}\n                fill={'white'}\n                stroke={'black'}\n                strokeWidth={labelBorderWidth}/>\n            <Text\n                x={labelBorderWidth + labelHorizontalPadding}\n                y={labelBorderWidth + labelVerticalPadding}\n                text={text}\n                fontSize={20}\n                width={labelRadius * 2.}\n                height={labelRadius * 2.}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>\n    );\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });\nexport const EdgeState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, ERASED: 2, WALKED: 3 });\n\nexport const getEdgePointsForType = (edge, edgeType) => {\n    const vertexFrom = edge.from;\n    const vertexTo = edge.to;\n    const dx = vertexTo.x - vertexFrom.x;\n    const dy = vertexFrom.y - vertexTo.y;\n    const angle = Math.atan2(dy, dx);\n    const vertexFromOffset = vertexFrom.radius + vertexBorderWidth / 2.;\n    const vertexToOffset = vertexTo.radius + vertexBorderWidth / 2.;\n\n    if ((edgeType === EdgeType.ONE_SIDE_ORIENTED) || (edgeType === EdgeType.NOT_ORIENTED)) {\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle);\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xTo, yTo\n            ],\n            labelPoints: [\n                (xFrom + xTo) / 2.,\n                (yFrom + yTo) / 2.\n            ]\n        };\n    } else if (edgeType === EdgeType.TWO_SIDE_ORIENTED) {\n        const angleOffset = 0.25;\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle + angleOffset);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle + angleOffset);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle - angleOffset);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle - angleOffset);\n\n        const middlePointHeightCoefficient = 1. / 15.;\n        const xMiddle = (xFrom + xTo) / 2. - (yFrom - yTo) * middlePointHeightCoefficient;\n        const yMiddle = (yFrom + yTo) / 2. + (xFrom - xTo) * middlePointHeightCoefficient;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddle, yMiddle,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle,\n                yMiddle\n            ]\n        };\n    } else if (edgeType === EdgeType.LOOP) {\n        const xFrom = vertexFrom.x - vertexFromOffset;\n        const yFrom = vertexFrom.y;\n        const xTo = vertexFrom.x - vertexFromOffset;\n        const yTo = vertexFrom.y;\n\n        const anchorDx = 3. * vertexFromOffset / Math.sqrt(2.);\n        const anchorDy = 1.5 * vertexFromOffset / Math.sqrt(2.);\n        const xMiddleFirst = xFrom - anchorDx;\n        const yMiddleFirst = yFrom - anchorDy;\n        const xMiddle = xMiddleFirst - vertexFromOffset;\n        const yMiddle = yFrom;\n        const xMiddleSecond = xTo - anchorDx;\n        const yMiddleSecond = yTo + anchorDy;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddleFirst, yMiddleFirst,\n                xMiddle, yMiddle,\n                xMiddleSecond, yMiddleSecond,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle, yMiddle\n            ]\n        };\n    }\n};","export function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    ADD_VERTEX: 'ADD_VERTEX',\n    ADD_EDGE: 'ADD_EDGE',\n    REMOVE_VERTEX: 'REMOVE_VERTEX',\n    REMOVE_EDGE: 'REMOVE_EDGE',\n    CHANGE_GRAPH_MODE: 'CHANGE_GRAPH_MODE',\n    SELECT_VERTEX: 'SELECT_VERTEX',\n    UNSELECT_VERTEX: 'UNSELECT_VERTEX',\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    CLOSE_MESSAGE: 'CLOSE_MESSAGE',\n    UPDATE_VERTEX_POSITION: 'UPDATE_VERTEX_POSITION',\n    INVERT_ORIENTATION: 'INVERT_ORIENTATION',\n    ALGORITHM_STEP: 'ALGORITHM_STEP',\n    CLEAN_GRAPH_SELECTIONS: 'CLEAN_GRAPH_SELECTIONS',\n    SET_GRAPH: 'SET_GRAPH'\n});\n\nexport const addVertex = (x, y, radius) => ({\n    type: ActionType.ADD_VERTEX,\n    x,\n    y,\n    radius\n});\n\nexport const addEdge = (vertexFrom, vertexTo, weight) => ({\n    type: ActionType.ADD_EDGE,\n    vertexFrom,\n    vertexTo,\n    weight\n});\n\nexport const removeVertex = (vertex) => ({\n    type: ActionType.REMOVE_VERTEX,\n    vertex\n});\n\nexport const removeEdge = (edge) => ({\n    type: ActionType.REMOVE_EDGE,\n    edge\n});\n\nexport const changeGraphMode = (graphMode) => ({\n    type: ActionType.CHANGE_GRAPH_MODE,\n    graphMode\n});\n\nexport const selectVertex = (vertex) => ({\n    type: ActionType.SELECT_VERTEX,\n    vertex\n});\n\nexport const unselectVertex = (vertex) => ({\n    type: ActionType.UNSELECT_VERTEX,\n    vertex\n});\n\nlet currentMessageId = 0;\n\nexport const showMessage = (message, isAlert = false) => async (dispatch) => {\n    const messageId = ++currentMessageId;\n    dispatch(showMessageConnector(message, isAlert));\n    await sleep(2000);\n    if (messageId === currentMessageId)\n        dispatch(closeMessage());\n};\n\nconst showMessageConnector = (message, isAlert = false) => ({\n    type: ActionType.SHOW_MESSAGE,\n    message,\n    isAlert\n});\n\nexport const closeMessage = () => ({\n    type: ActionType.CLOSE_MESSAGE\n});\n\nexport const updateVertexPosition = (vertexIndex, x, y) => ({\n    type: ActionType.UPDATE_VERTEX_POSITION,\n    vertexIndex,\n    x,\n    y\n});\n\nexport const invertOrientation = () => ({\n    type: ActionType.INVERT_ORIENTATION\n});\n\nexport const algorithmStep = (step) => ({\n    type: ActionType.ALGORITHM_STEP,\n    step\n});\n\nexport const cleanGraphSelections = () => ({\n    type: ActionType.CLEAN_GRAPH_SELECTIONS\n});\n\nexport const setGraph = (graph) => ({\n    type: ActionType.SET_GRAPH,\n    graph\n});","export const ActionType = Object.freeze({\n    START_DIALOG_FOR_RESULT: 'START_DIALOG_FOR_RESULT',\n    CLOSE_DIALOG: 'CLOSE_DIALOG'\n});\n\nexport const startDialogForResult = (title, text, hint, inputPlaceholder, onSubmit, onCancel, pattern = \".*\") => ({\n    type: ActionType.START_DIALOG_FOR_RESULT,\n    title,\n    text,\n    hint,\n    inputPlaceholder,\n    onSubmit,\n    onCancel,\n    pattern\n});\n\nconst closeDialog = () => ({\n   type: ActionType.CLOSE_DIALOG\n});\n\nexport const cancelDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeDialog());\n};\n\nexport const submitDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeDialog());\n};","export const VertexAction = Object.freeze({\n    SELECT: 0,\n    UNSELECT: 1,\n    ENTER: 2,\n    EXIT: 3\n});\n\nexport const VertexHintAction = Object.freeze({\n    REMOVE: 0,\n    SET: 1,\n    HIGHLIGHT: 2\n});\n\nexport const EdgeAction = Object.freeze({\n    WALK: 0,\n    HIGHLIGHT: 1,\n    UNSELECT: 2\n});\n\nexport const AlgorithmActionType = Object.freeze({\n    VERTEX_ACTION: 0,\n    EDGE_ACTION: 1,\n    VERTEX_HINT_ACTION: 2\n});\n\nexport const PreCallAction = Object.freeze({\n    NOTHING: 0,\n    SELECT_VERTEX: 1,\n    SELECT_EDGE: 2\n});\n\nexport const Criteria = Object.freeze({\n    NOTHING: 0,\n    WEIGHTED: 0b1,\n    CONNECTED: 0b10,\n    NOT_ORIENTED: 0b100\n});\n\nexport const getOperationsCount = (trace) => {\n    let operationsCount = 0;\n    trace.forEach((t, i) => {\n        if ((i + 1 === trace.length) || !t.isChained)\n            ++operationsCount;\n    });\n    return operationsCount;\n};","export const edgesListToAdjacencyList = (vertices, edges) => {\n    const adjacencyList = {};\n    vertices.forEach(vertex => adjacencyList[vertex.name] = []);\n    edges.forEach(edge => {\n        adjacencyList[edge.from.name].push({name: edge.to.name, weight: edge.weight});\n        if (!edge.isOriented() && (edge.from !== edge.to))\n            adjacencyList[edge.to.name].push({name: edge.from.name, weight: edge.weight});\n    });\n    for (let [, verticesList] of Object.entries(adjacencyList))\n        verticesList = verticesList.sort((a, b) => a.name - b.name);\n    return adjacencyList;\n};\n\nexport const edgesListToAdjacencyMatrix = (vertices, edges) => {\n    const verticesNumbers = [];\n    vertices.forEach(v => verticesNumbers.push(v.name));\n    verticesNumbers.sort((a, b) => a - b);\n    const nameToIndex = {};\n    verticesNumbers.forEach((number, index) => nameToIndex[number] = index);\n\n    const adjacencyMatrix = new Array(vertices.length);\n    for (let i = 0; i < vertices.length; ++i) {\n        adjacencyMatrix[i] = new Array(vertices.length);\n        for (let j = 0; j < vertices.length; ++j)\n            adjacencyMatrix[i][j] = null;\n    }\n\n    let from, to, cell;\n    edges.forEach(e => {\n        from = nameToIndex[e.from.name];\n        to = nameToIndex[e.to.name];\n        cell = e.weight ? { weighted: true, weight: e.weight } : { weighted : false };\n        adjacencyMatrix[from][to] = cell;\n        if (!e.isOriented())\n            adjacencyMatrix[to][from] = cell;\n    });\n\n    return {adjacencyMatrix, verticesNumbers};\n};","import { algorithmStep, changeGraphMode, closeMessage, showMessage } from \"./index\";\nimport { GraphMode } from \"../components/Graph/Graph\";\nimport { Criteria, PreCallAction } from \"../algorithms/graph\";\nimport { sleep } from \"../utils/sleep\";\nimport { edgesListToAdjacencyList } from \"../utils/graphConverter\";\n\nexport const ActionType = Object.freeze({\n    PRE_CALL: 'PRE_CALL',\n    CALL: 'CALL',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    POP_TRACE_STEP: 'POP_TRACE_STEP',\n    SET_ALGORITHM: 'SET_ALGORITHM',\n    SET_SPEED: 'SET_SPEED',\n    SET_IS_ONE_STEP: 'SET_IS_ONE_STEP',\n    CLEAR_TRACE: 'CLEAR_TRACE',\n    SHOW_STATISTICS: 'SHOW_STATISTICS',\n    CLEAR_STATISTICS: 'CLEAR_STATISTICS'\n});\n\nexport const preCall = (isOneStep = false) => (dispatch, getState) => {\n    dispatch(setIsOneStep(isOneStep));\n\n    const criteria = getState().algorithmReducer.algorithm.criteria;\n    if (criteria & Criteria.WEIGHTED) {\n        for (const edge of getState().graphReducer.graph.edges) {\n            if (!edge.isWeighted()) {\n                dispatch(showMessage(\"Граф должен быть взвешенным!\", true));\n                return;\n            }\n        }\n    }\n    if ((criteria & Criteria.NOT_ORIENTED) && (getState().graphReducer.graph.isOriented())) {\n        dispatch(showMessage(\"Граф должен быть неориентированным!\", true));\n        return;\n    }\n    if ((criteria & Criteria.CONNECTED) && (getState().graphReducer.graph.vertices.length > 0)) {\n        const graph = getState().graphReducer.graph;\n        const vertices = graph.vertices;\n        const edges = graph.edges;\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        const dfs = (v) => {\n            used[v] = true;\n            let to;\n            adjacencyList[v].forEach(toVertex => {\n                to = toVertex.name;\n                if (!used[to]) {\n                    dfs(to);\n                }\n            });\n        };\n        dfs(vertices[0].name);\n\n        for (const v of vertices) {\n            if (!used[v.name]) {\n                dispatch(showMessage(\"Граф должен быть связным!\", true));\n                return;\n            }\n        }\n    }\n\n    const preCall = getState().algorithmReducer.algorithm.preCall;\n    if (preCall === PreCallAction.SELECT_VERTEX) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX));\n        dispatch(showMessage(\"Выберите вершину\"));\n    } else if (preCall === PreCallAction.SELECT_EDGE) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE));\n        dispatch(showMessage(\"Выберите ребро\"));\n    } else if (preCall === PreCallAction.NOTHING) {\n        dispatch(call());\n    }\n};\n\nexport const setSpeed = (speed) => ({\n    type: ActionType.SET_SPEED,\n    speed\n});\n\nexport const setAlgorithm = (algorithm) => ({\n    type: ActionType.SET_ALGORITHM,\n    algorithm\n});\n\nconst setIsOneStep = (isOneStep) => ({\n    type: ActionType.SET_IS_ONE_STEP,\n    isOneStep\n});\n\nexport const call = (vertex, edge) => (dispatch, getState) => {\n    dispatch(closeMessage());\n    dispatch(changeGraphMode(GraphMode.DEFAULT));\n    const graph = getState().graphReducer.graph;\n    dispatch(callConnector(graph, vertex, edge));\n\n    const isOneStep = getState().algorithmReducer.isOneStep;\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nexport const continueCall = (isOneStep = false) => (dispatch) => {\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nconst start = () => ({\n    type: ActionType.START\n});\n\nexport const pause = () => ({\n    type: ActionType.PAUSE\n});\n\nconst callConnector = (graph, vertex, edge) => ({\n    type: ActionType.CALL,\n    graph,\n    vertex,\n    edge\n});\n\nlet currentVisualizationId = 0; // To prevent several visualization 'threads'\n\nconst callSuccess = (isOneStep = false) => async (dispatch, getState) => {\n    if (isOneStep) {\n        let traceStep = {isChained : true};\n        while ((getState().algorithmReducer.trace.length > 0) && traceStep.isChained) {\n            traceStep = getState().algorithmReducer.trace[0];\n            dispatch(algorithmStep(traceStep));\n            dispatch(popTraceStep());\n\n            if (getState().algorithmReducer.trace.length === 0) {\n                dispatch(showStatistics());\n            }\n        }\n        return;\n    }\n\n    const visualizationId = ++currentVisualizationId;\n    let traceStep;\n    while ((getState().algorithmReducer.trace.length > 0) && getState().algorithmReducer.isActive) {\n        traceStep = getState().algorithmReducer.trace[0];\n        dispatch(algorithmStep(traceStep));\n        dispatch(popTraceStep());\n        if ((getState().algorithmReducer.trace.length > 0) && !traceStep.isChained) {\n            await sleep(getState().algorithmReducer.speed);\n            if (currentVisualizationId !== visualizationId)\n                return;\n        }\n    }\n    if (getState().algorithmReducer.isActive) {\n        dispatch(pause());\n        dispatch(showStatistics());\n    }\n};\n\nconst popTraceStep = () => ({\n    type: ActionType.POP_TRACE_STEP\n});\n\nexport const clearTrace = () => ({\n    type: ActionType.CLEAR_TRACE\n});\n\nconst showStatistics = () => ({\n   type: ActionType.SHOW_STATISTICS\n});\n\nexport const clearStatistics = () => ({\n    type: ActionType.CLEAR_STATISTICS\n});","import { Arrow, Group, Line } from \"react-konva\";\nimport React from \"react\";\nimport { EdgeLabel, getEdgePointsForType } from \"../Edge/Edge\";\n\nexport const VisualizationEdgeComponent = ({ edge, edgeType }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Graph.module.scss\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Vertex, VertexComponent } from \"./Vertex/Vertex\";\nimport { Edge, EdgeComponent, EdgeType } from \"./Edge/Edge\";\nimport { connect } from \"react-redux\";\nimport {\n    addEdge,\n    addVertex,\n    removeEdge,\n    removeVertex,\n    selectVertex,\n    unselectVertex,\n    updateVertexPosition\n} from \"../../actions\";\nimport { startDialogForResult } from \"../../actions/dialog\";\nimport { call } from \"../../actions/algorithm\";\nimport { VisualizationEdgeComponent } from \"./VisualizationEdge/VisualizationEdge\";\n\nconst cx = classnames.bind(styles);\n\nexport const vertexRadius = 20;\n\nconst mapStateToProps = state => ({\n    graph: state.graphReducer.graph,\n    graphMode: state.graphReducer.graphMode,\n    selectedVertex: state.graphReducer.selectedVertex\n});\n\nexport const GraphMode = Object.freeze({\n    DEFAULT: 0,\n    ADD_VERTEX: 1,\n    ADD_EDGE: 2,\n    REMOVE_VERTEX_OR_EDGE: 3,\n    ALGORITHM_PRE_CALL_SELECT_VERTEX: 4,\n    ALGORITHM_PRE_CALL_SELECT_EDGE: 5\n});\n\nexport class Graph {\n    constructor(oriented, vertices = null, edges = null) {\n        if (!vertices || !Array.isArray(vertices) || !edges || !Array.isArray(edges)) {\n            this._vertices = [];\n            this._edges = [];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = 0;\n        } else {\n            for (let i = 0; i < vertices.length; ++i) {\n                if ((vertices[i].name < 0) || (vertices[i].name > 999))\n                    throw new Error(\"Invalid vertex name\");\n\n                for (let j = 0; j < vertices.length; ++j) {\n                    if ((i !== j) && (vertices[i].name === vertices[j].name))\n                        throw new Error(\"Two vertices with equal names\");\n                }\n            }\n\n            for (let i = 0; i < edges.length; ++i) {\n                if (edges[i].weight && ((edges[i].weight < 0) || (edges[i].weight > 99)))\n                    throw new Error(\"Invalid edge weight\");\n                if (vertices.findIndex(v => v.name === edges[i].from.name) === -1)\n                    throw new Error(\"Invalid vertex 'from'\");\n                if (vertices.findIndex(v => v.name === edges[i].to.name) === -1)\n                    throw new Error(\"Invalid vertex 'to'\");\n\n                for (let j = 0; j < edges.length; ++j) {\n                    if (i !== j) {\n                        if (oriented) {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name))\n                                throw new Error(\"Multiedges aren't supported\");\n                        } else {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name)\n                                || (edges[i].to.name === edges[j].from.name) && (edges[i].from.name === edges[j].to.name)) {\n                                throw new Error(\"Multiedges aren't supported\");\n                            }\n                        }\n                    }\n                }\n            }\n\n            this._vertices = [...vertices];\n            this._edges = [...edges];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = Math.max(...vertices.map(v => v.name)) + 1;\n        }\n    }\n\n    addVertex(x, y, radius) {\n        const vertex = new Vertex(x, y, radius, this._currentName++);\n        this._vertices.push(vertex);\n        return vertex;\n    }\n\n    removeVertex(vertex) {\n        const index = this._vertices.findIndex(v => v === vertex);\n        if (index !== -1) {\n            this._vertices.splice(index, 1);\n            this._edges = this._edges.filter(edge => (edge.from.name !== vertex.name) && (edge.to.name !== vertex.name));\n        }\n    }\n\n    findEdge(vertexFrom, vertexTo) {\n        if (this._oriented)\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addEdge(vertexFrom, vertexTo, weight) {\n        const i = this.findEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, this._oriented, weight);\n            this._edges.push(edge);\n            return edge;\n        }\n        else {\n            this._edges[i].weight = weight;\n        }\n    }\n\n    removeEdge(edge) {\n        this._edges = this._edges.filter(e => e !== edge);\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n        if (this._oriented)\n            this._edges.forEach(edge => edge.invertOrientation());\n        else {\n            const newEdges = [];\n            this._edges.forEach(edge => {\n                if (newEdges.findIndex(e => (e.from === edge.from) && (e.to === edge.to)\n                    || (e.to === edge.from) && (e.from === edge.to)) === -1) {\n\n                    edge.invertOrientation();\n                    newEdges.push(edge);\n                }\n            });\n            this._edges = newEdges;\n        }\n    }\n\n    findVisualizationEdge(vertexFrom, vertexTo) {\n        return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n    }\n\n    addVisualizationEdge(vertexFrom, vertexTo, oriented, weight) {\n        const i = this.findVisualizationEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, oriented, weight);\n            this._visualizationEdges.push(edge);\n            return edge;\n        }\n        else {\n            this._visualizationEdges[i].weight = weight;\n            return this._visualizationEdges[i];\n        }\n    }\n\n    removeVisualizationEdge(edge) {\n        this._visualizationEdges = this._visualizationEdges.filter(e => e !== edge);\n    }\n\n    removeVisualizationEdgeByVertices(vertexFrom, vertexTo, oriented) {\n        if (oriented)\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                (e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)\n            );\n        else\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                ((e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)) &&\n                ((e.to.name !== vertexFrom.name) || (e.from.name !== vertexTo.name))\n            );\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    get visualizationEdges() {\n        return this._visualizationEdges;\n    }\n\n    set visualizationEdges(edges) {\n        this._visualizationEdges = edges;\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n}\n\nclass GraphComponent extends React.Component {\n    state = {\n        draggedVertex: undefined,\n        windowWidth: 700,\n        windowHeight: 700\n    };\n\n    componentDidMount() {\n        const handleResize = () => {\n            this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n        };\n        window.onresize = handleResize;\n        handleResize();\n    }\n\n    findIndexOfVertex = (vertex) => {\n        return this.props.graph.vertices.findIndex(v => v === vertex);\n    };\n\n    handleVertexDragStart = (e, vertex) => {\n        const i = this.findIndexOfVertex(vertex);\n        this.setState({ draggedVertex: (i !== -1 ? i : undefined) });\n    };\n\n    updateDraggedVertex = (x, y) => {\n        const vertex = this.state.draggedVertex;\n        if (vertex !== undefined)\n            this.props.updateVertexPosition(vertex, x, y);\n    };\n\n    handleVertexDragMove = e => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n    };\n\n    handleVertexDragEnd = (e, vertex) => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n        this.setState({ draggedVertex: undefined });\n    };\n\n    getEdgeType = edge => {\n        const vertexFrom = edge.from, vertexTo = edge.to;\n\n        if (vertexTo === vertexFrom)\n            return EdgeType.LOOP;\n        else if (!edge.isOriented())\n            return EdgeType.NOT_ORIENTED;\n        else if ((this.props.graph.edges.findIndex(e => (e.from === vertexTo) && (e.to === vertexFrom)) !== -1)\n                && (this.props.graph.edges.findIndex(e => (e.to === vertexTo) && (e.from === vertexFrom)) !== -1))\n            return EdgeType.TWO_SIDE_ORIENTED;\n        else\n            return EdgeType.ONE_SIDE_ORIENTED;\n    };\n\n    handleCanvasClick = e => {\n        const x = e.evt.clientX, y = e.evt.clientY;\n\n        if (this.props.graphMode === GraphMode.ADD_VERTEX)\n            this.props.addVertex(x, y, vertexRadius);\n        else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            if (this.props.selectedVertex !== undefined) {\n                this.props.unselectVertex();\n            }\n        }\n    };\n\n    handleVertexClick = (e, vertex) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeVertex(vertex);\n        } else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            e.cancelBubble = true;\n\n            if (this.props.selectedVertex === undefined) {\n                this.props.selectVertex(vertex);\n            }\n            else {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    \"\",\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        this.props.addEdge(this.props.selectedVertex, vertex, value);\n                        this.props.unselectVertex();\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX) {\n            e.cancelBubble = true;\n\n            this.props.callAlgorithm(vertex, null);\n        }\n    };\n\n    handleEdgeClick = (e, edge) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeEdge(edge);\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE) {\n            e.cancelBubble = true;\n            this.props.callAlgorithm(null, edge);\n        }\n    };\n\n    render() {\n        return (\n            <Stage onClick={this.handleCanvasClick} width={this.state.windowWidth} height={this.state.windowHeight}>\n                <Layer>\n                    <Rect fill={'white'} x={0} y={0} width={this.state.windowWidth} height={this.state.windowHeight}/>\n                    {\n                        this.props.graph.edges.map((edge, index) =>\n                            <EdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}\n                                onClick={(e) => this.handleEdgeClick(e, edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.visualizationEdges.map((edge, index) =>\n                            <VisualizationEdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.vertices.map((vertex, index) =>\n                            <VertexComponent\n                                key={index}\n                                vertex={vertex}\n                                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                                onClick={(e) => this.handleVertexClick(e, vertex)}\n                                onDragStart={e => this.handleVertexDragStart(e, vertex)}\n                                onDragEnd={e => this.handleVertexDragEnd(e, vertex)}\n                                onDragMove={e => this.handleVertexDragMove(e, vertex)}/>\n                        )\n                    }\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    addVertex: (x, y, radius) => dispatch(addVertex(x, y, radius)),\n    addEdge: (vertexFrom, vertexTo, radius) => dispatch(addEdge(vertexFrom, vertexTo, radius)),\n    removeVertex: (vertex) => dispatch(removeVertex(vertex)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    updateVertexPosition: (vertexIndex, x, y) => dispatch(updateVertexPosition(vertexIndex, x, y)),\n    selectVertex: (vertex) => dispatch(selectVertex(vertex)),\n    unselectVertex: (vertex) => dispatch(unselectVertex(vertex)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern)),\n    callAlgorithm: (vertex, edge) => dispatch(call(vertex, edge))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Buttons.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const ButtonComponent = ({ text, type = \"button\", onClick, activated, className }) => {\n    return (\n        <button type={type} className={cx(\"button\", className, {[`activated`]: activated})} onClick={onClick}>\n            {text}\n        </button>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Sliders.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const SliderComponent = ({ label, value, min, max, onChange }) => {\n    return (\n        <div className={cx(\"slider-wrapper\")}>\n            <div className={cx(\"slider-label\")}>{label}</div>\n            <input\n                type={\"range\"}\n                className={cx(\"slider\")}\n                value={value}\n                min={min}\n                max={max}\n                onChange={onChange}/>\n        </div>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./DropDownLists.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const DropDownList = ({ items, onChange }) => {\n    return (\n        <select className={cx(\"drop-down-list\")} onChange={onChange}>\n            {items.map((item, index) => <option key={index} value={index}>{item}</option>)}\n        </select>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./ToggleSwitches.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const RoundedToggleSwitch = ({ text, onChange, className, isChecked }) => {\n    return (\n        <div className={cx(\"switch-round-wrapper\", className)}>\n            <label className={cx(\"switch-round\")}>\n                <input type={\"checkbox\"} onChange={onChange} checked={isChecked}/>\n                <span className={cx(\"slider\")}/>\n            </label>\n            <span className={cx(\"text\")}>{text}</span>\n        </div>\n    );\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList);\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nexport default {\n    name: \"Поиск в глубину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        dfs(start.name, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export class Queue {\n    constructor() {\n        this._queue = [];\n    }\n\n    get length() {\n        return this._queue.length;\n    }\n\n    isEmpty() {\n        return this._queue.length === 0;\n    }\n\n    push(value) {\n        this._queue.push(value);\n    }\n\n    pop() {\n        // TODO: O(N) -> O(1)\n        return this._queue.shift();\n    }\n\n    peek() {\n        return this._queue[0];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Поиск в ширину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        bfs(start.name, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst dijkstra = (start, vertices, adjacencyList, used, trace) => {\n    const d = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (d[v] + weight < d[to]) {\n                d[to] = d[v] + weight;\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Алгоритм Дейкстры\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.WEIGHTED,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        dijkstra(start.name, vertices.map(v => v.name), adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst prim = (start, vertices, adjacencyList, used, trace) => {\n    const d = {};\n    const mst = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        mst[v] = null;\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (weight < d[to]) {\n                d[to] = weight;\n                if (mst[to] !== null) {\n                    trace.push({ from: mst[to], to, oriented: false, weight, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: false });\n                }\n                mst[to] = v;\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n    let mstWeight = 0;\n    for (const v in d)\n        mstWeight += d[v];\n    return mstWeight;\n};\n\nexport default {\n    name: \"Алгоритм Прима\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const start = vertices[Math.floor(Math.random() * vertices.length)];\n        const mstWeight = prim(start.name, vertices.map(v => v.name), adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export class DSU {\n    constructor() {\n        this.parent = {};\n        this.size = {};\n    }\n\n    makeSet(x) {\n        this.parent[x] = x;\n        this.size[x] = 1;\n    }\n\n    find(x) {\n        if (x === this.parent[x])\n            return x;\n        this.parent[x] = this.find(this.parent[x]);\n        return this.parent[x];\n    }\n\n    union(x, y) {\n        x = this.find(x);\n        y = this.find(y);\n        if (x !== y)\n            if (this.size[x] < this.size[y])\n                [x, y] = [y, x];\n            this.parent[y] = x;\n            this.size[x] += this.size[y];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction } from \"./index\";\nimport { DSU } from \"../../utils/dsu\";\n\nconst kruskal = (vertices, edges, trace) => {\n    const dsu = new DSU();\n    vertices.forEach(v => dsu.makeSet(v.name));\n    edges.sort((a, b) => a.weight - b.weight);\n\n    let mstWeight = 0;\n    let from, to, weight;\n    edges.forEach(e => {\n        from = e.from.name;\n        to = e.to.name;\n        weight = Number(e.weight);\n        trace.push({ from, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n        if (dsu.find(from) !== dsu.find(to)) {\n            mstWeight += weight;\n            dsu.union(from, to);\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else {\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n\n    return mstWeight;\n};\n\nexport default {\n    name: \"Алгоритм Краскала\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const mstWeight = kruskal(vertices, edges, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export const ActionType = Object.freeze({\n    START_MATRIX_DIALOG_FOR_RESULT: 'START_MATRIX_DIALOG_FOR_RESULT',\n    CLOSE_MATRIX_DIALOG: 'CLOSE_MATRIX_DIALOG'\n});\n\nexport const startMatrixDialogForResult = () => ({\n    type: ActionType.START_MATRIX_DIALOG_FOR_RESULT\n});\n\nconst closeMatrixDialog = () => ({\n   type: ActionType.CLOSE_MATRIX_DIALOG\n});\n\nexport const cancelMatrixDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeMatrixDialog());\n};\n\nexport const submitMatrixDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeMatrixDialog());\n};","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Menu.module.scss\";\nimport Draggable from 'react-draggable';\nimport { ButtonComponent } from \"../Buttons/Buttons\";\nimport { SliderComponent } from \"../Sliders/Sliders\";\nimport { DropDownList } from \"../DropDownLists/DropDownLists\";\nimport {\n    changeGraphMode,\n    cleanGraphSelections,\n    closeMessage,\n    invertOrientation,\n    setGraph,\n    showMessage\n} from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { Graph, GraphMode, vertexRadius } from \"../Graph/Graph\";\nimport { RoundedToggleSwitch } from \"../ToggleSwitches/ToggleSwitches\";\nimport {\n    call,\n    clearStatistics,\n    clearTrace,\n    continueCall,\n    pause,\n    preCall,\n    setAlgorithm,\n    setSpeed\n} from \"../../actions/algorithm\";\nimport DFS from \"../../algorithms/graph/dfs\"\nimport BFS from \"../../algorithms/graph/bfs\"\nimport Dijkstra from \"../../algorithms/graph/dijkstra\"\nimport PrimMST from \"../../algorithms/graph/prim-mst\"\nimport KruskalMST from \"../../algorithms/graph/kruskal-mst\"\nimport { Vertex } from \"../Graph/Vertex/Vertex\";\nimport { Edge } from \"../Graph/Edge/Edge\";\nimport { startMatrixDialogForResult } from \"../../actions/matrixDialog\";\n\nconst cx = classnames.bind(styles);\n\nconst minAlgorithmSpeed = 0;\nconst maxAlgorithmSpeed = 1000;\n\nconst mapStateToProps = state => ({\n    graphMode: state.graphReducer.graphMode,\n    isOriented: state.graphReducer.graph.isOriented(),\n    isVisualizationActive: state.algorithmReducer.isActive,\n    visualizationSpeed: state.algorithmReducer.speed,\n    selectedAlgorithm: state.algorithmReducer.algorithm,\n    remainingAlgorithmSteps: state.algorithmReducer.trace.length,\n    graph: state.graphReducer.graph\n});\n\nclass MenuComponent extends React.Component {\n    state = {\n        algorithms: [DFS, BFS, Dijkstra, PrimMST, KruskalMST],\n        algorithmPaused: false\n    };\n\n    componentDidMount() {\n        this.props.setAlgorithm(this.state.algorithms[0]);\n        this.props.setSpeed((minAlgorithmSpeed + maxAlgorithmSpeed) / 2);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (nextProps.graphMode !== this.props.graphMode)\n            return true;\n        if (nextProps.isOriented !== this.props.isOriented)\n            return true;\n        if (nextProps.isVisualizationActive !== this.props.isVisualizationActive)\n            return true;\n        if (nextProps.visualizationSpeed !== this.props.visualizationSpeed)\n            return true;\n        if (nextProps.selectedAlgorithm !== this.props.selectedAlgorithm)\n            return true;\n        if (nextProps.remainingAlgorithmSteps !== this.props.remainingAlgorithmSteps)\n            return true;\n        return false;\n    }\n\n    handleAlgorithmChange = e => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n\n        this.props.setAlgorithm(this.state.algorithms[e.target.value]);\n    };\n\n    startVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.clearTrace();\n            this.props.clearStatistics();\n            this.props.cleanGraphSelections();\n            this.props.preCall();\n        } else if (this.props.isVisualizationActive) {\n            this.props.pause();\n            this.setState({ algorithmPaused: true });\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue();\n        }\n    };\n\n    stepVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.clearTrace();\n            this.props.clearStatistics();\n            this.props.cleanGraphSelections();\n            this.props.preCall(true);\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue(true);\n        }\n    };\n\n    stopVisualization = () => {\n        this.clearVisualization();\n        this.props.closeMessage();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n    };\n\n    handleAlgorithmSpeedChange = e => {\n        this.props.setSpeed(maxAlgorithmSpeed - e.target.value);\n    };\n\n    askForAction = (message, graphMode) => {\n        this.clearVisualization();\n\n        this.props.showMessage(message);\n        this.props.changeGraphMode(graphMode);\n    };\n\n    closeMessage = () => {\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n    };\n\n    invertOrientation = () => {\n        this.clearVisualization();\n\n        this.props.invertOrientation();\n    };\n\n    clearVisualization = () => {\n        this.props.pause();\n        this.setState({ algorithmPaused: false });\n        this.props.cleanGraphSelections();\n        this.props.clearTrace();\n        this.props.clearStatistics();\n    };\n\n    writeToFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        const json = JSON.stringify({\n            vertices: this.props.graph.vertices.map(v => ({\n                x: v.x,\n                y: v.y,\n                name: v.name\n            })),\n            edges: this.props.graph.edges.map(e => ({\n                from: e.from.name,\n                to: e.to.name,\n                weight: e.weight\n            })),\n            oriented: this.props.isOriented\n        });\n\n        const exportData = \"data:text/json;charset=utf-8,\" + escape(json);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"graph.json\");\n        anchorElement.click();\n    };\n\n    askReadFromFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        document.getElementById(\"fileLoad\").click();\n    };\n\n    readFromFile = (e) => {\n        const reader = new FileReader();\n        const file = e.target.files[0];\n\n        reader.onload = (e) => {\n            try {\n                const json = JSON.parse(e.target.result);\n\n                const oriented = json.oriented;\n                const vertices = json.vertices.map(v => new Vertex(v.x, v.y, vertexRadius, v.name));\n                const edges = json.edges.map(e =>\n                    new Edge(\n                        vertices.find(v => v.name === e.from),\n                        vertices.find(v => v.name === e.to),\n                        oriented,\n                        e.weight\n                    )\n                );\n\n                const graph = new Graph(oriented, vertices, edges);\n\n                if (oriented !== this.props.isOriented)\n                    this.invertOrientation();\n                this.props.setGraph(graph);\n            } catch (e) {\n                this.props.showMessage(\"Некорректный формат файла\");\n            }\n        };\n\n        reader.readAsText(file);\n        document.getElementById(\"fileLoad\").value = null;\n    };\n\n    showAdjacencyMatrix = () => {\n        this.props.startMatrixDialog();\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"} cancel={[\"button\", \"input\", \"select\"]}>\n                <div className={cx(\"menu\")}>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"graph-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Режим просмотра\"} // TODO: Find proper name\n                                onClick={() => this.closeMessage()}\n                                activated={this.props.graphMode === GraphMode.DEFAULT}/>\n                            <ButtonComponent\n                                text={\"Добавить вершину\"}\n                                onClick={() => this.askForAction(\"Выберите точку для добавления вершины\", GraphMode.ADD_VERTEX)}\n                                activated={this.props.graphMode === GraphMode.ADD_VERTEX}/>\n                            <ButtonComponent\n                                text={\"Добавить ребро\"}\n                                onClick={() => this.askForAction(\"Выберите вершины, которые нужно соединить ребром\", GraphMode.ADD_EDGE)}\n                                activated={this.props.graphMode === GraphMode.ADD_EDGE}/>\n                            <ButtonComponent\n                                text={\"Удалить вершину/ребро\"}\n                                onClick={() => this.askForAction(\"Выберите объект для удаления\", GraphMode.REMOVE_VERTEX_OR_EDGE)}\n                                activated={this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE}/>\n                        </div>\n                        <RoundedToggleSwitch\n                            className={cx(\"switch\")}\n                            text={\"Ориентированный?\"}\n                            onChange={() => this.invertOrientation()}\n                            isChecked={this.props.isOriented}/>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"algorithms-list\")}>\n                            <DropDownList\n                                items={this.state.algorithms.map(a => a.name)}\n                                onChange={this.handleAlgorithmChange}/>\n                        </div>\n                        <div className={cx(\"slider\")}>\n                            <SliderComponent\n                                label={\"Скорость анимации\"}\n                                value={maxAlgorithmSpeed - this.props.visualizationSpeed}\n                                min={minAlgorithmSpeed}\n                                max={maxAlgorithmSpeed}\n                                onChange={this.handleAlgorithmSpeedChange}/>\n                        </div>\n                        <div className={cx(\"visualization-control-buttons\")}>\n                            <ButtonComponent\n                                text={this.state.algorithmPaused ? \"Далее\" : (this.props.isVisualizationActive ? \"Пауза\" : \"Старт\")}\n                                onClick={this.startVisualization}/>\n                            <ButtonComponent text={\"Шаг\"} onClick={this.stepVisualization}/>\n                            <ButtonComponent text={\"Стоп\"} onClick={this.stopVisualization}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"file-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Сохранить\"}\n                                onClick={() => this.writeToFile()}\n                                activated={false}/>\n                            <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save graph</a>\n\n                            <ButtonComponent\n                                text={\"Загрузить\"}\n                                onClick={() => this.askReadFromFile()}\n                                activated={false}/>\n                            <input id=\"fileLoad\" type=\"file\" accept=\".json\" style={{\"display\": \"none\"}} onChange={(e) => this.readFromFile(e)}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"matrix-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Матрица смежности\"}\n                                onClick={() => this.showAdjacencyMatrix()}\n                                activated={false}/>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeGraphMode: (graphMode) => dispatch(changeGraphMode(graphMode)),\n    showMessage: (message) => dispatch(showMessage(message)),\n    closeMessage: () => dispatch(closeMessage()),\n    invertOrientation: () => dispatch(invertOrientation()),\n    setAlgorithm: (algorithm) => dispatch(setAlgorithm(algorithm)),\n    setSpeed: (speed) => dispatch(setSpeed(speed)),\n    preCall: (isOneStep) => dispatch(preCall(isOneStep)),\n    call: () => dispatch(call()),\n    pause: () => dispatch(pause()),\n    continue: (isOneStep) => dispatch(continueCall(isOneStep)),\n    cleanGraphSelections: () => dispatch(cleanGraphSelections()),\n    clearTrace: () => dispatch(clearTrace()),\n    clearStatistics: () => dispatch(clearStatistics()),\n    setGraph: (graph) => dispatch(setGraph(graph)),\n    startMatrixDialog: () => dispatch(startMatrixDialogForResult())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MessageBox.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message,\n    isAlert: state.graphReducer.isAlert\n});\n\nconst MessageBox = ({ message, isAlert }) => {\n    return (\n        <div className={cx(\"message-box\", {[`invisible`]: message === undefined}, {[`alert`]: isAlert})}>\n            {message}\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(MessageBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./TextInputs.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const TextInputComponent = ({ value, placeholder, onChange, pattern, className, autoFocus = false }) => {\n    return (\n        <input\n            className={cx(\"text-input\", className)}\n            type=\"text\"\n            pattern={pattern}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}\n            autoFocus={autoFocus}/>\n    );\n};","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InputDialog.module.scss\";\nimport { cancelDialog, submitDialog } from \"../../../actions/dialog\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { TextInputComponent } from \"../../TextInputs/TextInputs\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.dialogReducer.isOpen,\n    title: state.dialogReducer.title,\n    text: state.dialogReducer.text,\n    hint: state.dialogReducer.hint,\n    inputPlaceholder: state.dialogReducer.inputPlaceholder,\n    pattern: state.dialogReducer.pattern,\n    onSubmit: state.dialogReducer.onSubmit,\n    onCancel: state.dialogReducer.onCancel\n});\n\nclass InputDialog extends React.Component {\n    state = {\n        value: \"\"\n    };\n\n    handleChange = (e) => {\n        if (e.target.validity.valid)\n            this.setState({ value: e.target.value });\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n        this.setState({ value: \"\" });\n        this.props.submitDialog(this.props.onSubmit, this.state.value);\n    };\n\n    cancel = () => {\n        this.setState({ value: \"\" });\n        this.props.cancelDialog(this.props.onCancel);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => {\n                    this.setState({ value: \"\" });\n                    this.props.cancelDialog(this.props.onCancel);\n                }}\n                ariaHideApp={false}\n                className={cx(\"input-dialog\")}\n                style={customStyles}>\n\n                <h2>{this.props.title}</h2>\n                <div>{this.props.text}</div>\n                <form onSubmit={(e) => this.submit(e)}>\n                    <TextInputComponent\n                        autoFocus={true}\n                        className={cx(\"text-input\")}\n                        placeholder={this.props.inputPlaceholder}\n                        pattern={this.props.pattern}\n                        onChange={this.handleChange}\n                        value={this.state.value}/>\n\n                    <ButtonComponent\n                        type={\"submit\"}\n                        className={cx(\"button\")}\n                        text={\"Ок\"}\n                        onClick={(e) => this.submit(e)}/>\n                    <ButtonComponent\n                        className={cx(\"button\")}\n                        text={\"Отмена\"}\n                        onClick={() => this.cancel()}/>\n                </form>\n\n                <div className={cx(\"hint\")}>{this.props.hint}</div>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputDialog);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InfoBox.module.scss\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    lines: state.algorithmReducer.statistics,\n    isVisible: state.algorithmReducer.isStatisticsShown\n});\n\nconst InfoBox = ({ lines, isVisible }) => {\n    return (\n        <div className={cx(\"info-box\", {[`invisible`]: !(isVisible && Array.isArray(lines) && lines.length)})}>\n            {lines.map((line, index) => <div className={cx(\"text\")} key={index}>{line}</div>)}\n        </div>\n    );\n};\n\nInfoBox.propTypes = {\n    lines: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.symbol,\n        PropTypes.bool\n    ])),\n    isVisible: PropTypes.bool\n};\n\nexport default connect(mapStateToProps)(InfoBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./AdjacencyMatrix.module.scss\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\n\nconst cx = classnames.bind(styles);\n\nconst MatrixCell = ({ cell, topLeft, topRight, bottomLeft, bottomRight }) => {\n    return (\n        <div className={cx(\"matrix-cell\", {[`empty`]: !cell},\n            {[`non-weighted`]: cell && !cell.weighted},\n            {[`top-left-cell`]: topLeft},\n            {[`top-right-cell`]: topRight},\n            {[`bottom-left-cell`]: bottomLeft},\n            {[`bottom-right-cell`]: bottomRight})}>\n            {cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"}\n        </div>\n    );\n};\n\nconst MatrixRow = ({ row, first, last, vertexNumber }) => {\n    return (\n        <div className={cx(\"matrix-row\")}>\n            <div className={cx(\"label-cell\")}>{vertexNumber}</div>\n            {row.map((cell, index) =>\n                <MatrixCell\n                    cell={cell}\n                    topLeft={(index === 0) && first}\n                    topRight={(index + 1 === row.length) && first}\n                    bottomLeft={(index === 0) && last}\n                    bottomRight={(index + 1 === row.length) && last}/>)\n            }\n        </div>\n    );\n};\n\nconst AdjacencyMatrix = ({ graph }) => {\n    const {adjacencyMatrix, verticesNumbers} = edgesListToAdjacencyMatrix(graph.vertices, graph.edges);\n    return (\n        <div className={cx(\"matrix\")}>\n            <div className={cx(\"label-cell\")}>{\" \"}</div>\n            {verticesNumbers.map(v => <div className={cx(\"label-cell\")}>{v}</div>)}\n            {adjacencyMatrix.map((row, index) =>\n                <MatrixRow\n                    row={row}\n                    first={index === 0}\n                    last={index + 1 === graph.vertices.length}\n                    vertexNumber={verticesNumbers[index]}/>)\n            }\n        </div>\n    );\n};\n\nexport default AdjacencyMatrix;","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MatrixDialog.module.scss\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\nimport { cancelMatrixDialog, submitMatrixDialog } from \"../../../actions/matrixDialog\";\nimport AdjacencyMatrix from \"./AdjacencyMatrix\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.matrixDialogReducer.isOpen,\n    graph: state.graphReducer.graph\n});\n\nclass MatrixDialog extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (!this.props.isOpen && !nextProps.isOpen)\n            return false;\n        return true;\n    }\n\n    writeToFile = () => {\n        let {adjacencyMatrix} = edgesListToAdjacencyMatrix(this.props.graph.vertices, this.props.graph.edges);\n\n        adjacencyMatrix = adjacencyMatrix.map(row => row.map(cell => cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"));\n        adjacencyMatrix = adjacencyMatrix.reduce((prev, arr) => prev + arr.reduce((line, cell) => line + cell + \" \", \"\") + \"\\n\", \"\");\n\n        const exportData = \"data:text/plain;charset=utf-8,\" + escape(adjacencyMatrix);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"adjacencyMatrix.txt\");\n        anchorElement.click();\n    };\n\n    cancel = () => {\n        this.props.cancelDialog(null);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => this.cancel()}\n                ariaHideApp={false}\n                className={cx(\"matrix-dialog\")}\n                style={customStyles}>\n\n                <AdjacencyMatrix graph={this.props.graph}/>\n\n                <ButtonComponent\n                    type={\"submit\"}\n                    className={cx(\"button\")}\n                    text={\"Сохранить в файл\"}\n                    onClick={() => this.writeToFile()}/>\n                <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save matrix</a>\n\n                <ButtonComponent\n                    className={cx(\"button\")}\n                    text={\"Закрыть\"}\n                    onClick={() => this.cancel()}/>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitMatrixDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelMatrixDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatrixDialog);","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./App.module.scss\";\nimport PlainGraph from \"./PlainGraph/PlainGraph\";\nimport GraphComponent from \"./Graph/Graph\";\nimport MenuComponent from \"./Menu/Menu\";\nimport MessageBox from \"./MessageBox/MessageBox\";\nimport InputDialog from \"./Dialogs/InputDialog/InputDialog\";\nimport InfoBox from \"./InfoBox/InfoBox\";\nimport MatrixDialog from \"./Dialogs/MatrixDialog/MatrixDialog\";\n\nconst cx = classnames.bind(styles);\n\nconst App = () => (\n    <div className={cx(\"app\")}>\n        <MenuComponent/>\n        <GraphComponent/>\n        <MessageBox/>\n        <InfoBox/>\n        <InputDialog/>\n        <MatrixDialog/>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionType } from \"../actions/dialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false,\n    title: \"\",\n    text: \"\",\n    hint: \"\",\n    inputPlaceholder: \"\",\n    onSubmit: null,\n    onClose: null,\n    pattern: \".*\"\n};\n\nconst dialog = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.START_DIALOG_FOR_RESULT:\n            newState = {\n                ...state,\n                isOpen: true,\n                title: action.title,\n                text: action.text,\n                hint: action.hint,\n                inputPlaceholder: action.inputPlaceholder,\n                pattern: action.pattern\n            };\n\n            newState.onSubmit = (value) => {\n                const onSubmit = action.onSubmit;\n                if (onSubmit)\n                    onSubmit(value);\n            };\n            newState.onCancel = () => {\n                const onCancel = action.onCancel;\n                if (onCancel)\n                    onCancel();\n            };\n\n            return newState;\n        case ActionType.CLOSE_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default dialog;","import { ActionType } from \"../actions/algorithm\";\nimport React from \"react\";\nimport { PreCallAction } from \"../algorithms/graph/index\";\n\nconst defaultState = {\n    trace: [],\n    isActive: false,\n    algorithm: null,\n    speed: 1000,\n    isOneStep: false,\n    statistics: [],\n    isStatisticsShown: false\n};\n\nconst algorithm = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.CALL:\n            newState = {\n                ...state\n            };\n\n            const preCall = state.algorithm.preCall;\n            const vertices = action.graph.vertices;\n            const edges = action.graph.edges;\n            let result;\n            if (preCall === PreCallAction.SELECT_VERTEX) {\n                result = state.algorithm.call(vertices, edges, action.vertex);\n            } else if (preCall === PreCallAction.SELECT_EDGE) {\n                result = state.algorithm.call(vertices, edges, action.edge);\n            } else if (preCall === PreCallAction.NOTHING) {\n                result = state.algorithm.call(vertices, edges);\n            }\n            newState.trace = result.trace;\n            newState.statistics = result.statistics;\n\n            return newState;\n        case ActionType.POP_TRACE_STEP:\n            newState = {\n                ...state,\n                trace: [...state.trace]\n            };\n\n            newState.trace.shift();\n\n            return newState;\n        case ActionType.START:\n            return {\n                ...state,\n                isActive: true\n            };\n        case ActionType.PAUSE:\n            return {\n                ...state,\n                isActive: false\n            };\n        case ActionType.SET_ALGORITHM:\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        case ActionType.SET_SPEED:\n            return {\n                ...state,\n                speed: action.speed\n            };\n        case ActionType.SET_IS_ONE_STEP:\n            return {\n                ...state,\n                isOneStep: action.isOneStep\n            };\n        case ActionType.CLEAR_TRACE:\n            return {\n                ...state,\n                trace: []\n            };\n        case ActionType.SHOW_STATISTICS:\n            return {\n                ...state,\n                isStatisticsShown: true\n            };\n        case ActionType.CLEAR_STATISTICS:\n            return {\n                ...state,\n                statistics: [],\n                isStatisticsShown: false\n            };\n        default:\n            return state;\n    }\n};\n\nexport default algorithm;","import { ActionType } from \"../actions/matrixDialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false\n};\n\nconst matrixDialog = (state = defaultState, action) => {\n    switch (action.type) {\n        case ActionType.START_MATRIX_DIALOG_FOR_RESULT:\n            return {\n                ...state,\n                isOpen: true\n            };\n        case ActionType.CLOSE_MATRIX_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default matrixDialog;","import { Graph, GraphMode } from \"../components/Graph/Graph\";\nimport { ActionType } from \"../actions\";\nimport { VertexHintState, VertexState } from \"../components/Graph/Vertex/Vertex\";\nimport { combineReducers } from \"redux\";\nimport dialog from \"./dialog\";\nimport algorithm from \"./algorithm\";\nimport matrixDialog from \"./matrixDialog\";\nimport { AlgorithmActionType, EdgeAction, VertexAction, VertexHintAction } from \"../algorithms/graph\";\nimport { EdgeState } from \"../components/Graph/Edge/Edge\";\n\nconst defaultState = {\n    graph: new Graph(false),\n    message: undefined,\n    isAlert: false,\n    graphMode: GraphMode.DEFAULT,\n    selectedVertex: undefined // For 'ADD_EDGE' // TODO: Do 'ADD_EDGE' in a cleaner way\n};\n\nconst clone = object => {\n    return Object.assign( Object.create( Object.getPrototypeOf(object)), object);\n};\n\nconst unselectSelectedVertex = (state) => {\n    if (state.selectedVertex !== undefined) {\n        const i = state.graph.vertices.findIndex(v => v === state.selectedVertex);\n        if (i !== -1)\n            state.graph.vertices[i].state = VertexState.DEFAULT;\n        state.selectedVertex = undefined;\n    }\n};\n\nconst updateVertexByAction = (vertex, action) => {\n    switch (action) {\n        case VertexAction.SELECT:\n            vertex.state = VertexState.HIGHLIGHTED;\n            break;\n        case VertexAction.ENTER:\n            vertex.state = VertexState.PRE_COMPLETED;\n            break;\n        case VertexAction.EXIT:\n            vertex.state = VertexState.COMPLETED;\n            break;\n        case VertexAction.UNSELECT:\n            vertex.state = VertexState.DEFAULT;\n            break;\n        default:\n    }\n};\n\nconst updateEdgeByAction = (edge, action) => {\n    switch (action) {\n        case EdgeAction.WALK:\n            edge.state = EdgeState.WALKED;\n            break;\n        case EdgeAction.HIGHLIGHT:\n            edge.state = EdgeState.HIGHLIGHTED;\n            break;\n        default:\n    }\n};\n\nconst updateVertexHintByAction = (vertex, action) => {\n    switch (action) {\n        case VertexHintAction.REMOVE:\n            vertex.hintState = VertexHintState.CLEAR;\n            break;\n        case VertexHintAction.SET:\n            vertex.hintState = VertexHintState.DEFAULT;\n            break;\n        case VertexHintAction.HIGHLIGHT:\n            vertex.hintState = VertexHintState.HIGHLIGHTED;\n            break;\n        default:\n    }\n};\n\nconst cleanGraphSelections = (state) => {\n    state.graph.vertices.forEach(v => {\n        v.state = VertexState.DEFAULT;\n        v.hintState = VertexHintState.CLEAR;\n        v.hint = \"\";\n    });\n    state.graph.edges.forEach(e => e.state = EdgeState.DEFAULT);\n    state.graph.visualizationEdges = [];\n    state.selectedVertex = undefined;\n};\n\nconst reducer = (state = defaultState, action) => {\n    let newState;\n    let i;\n    switch (action.type) {\n        case ActionType.ADD_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addVertex(action.x, action.y, action.radius);\n\n            return newState;\n        case ActionType.ADD_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addEdge(action.vertexFrom, action.vertexTo, action.weight);\n\n            return newState;\n        case ActionType.REMOVE_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeVertex(action.vertex);\n\n            return newState;\n        case ActionType.REMOVE_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeEdge(action.edge);\n\n            return newState;\n        case ActionType.UPDATE_VERTEX_POSITION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.vertices[action.vertexIndex].x = action.x;\n            newState.graph.vertices[action.vertexIndex].y = action.y;\n\n            return newState;\n        case ActionType.CHANGE_GRAPH_MODE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            if (action.graphMode !== newState.graphMode) {\n                newState.graphMode = action.graphMode;\n\n                unselectSelectedVertex(newState);\n            }\n\n            return newState;\n        case ActionType.SELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            i = newState.graph.vertices.findIndex(v => v === action.vertex);\n            if (i !== -1) {\n                newState.graph.vertices[i].state = VertexState.HIGHLIGHTED;\n                newState.selectedVertex = action.vertex;\n            }\n\n            return newState;\n        case ActionType.UNSELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            return newState;\n        case ActionType.SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message,\n                isAlert: action.isAlert\n            };\n        case ActionType.CLOSE_MESSAGE:\n            return {\n                ...state,\n                message: undefined,\n                isAlert: false\n            };\n        case ActionType.INVERT_ORIENTATION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.invertOrientation();\n\n            return newState;\n        case ActionType.ALGORITHM_STEP:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            const step = action.step;\n            if (step.actionType === AlgorithmActionType.VERTEX_ACTION) {\n                const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                if (vertex)\n                    updateVertexByAction(vertex, step.action);\n            } else if (step.actionType === AlgorithmActionType.EDGE_ACTION) {\n                const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                if (step.action === EdgeAction.UNSELECT) {\n                    newState.graph.removeVisualizationEdgeByVertices(vertexFrom, vertexTo, step.oriented);\n                } else {\n                    const edge = newState.graph.addVisualizationEdge(vertexFrom, vertexTo, step.oriented, step.weight);\n                    updateEdgeByAction(edge, step.action);\n                }\n            } else if (step.actionType === AlgorithmActionType.VERTEX_HINT_ACTION) {\n                const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                if (vertex) {\n                    if (step.action === VertexHintAction.REMOVE)\n                        vertex.hint = \"\";\n                    else\n                        vertex.hint = step.hint;\n                    updateVertexHintByAction(vertex, step.action);\n                }\n            }\n\n            return newState;\n        case ActionType.CLEAN_GRAPH_SELECTIONS:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            cleanGraphSelections(newState);\n\n            return newState;\n        case ActionType.SET_GRAPH:\n            return {\n                ...state,\n                graph: action.graph\n            };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    graphReducer: reducer,\n    dialogReducer: dialog,\n    algorithmReducer: algorithm,\n    matrixDialogReducer: matrixDialog\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2at_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plain_graph\":\"PlainGraph_plain_graph__132cd\",\"drawing_area\":\"PlainGraph_drawing_area__poiJd\",\"cell\":\"PlainGraph_cell__2tDfs\",\"cell-blocked\":\"PlainGraph_cell-blocked__13I9p\",\"cell-path\":\"PlainGraph_cell-path__1JSUa\",\"cell-start\":\"PlainGraph_cell-start__2FTb6\",\"cell-finish\":\"PlainGraph_cell-finish__2icJo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2xbQm\",\"menu-sub\":\"Menu_menu-sub__2jhA1\",\"graph-control-buttons\":\"Menu_graph-control-buttons__2CY62\",\"switch\":\"Menu_switch__3Y97k\",\"visualization-control-buttons\":\"Menu_visualization-control-buttons__1OTXW\",\"file-control-buttons\":\"Menu_file-control-buttons__3PmTU\",\"algorithms-list\":\"Menu_algorithms-list__2mwx1\",\"slider\":\"Menu_slider__RA1Ez\",\"matrix-control-buttons\":\"Menu_matrix-control-buttons__26fCf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__1L6GG\",\"activated\":\"Buttons_activated__EZOmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider-wrapper\":\"Sliders_slider-wrapper__GIw-8\",\"slider-label\":\"Sliders_slider-label__1w08l\",\"slider\":\"Sliders_slider__1gqJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drop-down-list\":\"DropDownLists_drop-down-list__ix94o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch-round-wrapper\":\"ToggleSwitches_switch-round-wrapper__g2bxh\",\"switch-round\":\"ToggleSwitches_switch-round__1bQ1T\",\"slider\":\"ToggleSwitches_slider__Q-bUA\",\"text\":\"ToggleSwitches_text__1sKta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message-box\":\"MessageBox_message-box__2uEgD\",\"invisible\":\"MessageBox_invisible__10Wwp\",\"alert\":\"MessageBox_alert__14QTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-dialog\":\"InputDialog_input-dialog__2SLyF\",\"text-input\":\"InputDialog_text-input__2zjdU\",\"button\":\"InputDialog_button__1ZFHJ\",\"hint\":\"InputDialog_hint__1ftkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"TextInputs_text-input__3mPdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info-box\":\"InfoBox_info-box__3t_A2\",\"text\":\"InfoBox_text__sgPCj\",\"invisible\":\"InfoBox_invisible__1un1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix-dialog\":\"MatrixDialog_matrix-dialog__2YGd3\",\"button\":\"MatrixDialog_button__3KxWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"AdjacencyMatrix_matrix__3b96v\",\"matrix-row\":\"AdjacencyMatrix_matrix-row__3vHpl\",\"top-left-cell\":\"AdjacencyMatrix_top-left-cell__1-lFt\",\"top-right-cell\":\"AdjacencyMatrix_top-right-cell__1RYRb\",\"bottom-left-cell\":\"AdjacencyMatrix_bottom-left-cell__23nQC\",\"bottom-right-cell\":\"AdjacencyMatrix_bottom-right-cell__2r29f\",\"matrix-cell\":\"AdjacencyMatrix_matrix-cell__2Z91s\",\"label-cell\":\"AdjacencyMatrix_label-cell__3YJYr\",\"empty\":\"AdjacencyMatrix_empty__3-1PZ\"};"],"sourceRoot":""}