{"version":3,"sources":["algorithms/plain/breadth-first-search.js","components/PlainGraph/PlainGraph.jsx","components/Graph/Vertex/Vertex.jsx","components/Graph/Edge/Edge.jsx","utils/sleep.js","actions/index.js","actions/dialog.js","algorithms/graph/index.js","utils/graphConverter.js","actions/algorithm.js","components/Graph/VisualizationEdge/VisualizationEdge.jsx","components/Graph/Graph.jsx","components/Buttons/Buttons.jsx","components/Sliders/Sliders.jsx","components/DropDownLists/DropDownLists.jsx","components/ToggleSwitches/ToggleSwitches.jsx","algorithms/graph/dfs.js","utils/queue.js","algorithms/graph/bfs.js","algorithms/graph/dijkstra.js","algorithms/graph/prim-mst.js","utils/dsu.js","algorithms/graph/kruskal-mst.js","algorithms/graph/check-connected.js","algorithms/graph/check-bipartite.js","algorithms/graph/radius.js","algorithms/graph/diameter.js","algorithms/graph/topological-sort.js","algorithms/graph/find-bridges.js","actions/matrixDialog.js","components/Menu/Menu.jsx","components/MessageBox/MessageBox.jsx","components/TextInputs/TextInputs.jsx","components/Dialogs/InputDialog/InputDialog.jsx","components/InfoBox/InfoBox.jsx","components/Dialogs/MatrixDialog/AdjacencyMatrix.jsx","components/Dialogs/MatrixDialog/MatrixDialog.jsx","components/App.jsx","serviceWorker.js","reducers/dialog.js","reducers/algorithm.js","reducers/matrixDialog.js","reducers/index.js","index.js","components/App.module.scss","components/PlainGraph/PlainGraph.module.scss","components/Menu/Menu.module.scss","components/Buttons/Buttons.module.scss","components/Sliders/Sliders.module.scss","components/DropDownLists/DropDownLists.module.scss","components/ToggleSwitches/ToggleSwitches.module.scss","components/MessageBox/MessageBox.module.scss","components/Dialogs/InputDialog/InputDialog.module.scss","components/TextInputs/TextInputs.module.scss","components/InfoBox/InfoBox.module.scss","components/Dialogs/MatrixDialog/MatrixDialog.module.scss","components/Dialogs/MatrixDialog/AdjacencyMatrix.module.scss"],"names":["algorithm","cells","cellStart","cellFinish","pathStatus","queue","x","y","parent","current","shift","console","log","next","node","minX","minY","maxX","maxY","res","push","neighbours","length","i","findIndex","n","cx","classnames","bind","styles","CellState","Object","freeze","EMPTY","BLOCKED","START","FINISH","PATH","Cell","status","onMouseEnter","onMouseLeave","className","React","Component","Vertex","radius","name","this","state","VertexState","DEFAULT","hint","hintState","VertexHintState","CLEAR","HIGHLIGHTED","PRE_COMPLETED","COMPLETED","COLOR_1","COLOR_2","VertexComponent","vertex","draggable","onDragStart","onDragEnd","onDragMove","onClick","e","call","target","getChildren","setAttrs","scaleX","scaleY","shadowColor","shadowBlur","shadowOffset","shadowOpacity","moveToTop","handleDragStart","to","duration","shadowOffsetX","shadowOffsetY","handleDragEnd","fill","color","stroke","strokeWidth","vertexBorderWidth","text","fontSize","textColor","width","height","align","verticalAlign","hintColor","labelWidth","Edge","vertexFrom","vertexTo","oriented","weight","_from","_to","EdgeState","_oriented","undefined","WALKED","ERASED","SHADOWED","EdgeComponent","edgeComponent","edge","edgeType","points","getEdgePointsForType","EdgeType","NOT_ORIENTED","linePoints","hitStrokeWidth","tension","isWeighted","labelPoints","EdgeLabel","labelRadius","labelBorderWidth","ONE_SIDE_ORIENTED","TWO_SIDE_ORIENTED","LOOP","from","dx","dy","angle","Math","atan2","vertexFromOffset","vertexToOffset","xFrom","cos","yFrom","sin","xTo","yTo","xMiddle","yMiddle","anchorDx","sqrt","anchorDy","xMiddleFirst","sleep","ms","Promise","resolve","setTimeout","ActionType","ADD_VERTEX","ADD_EDGE","REMOVE_VERTEX","REMOVE_EDGE","CHANGE_GRAPH_MODE","SELECT_VERTEX","UNSELECT_VERTEX","SHOW_MESSAGE","CLOSE_MESSAGE","UPDATE_VERTEX_POSITION","INVERT_ORIENTATION","ALGORITHM_STEP","CLEAN_GRAPH_SELECTIONS","SET_GRAPH","changeGraphMode","graphMode","type","currentMessageId","showMessage","message","isAlert","dispatch","a","messageId","showMessageConnector","closeMessage","algorithmStep","step","START_DIALOG_FOR_RESULT","CLOSE_DIALOG","closeDialog","VertexAction","SELECT","UNSELECT","ENTER","EXIT","CLEAR_ALL_SELECTIONS","VertexHintAction","REMOVE","SET","HIGHLIGHT","EdgeAction","WALK","SHADOW","AlgorithmActionType","VERTEX_ACTION","EDGE_ACTION","VERTEX_HINT_ACTION","PreCallAction","NOTHING","SELECT_EDGE","Criteria","WEIGHTED","CONNECTED","ORIENTED","ACYCLIC","getOperationsCount","trace","operationsCount","forEach","t","isChained","edgesListToAdjacencyList","vertices","edges","adjacencyList","isOriented","entries","verticesList","sort","b","edgesListToAdjacencyMatrix","verticesNumbers","v","nameToIndex","number","index","cell","adjacencyMatrix","Array","j","weighted","PRE_CALL","CALL","PAUSE","POP_TRACE_STEP","SET_ALGORITHM","SET_SPEED","SET_IS_ONE_STEP","CLEAR_TRACE","SHOW_STATISTICS","CLEAR_STATISTICS","setIsOneStep","isOneStep","getState","GraphMode","graph","graphReducer","callConnector","algorithmReducer","pause","start","callSuccess","currentVisualizationId","traceStep","popTraceStep","showStatistics","visualizationId","isActive","speed","VisualizationEdgeComponent","REMOVE_VERTEX_OR_EDGE","ALGORITHM_PRE_CALL_SELECT_VERTEX","ALGORITHM_PRE_CALL_SELECT_EDGE","Graph","isArray","Error","_vertices","_edges","_visualizationEdges","_currentName","max","map","splice","filter","findEdge","invertOrientation","newEdges","removeVisualizationEdgeByVertices","GraphComponent","draggedVertex","windowWidth","windowHeight","findIndexOfVertex","props","handleVertexDragStart","setState","updateDraggedVertex","updateVertexPosition","handleVertexDragMove","handleVertexDragEnd","getEdgeType","handleCanvasClick","evt","clientX","clientY","addVertex","selectedVertex","unselectVertex","handleVertexClick","cancelBubble","removeVertex","selectVertex","startDialogForResult","value","addEdge","callAlgorithm","handleEdgeClick","removeEdge","handleResize","window","innerWidth","innerHeight","onresize","key","visualizationEdges","connect","vertexIndex","title","inputPlaceholder","onSubmit","onClose","pattern","onCancel","ButtonComponent","activated","SliderComponent","label","min","onChange","DropDownList","items","item","RoundedToggleSwitch","isChecked","checked","used","preCall","criteria","startTime","performance","now","dfs","action","actionType","toVertex","endTime","statistics","toFixed","Queue","_queue","isEmpty","pop","bfs","d","Number","MAX_SAFE_INTEGER","dijkstra","mstWeight","mst","prim","floor","random","DSU","size","find","dsu","makeSet","union","kruskal","isConnected","isBipartite","p","level","peek","eccentricities","findRadius","diameter","findDiameter","topSortList","addedVertices","sortedVertices","isStartVertex","reverse","topSort","timer","tin","tout","countBridges","findBridges","START_MATRIX_DIALOG_FOR_RESULT","CLOSE_MATRIX_DIALOG","closeMatrixDialog","MenuComponent","algorithms","DFS","BFS","Dijkstra","PrimMST","KruskalMST","CheckConnected","CheckBipartite","FindRadius","FindDiameter","TopologicalSort","FindBridges","algorithmPaused","handleAlgorithmChange","clearVisualization","setAlgorithm","startVisualization","remainingAlgorithmSteps","clearTrace","clearStatistics","cleanGraphSelections","isVisualizationActive","continue","stepVisualization","stopVisualization","handleAlgorithmSpeedChange","setSpeed","askForAction","writeToFile","json","JSON","stringify","exportData","escape","anchorElement","document","getElementById","setAttribute","click","askReadFromFile","readFromFile","reader","FileReader","file","files","onload","parse","result","setGraph","readAsText","showAdjacencyMatrix","startMatrixDialog","nextProps","nextState","nextContext","visualizationSpeed","selectedAlgorithm","grid","bounds","cancel","id","style","aria-hidden","href","accept","continueCall","TextInputComponent","placeholder","autoFocus","customStyles","overlay","zIndex","InputDialog","handleChange","validity","valid","submit","preventDefault","submitDialog","cancelDialog","isOpen","onRequestClose","ariaHideApp","dialogReducer","lines","isVisible","isStatisticsShown","line","MatrixCell","topLeft","topRight","bottomLeft","bottomRight","MatrixRow","row","first","last","vertexNumber","AdjacencyMatrix","MatrixDialog","reduce","prev","arr","matrixDialogReducer","submitMatrixDialog","cancelMatrixDialog","App","Menu","Boolean","location","hostname","match","defaultState","dialog","newState","matrixDialog","clone","object","assign","create","getPrototypeOf","unselectSelectedVertex","updateVertexByAction","updateEdgeByAction","updateVertexHintByAction","combineReducers","addVisualizationEdge","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"0QAAaA,EAEJ,SAAUC,EAAOC,EAAWC,EAAYC,GAIzC,IAHA,IAEMC,EAAQ,CAFH,CAAEC,EAAGJ,EAAUI,EAAGC,EAAGL,EAAUK,EAAGC,OAAQ,OADA,aAKjD,IAAIC,EAAUJ,EAAMK,QAGpB,GAFKD,EAAQH,IAAMJ,EAAUI,GAAOG,EAAQF,IAAML,EAAUK,IACxDN,EAAMQ,EAAQF,GAAGE,EAAQH,GAAKF,GAC7BK,EAAQH,IAAMH,EAAWG,GAAOG,EAAQF,IAAMJ,EAAWI,EAG1D,MAAM,CAAN,UAEJI,QAAQC,IAAIH,GAEZ,IADA,IAAMI,EAiBlB,SAAoBC,EAAMC,EAAMC,EAAMC,EAAMC,GACxC,IAAMC,EAAM,GACRL,EAAKR,EAAIW,GACTE,EAAIC,KAAK,CAAEd,EAAGQ,EAAKR,EAAI,EAAGC,EAAGO,EAAKP,EAAGC,OAAQM,IAC7CA,EAAKR,EAAIS,GACTI,EAAIC,KAAK,CAAEd,EAAGQ,EAAKR,EAAI,EAAGC,EAAGO,EAAKP,EAAGC,OAAQM,IAC7CA,EAAKP,EAAIW,GACTC,EAAIC,KAAK,CAAEd,EAAGQ,EAAKR,EAAGC,EAAGO,EAAKP,EAAI,EAAGC,OAAQM,IAC7CA,EAAKP,EAAIS,GACTG,EAAIC,KAAK,CAAEd,EAAGQ,EAAKR,EAAGC,EAAGO,EAAKP,EAAI,EAAGC,OAAQM,IACjD,OAAOK,EA3BcE,CAAWZ,EAAS,EAAG,EAAGR,EAAM,GAAGqB,OAAS,EAAGrB,EAAMqB,OAAS,GAd1B,WAexCC,GACAtB,EAAMY,EAAKU,GAAGhB,GAAGM,EAAKU,GAAGjB,KAAOF,GAAkBS,EAAKU,GAAGjB,IAAMJ,EAAUI,GAAOO,EAAKU,GAAGhB,IAAML,EAAUK,IAA8E,IAAtEF,EAAMmB,WAAU,SAAAC,GAAC,OAAKA,EAAEnB,IAAMO,EAAKU,GAAGjB,GAAOmB,EAAElB,IAAMM,EAAKU,GAAGhB,MAC/KF,EAAMe,KAAKP,EAAKU,KAFfA,EAAI,EAAGA,EAAIV,EAAKS,SAAUC,EAAnC,EAASA,IAXNlB,EAAMiB,QAAQ,CAAC,IAAD,0CCD7B,IAAMI,EAAKC,IAAWC,KAAKC,KAErBC,EAAYC,OAAOC,OAAO,CAAEC,MAAO,EAAGC,QAAS,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,IAE7EC,EAAO,SAAC,GAAD,MAAEhC,EAAF,EAAEA,EAAGC,EAAL,EAAKA,EAAGgC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,aAA9B,OACT,0BAAMnC,EAAGA,EAAGC,EAAGA,EAAGmC,UAAWhB,EAAG,QAAD,kCACLa,IAAWT,EAAUI,SADhB,0BAERK,IAAWT,EAAUO,MAFb,2BAGPE,IAAWT,EAAUK,OAHd,4BAINI,IAAWT,EAAUM,QAJf,IAMzBI,aAAcA,EACdC,aAAcA,K,GAGCE,IAAMC,U,gCCjBlBC,EAAb,WACI,WAAYvC,EAAGC,EAAGuC,EAAQC,GAAO,oBAC7BC,KAAK1C,EAAIA,EACT0C,KAAKzC,EAAIA,EACTyC,KAAKF,OAASA,EACdE,KAAKC,MAAQC,EAAYC,QACzBH,KAAKD,KAAOA,EACZC,KAAKI,KAAO,GACZJ,KAAKK,UAAYC,EAAgBC,MARzC,kDAYQ,OAAQP,KAAKC,OACT,KAAKC,EAAYC,QACb,MAAO,QACX,KAAKD,EAAYM,YACb,MAAO,SACX,KAAKN,EAAYO,cACb,MAAO,UACX,KAAKP,EAAYQ,UACb,MAAO,UACX,KAAKR,EAAYS,QACb,MAAO,UACX,KAAKT,EAAYU,QACb,MAAO,UACX,QACI,MAAO,WA1BvB,gCA+BQ,OAAQZ,KAAKC,OACT,KAAKC,EAAYC,QAEjB,KAAKD,EAAYM,YAEjB,KAAKN,EAAYO,cACb,MAAO,QACX,KAAKP,EAAYQ,UAEjB,KAAKR,EAAYS,QAEjB,KAAKT,EAAYU,QACb,MAAO,QACX,QACI,MAAO,WA7CvB,gCAkDQ,OAAQZ,KAAKK,WACT,KAAKC,EAAgBC,MACjB,MAAO,YACX,KAAKD,EAAgBH,QACjB,MAAO,UACX,KAAKG,EAAgBE,YACjB,MAAO,UACX,QACI,MAAO,iBA1DvB,KA0FaK,EAAkB,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,OAAQC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAErF,OACI,kBAAC,QAAD,CACIJ,UAAWA,EACXC,YAAa,SAAAI,GAAC,OAhCF,SAACA,EAAGC,GACxBD,EAAEE,OAAOC,cAAc,GAAGC,SAAS,CAC/BC,OAAQ,IACRC,OAAQ,IACRC,YAAa,QACbC,WAAY,GACZC,aAAc,CAAEvE,EAAG,GAAIC,EAAG,IAC1BuE,cAAe,KAEnBV,EAAEE,OAAOS,YAETV,EAAKD,GAqBqBY,CAAgBZ,EAAGJ,IACrCC,UAAW,SAAAG,GAAC,OAnBF,SAACA,EAAGC,GACtBD,EAAEE,OAAOC,cAAc,GAAGU,GAAG,CACzBC,SAAU,IACVT,OAAQ,EACRC,OAAQ,EACRE,WAAY,EACZO,cAAe,EACfC,cAAe,IAGnBf,EAAKD,GASmBiB,CAAcjB,EAAGH,IACjCC,WAAYA,EACZC,QAASA,EACT7D,EAAGwD,EAAOxD,EACVC,EAAGuD,EAAOvD,GACV,kBAAC,SAAD,CACID,EAAG,EACHC,EAAG,EACHuC,OAAQgB,EAAOhB,OACfwC,KAAMxB,EAAOyB,MACbC,OAAQ,QACRZ,WAAY,EACZa,YAAaC,EACbZ,cAAe,KACnB,kBAAC,OAAD,CACIa,KAAM7B,EAAOf,KACbzC,GAAG,GACHC,GAAG,GACHqF,SAAU,GACVN,KAAMxB,EAAO+B,UACbC,MAzBO,GA0BPC,OA1ByB,GA2BzBC,MAAO,SACPC,cAAe,WAEnB,kBAAC,OAAD,CACIN,KAAM7B,EAAOV,KACb9C,GAAI,EAAIwD,EAAOhB,OACfvC,GAAI,EAAIuD,EAAOhB,OACf8C,SAAU,GACVN,KAAMxB,EAAOoC,UACbV,OAAQ1B,EAAOoC,UACfJ,MAAOK,GACPJ,OAtCyB,GAuCzBC,MAAO,SACPC,cAAe,aAIlBP,EAAoB,EAEpBxC,EAAcnB,OAAOC,OAAO,CAAEmB,QAAS,EAAGK,YAAa,EAAGC,cAAe,EAAGC,UAAW,EAAGC,QAAS,EAAGC,QAAS,IAC/GN,EAAkBvB,OAAOC,OAAO,CAAEuB,MAAO,EAAGJ,QAAS,EAAGK,YAAa,ICzIrE4C,EAAb,WACI,WAAYC,EAAYC,EAAUC,EAAUC,GAAS,oBACjDxD,KAAKyD,MAAQJ,EACbrD,KAAK0D,IAAMJ,EACXtD,KAAKwD,OAASA,EACdxD,KAAKC,MAAQ0D,EAAUxD,QACvBH,KAAK4D,UAAYL,EANzB,yDAmCQ,YAAwBM,IAAhB7D,KAAKwD,QAA0C,OAAhBxD,KAAKwD,SAnCpD,mCAuCQ,OAAOxD,KAAK4D,YAvCpB,0CA2CQ5D,KAAK4D,WAAa5D,KAAK4D,YA3C/B,2BAUQ,OAAO5D,KAAKyD,QAVpB,yBAcQ,OAAOzD,KAAK0D,MAdpB,4BAkBQ,OAAQ1D,KAAKC,OACT,KAAK0D,EAAUxD,QACX,MAAO,QACX,KAAKwD,EAAUnD,YACX,MAAO,UACX,KAAKmD,EAAUG,OACX,MAAO,UACX,KAAKH,EAAUI,OACX,MAAO,YACX,KAAKJ,EAAUK,SACX,MAAO,UACX,QACI,MAAO,aA9BvB,KA+CaC,EAAgB,SAAC,GAAiC,IAIvDC,EAJwBC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUjD,EAAc,EAAdA,QACtCkD,EAASC,EAAqBH,EAAMC,GACpC7B,EAAQ4B,EAAK5B,MAyBnB,OArBI2B,EADAE,IAAaG,EAASC,aAElB,kBAAC,OAAD,CACIH,OAAQA,EAAOI,WACftD,QAASA,EACTqB,OAAQD,EACRD,KAAMC,EACNE,YAAa,EACbiC,eAAgB,KAIpB,kBAAC,QAAD,CACIL,OAAQA,EAAOI,WACftD,QAASA,EACTqB,OAAQD,EACRD,KAAMC,EACNE,YAAa,EACbiC,eAAgB,GAChBC,QAAS,KAGjBR,EAAKS,aAED,kBAAC,QAAD,CAAOzD,QAASA,GACX+C,EACD,kBAAC,EAAD,CACI5G,EAAG+G,EAAOQ,YAAY,GACtBtH,EAAG8G,EAAOQ,YAAY,GACtBlC,KAAMwB,EAAKX,UAIfU,GAGHY,EAAY,SAAC,GAAoB,IAAlBxH,EAAiB,EAAjBA,EAAGC,EAAc,EAAdA,EAAGoF,EAAW,EAAXA,KAI9B,OACI,kBAAC,QAAD,CACIrF,EAAGA,EALS,GACW,EACN,EAIjBC,EAAGA,EANS,GACqC,EAChC,EAKjBuF,MAAOiC,GACPhC,OAAQgC,IACR,kBAAC,SAAD,CACIzH,EAAGyH,GACHxH,EAAGwH,GACHjF,OAZQ,GAaRwC,KAAM,QACNE,OAAQ,QACRC,YAba,IAcjB,kBAAC,OAAD,CACInF,EAAG0H,EACHzH,EAAGyH,EACHrC,KAAMA,EACNC,SAAU,GACVE,MAAOiC,GACPhC,OAAQgC,GACR/B,MAAO,SACPC,cAAe,aAKlBsB,EAAWxF,OAAOC,OAAO,CAAEiG,kBAAmB,EAAGC,kBAAmB,EAAGV,aAAc,EAAGW,KAAM,IAC9FxB,EAAY5E,OAAOC,OAAO,CAAEmB,QAAS,EAAGK,YAAa,EAAGuD,OAAQ,EAAGD,OAAQ,EAAGE,SAAU,IAExFM,EAAuB,SAACH,EAAMC,GACvC,IAAMf,EAAac,EAAKiB,KAClB9B,EAAWa,EAAKlC,GAChBoD,EAAK/B,EAAShG,EAAI+F,EAAW/F,EAC7BgI,EAAKjC,EAAW9F,EAAI+F,EAAS/F,EAC7BgI,EAAQC,KAAKC,MAAMH,EAAID,GACvBK,EAAmBrC,EAAWvD,OAAS4C,EAAoB,EAC3DiD,EAAiBrC,EAASxD,OAAS4C,EAAoB,EAE7D,GAAK0B,IAAaG,EAASU,mBAAuBb,IAAaG,EAASC,aAAe,CACnF,IAAMoB,EAAQvC,EAAW/F,EAAIoI,EAAmBF,KAAKK,IAAIN,GACnDO,EAAQzC,EAAW9F,EAAImI,EAAmBF,KAAKO,IAAIR,GACnDS,EAAM1C,EAAShG,EAAIqI,EAAiBH,KAAKK,IAAIN,GAC7CU,EAAM3C,EAAS/F,EAAIoI,EAAiBH,KAAKO,IAAIR,GAEnD,MAAO,CACHd,WAAY,CACRmB,EAAOE,EACPE,EAAKC,GAETpB,YAAa,EACRe,EAAQI,GAAO,GACfF,EAAQG,GAAO,IAGrB,GAAI7B,IAAaG,EAASW,kBAAmB,CAChD,IACMU,EAAQvC,EAAW/F,EAAIoI,EAAmBF,KAAKK,IAAIN,EADrC,KAEdO,EAAQzC,EAAW9F,EAAImI,EAAmBF,KAAKO,IAAIR,EAFrC,KAGdS,EAAM1C,EAAShG,EAAIqI,EAAiBH,KAAKK,IAAIN,EAH/B,KAIdU,EAAM3C,EAAS/F,EAAIoI,EAAiBH,KAAKO,IAAIR,EAJ/B,KAOdW,GAAWN,EAAQI,GAAO,EADK,EAAK,IACJF,EAAQG,GACxCE,GAAWL,EAAQG,GAAO,EAFK,EAAK,IAEJL,EAAQI,GAE9C,MAAO,CACHvB,WAAY,CACRmB,EAAOE,EACPI,EAASC,EACTH,EAAKC,GAETpB,YAAa,CACTqB,EACAC,IAGL,GAAI/B,IAAaG,EAASY,KAAM,CACnC,IAAMS,EAAQvC,EAAW/F,EAAIoI,EACvBI,EAAQzC,EAAW9F,EACnByI,EAAM3C,EAAW/F,EAAIoI,EACrBO,EAAM5C,EAAW9F,EAEjB6I,EAAW,EAAKV,EAAmBF,KAAKa,KAAK,GAC7CC,EAAW,IAAMZ,EAAmBF,KAAKa,KAAK,GAC9CE,EAAeX,EAAQQ,EAEvBF,EAAUK,EAAeb,EAK/B,MAAO,CACHjB,WAAY,CACRmB,EAAOE,EACPS,EATaT,EAAQQ,EAUrBJ,EARQJ,EACME,EAAMI,EACNH,EAAMK,EAQpBN,EAAKC,GAETpB,YAAa,CACTqB,EAbQJ,M,iCCvLjB,SAASU,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MCC/C,IAAMI,EAAa9H,OAAOC,OAAO,CACpC8H,WAAY,aACZC,SAAU,WACVC,cAAe,gBACfC,YAAa,cACbC,kBAAmB,oBACnBC,cAAe,gBACfC,gBAAiB,kBACjBC,aAAc,eACdC,cAAe,gBACfC,uBAAwB,yBACxBC,mBAAoB,qBACpBC,eAAgB,iBAChBC,uBAAwB,yBACxBC,UAAW,cA2BFC,EAAkB,SAACC,GAAD,MAAgB,CAC3CC,KAAMjB,EAAWK,kBACjBW,cAaAE,EAAmB,EAEVC,EAAc,SAACC,GAAD,IAAUC,EAAV,sGAA8B,WAAOC,GAAP,eAAAC,EAAA,6DAC/CC,IAAcN,EACpBI,EAASG,EAAqBL,EAASC,IAFc,SAG/C1B,EAAM,KAHyC,OAIjD6B,IAAcN,GACdI,EAASI,KALwC,2CAA9B,uDAQrBD,EAAuB,SAACL,GAAD,IAAUC,EAAV,8DAA+B,CACxDJ,KAAMjB,EAAWQ,aACjBY,UACAC,YAGSK,EAAe,iBAAO,CAC/BT,KAAMjB,EAAWS,gBAcRkB,EAAgB,SAACC,GAAD,MAAW,CACpCX,KAAMjB,EAAWY,eACjBgB,SC3FS5B,EAAa9H,OAAOC,OAAO,CACpC0J,wBAAyB,0BACzBC,aAAc,iBAcZC,EAAc,iBAAO,CACxBd,KAAMjB,EAAW8B,e,OCjBPE,EAAe9J,OAAOC,OAAO,CACtC8J,OAAQ,EACRC,SAAU,EACVC,MAAO,EACPC,KAAM,EACNtI,QAAS,EACTC,QAAS,EACTsI,qBAAsB,IAGbC,GAAmBpK,OAAOC,OAAO,CAC1CoK,OAAQ,EACRC,IAAK,EACLC,UAAW,IAGFC,GAAaxK,OAAOC,OAAO,CACpCwK,KAAM,EACNF,UAAW,EACXP,SAAU,EACVU,OAAQ,EACRP,qBAAsB,IAGbQ,GAAsB3K,OAAOC,OAAO,CAC7C2K,cAAe,EACfC,YAAa,EACbC,mBAAoB,IAGXC,GAAgB/K,OAAOC,OAAO,CACvC+K,QAAS,EACT5C,cAAe,EACf6C,YAAa,IAGJC,GAAWlL,OAAOC,OAAO,CAClC+K,QAAS,EACTG,SAAU,EACVC,UAAW,EACX3F,aAAc,EACd4F,SAAU,EACVC,QAAS,KAGAC,GAAqB,SAACC,GAC/B,IAAIC,EAAkB,EAKtB,OAJAD,EAAME,SAAQ,SAACC,EAAGnM,GACTA,EAAI,IAAMgM,EAAMjM,QAAYoM,EAAEC,aAC7BH,KAEHA,G,SCnDEI,GAA2B,SAACC,EAAUC,GAC/C,IAAMC,EAAgB,GACtBF,EAASJ,SAAQ,SAAA3J,GAAM,OAAIiK,EAAcjK,EAAOf,MAAQ,MACxD+K,EAAML,SAAQ,SAAAtG,GACV4G,EAAc5G,EAAKiB,KAAKrF,MAAM3B,KAAK,CAAC2B,KAAMoE,EAAKlC,GAAGlC,KAAMyD,OAAQW,EAAKX,SAChEW,EAAK6G,cAAiB7G,EAAKiB,OAASjB,EAAKlC,IAC1C8I,EAAc5G,EAAKlC,GAAGlC,MAAM3B,KAAK,CAAC2B,KAAMoE,EAAKiB,KAAKrF,KAAMyD,OAAQW,EAAKX,YAE7E,cAA6BzE,OAAOkM,QAAQF,GAA5C,oBAAYG,EAAZ,wBACIA,EAAeA,EAAaC,MAAK,SAAC/C,EAAGgD,GAAJ,OAAUhD,EAAErI,KAAOqL,EAAErL,QAC1D,OAAOgL,GAGEM,GAA6B,SAACR,EAAUC,GACjD,IAAMQ,EAAkB,GACxBT,EAASJ,SAAQ,SAAAc,GAAC,OAAID,EAAgBlN,KAAKmN,EAAExL,SAC7CuL,EAAgBH,MAAK,SAAC/C,EAAGgD,GAAJ,OAAUhD,EAAIgD,KACnC,IAAMI,EAAc,GACpBF,EAAgBb,SAAQ,SAACgB,EAAQC,GAAT,OAAmBF,EAAYC,GAAUC,KAGjE,IADA,IAOItG,EAAMnD,EAAI0J,EAPRC,EAAkB,IAAIC,MAAMhB,EAASvM,QAClCC,EAAI,EAAGA,EAAIsM,EAASvM,SAAUC,EAAG,CACtCqN,EAAgBrN,GAAK,IAAIsN,MAAMhB,EAASvM,QACxC,IAAK,IAAIwN,EAAI,EAAGA,EAAIjB,EAASvM,SAAUwN,EACnCF,EAAgBrN,GAAGuN,GAAK,KAahC,OATAhB,EAAML,SAAQ,SAAArJ,GACVgE,EAAOoG,EAAYpK,EAAEgE,KAAKrF,MAC1BkC,EAAKuJ,EAAYpK,EAAEa,GAAGlC,MACtB4L,EAAOvK,EAAEoC,OAAS,CAAEuI,UAAU,EAAMvI,OAAQpC,EAAEoC,QAAW,CAAEuI,UAAW,GACtEH,EAAgBxG,GAAMnD,GAAM0J,EACvBvK,EAAE4J,eACHY,EAAgB3J,GAAImD,GAAQuG,MAG7B,CAACC,kBAAiBN,oBC/BhBzE,GAAa9H,OAAOC,OAAO,CACpCgN,SAAU,WACVC,KAAM,OACN9M,MAAO,QACP+M,MAAO,QACPC,eAAgB,iBAChBC,cAAe,gBACfC,UAAW,YACXC,gBAAiB,kBACjBC,YAAa,cACbC,gBAAiB,kBACjBC,iBAAkB,qBAkGhBC,GAAe,SAACC,GAAD,MAAgB,CACjC7E,KAAMjB,GAAWyF,gBACjBK,cAGStL,GAAO,SAACP,EAAQqD,GAAT,OAAkB,SAACgE,EAAUyE,GAC7CzE,EAASI,KACTJ,EAASP,EAAgBiF,GAAU1M,UACnC,IAAM2M,EAAQF,IAAWG,aAAaD,MACtC3E,EAAS6E,GAAcF,EAAOhM,EAAQqD,IAEtC,IAAMwI,EAAYC,IAAWK,iBAAiBN,UAClCxE,EAAZwE,EAAqBO,KAAoBC,MACzChF,EAASiF,GAAYT,MAQnBQ,GAAQ,iBAAO,CACjBrF,KAAMjB,GAAW1H,QAGR+N,GAAQ,iBAAO,CACxBpF,KAAMjB,GAAWqF,QAGfc,GAAgB,SAACF,EAAOhM,EAAQqD,GAAhB,MAA0B,CAC5C2D,KAAMjB,GAAWoF,KACjBa,QACAhM,SACAqD,SAGAkJ,GAAyB,EAEvBD,GAAc,eAACT,EAAD,sGAAuB,WAAOxE,EAAUyE,GAAjB,mBAAAxE,EAAA,0DACnCuE,EADmC,gBAGnC,IADIW,EAAY,CAAC3C,WAAY,GACrBiC,IAAWK,iBAAiB1C,MAAMjM,OAAS,GAAMgP,EAAU3C,WAC/D2C,EAAYV,IAAWK,iBAAiB1C,MAAM,GAC9CpC,EAASK,EAAc8E,IACvBnF,EAASoF,MAEwC,IAA7CX,IAAWK,iBAAiB1C,MAAMjM,QAClC6J,EAASqF,MATkB,iCAejCC,IAAoBJ,GAfa,YAiB/BT,IAAWK,iBAAiB1C,MAAMjM,OAAS,GAAMsO,IAAWK,iBAAiBS,UAjB9C,oBAkBnCJ,EAAYV,IAAWK,iBAAiB1C,MAAM,GAC9CpC,EAASK,EAAc8E,IACvBnF,EAASoF,QACJX,IAAWK,iBAAiB1C,MAAMjM,OAAS,IAAOgP,EAAU3C,UArB9B,kCAsBzBnE,EAAMoG,IAAWK,iBAAiBU,OAtBT,WAuB3BN,KAA2BI,EAvBA,0EA2BnCb,IAAWK,iBAAiBS,WAC5BvF,EAAS+E,MACT/E,EAASqF,OA7B0B,4CAAvB,yDAiCdD,GAAe,iBAAO,CACxBzF,KAAMjB,GAAWsF,iBAOfqB,GAAiB,iBAAO,CAC3B1F,KAAMjB,GAAW2F,kBC/LPoB,GAA6B,SAAC,GAAwB,IAG3D1J,EAHqCC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzCC,EAASC,EAAqBH,EAAMC,GACpC7B,EAAQ4B,EAAK5B,MAsBnB,OAnBI2B,EADAE,IAAaG,GAASC,aAElB,kBAAC,OAAD,CACIH,OAAQA,EAAOI,WACfjC,OAAQD,EACRD,KAAMC,EACNE,YAAa,EACbiC,eAAgB,KAIpB,kBAAC,QAAD,CACIL,OAAQA,EAAOI,WACfjC,OAAQD,EACRD,KAAMC,EACNE,YAAa,EACbiC,eAAgB,GAChBC,QAAS,KAGjBR,EAAKS,aAED,kBAAC,QAAD,KACKV,EACD,kBAAC,EAAD,CACI5G,EAAG+G,EAAOQ,YAAY,GACtBtH,EAAG8G,EAAOQ,YAAY,GACtBlC,KAAMwB,EAAKX,UAIfU,GAGHK,GAAWxF,OAAOC,OAAO,CAAEiG,kBAAmB,EAAGC,kBAAmB,EAAGV,aAAc,EAAGW,KAAM,ICZ9F0H,IAVFlO,IAAWC,KAAKC,KAUFE,OAAOC,OAAO,CACnCmB,QAAS,EACT2G,WAAY,EACZC,SAAU,EACV8G,sBAAuB,EACvBC,iCAAkC,EAClCC,+BAAgC,KAGvBC,GAAb,WACI,WAAYzK,GAA0C,IAAhCsH,EAA+B,uDAApB,KAAMC,EAAc,uDAAN,KAC3C,GADiD,oBAC5CD,GAAagB,MAAMoC,QAAQpD,IAAcC,GAAUe,MAAMoC,QAAQnD,GAM/D,CACH,IAAK,IAAIvM,EAAI,EAAGA,EAAIsM,EAASvM,SAAUC,EAAG,CACtC,GAAKsM,EAAStM,GAAGwB,KAAO,GAAO8K,EAAStM,GAAGwB,KAAO,IAC9C,MAAM,IAAImO,MAAM,uBAEpB,IAAK,IAAIpC,EAAI,EAAGA,EAAIjB,EAASvM,SAAUwN,EACnC,GAAKvN,IAAMuN,GAAOjB,EAAStM,GAAGwB,OAAS8K,EAASiB,GAAG/L,KAC/C,MAAM,IAAImO,MAAM,iCAI5B,IAXG,eAWM3P,GACL,GAAIuM,EAAMvM,GAAGiF,SAAYsH,EAAMvM,GAAGiF,OAAS,GAAOsH,EAAMvM,GAAGiF,OAAS,IAChE,MAAM,IAAI0K,MAAM,uBACpB,IAAgE,IAA5DrD,EAASrM,WAAU,SAAA+M,GAAC,OAAIA,EAAExL,OAAS+K,EAAMvM,GAAG6G,KAAKrF,QACjD,MAAM,IAAImO,MAAM,yBACpB,IAA8D,IAA1DrD,EAASrM,WAAU,SAAA+M,GAAC,OAAIA,EAAExL,OAAS+K,EAAMvM,GAAG0D,GAAGlC,QAC/C,MAAM,IAAImO,MAAM,uBAEpB,IAAK,IAAIpC,EAAI,EAAGA,EAAIhB,EAAMxM,SAAUwN,EAChC,GAAIvN,IAAMuN,EACN,GAAIvI,GACA,GAAKuH,EAAMvM,GAAG6G,KAAKrF,OAAS+K,EAAMgB,GAAG1G,KAAKrF,MAAU+K,EAAMvM,GAAG0D,GAAGlC,OAAS+K,EAAMgB,GAAG7J,GAAGlC,KACjF,MAAM,IAAImO,MAAM,oCAEpB,GAAKpD,EAAMvM,GAAG6G,KAAKrF,OAAS+K,EAAMgB,GAAG1G,KAAKrF,MAAU+K,EAAMvM,GAAG0D,GAAGlC,OAAS+K,EAAMgB,GAAG7J,GAAGlC,MAC7E+K,EAAMvM,GAAG0D,GAAGlC,OAAS+K,EAAMgB,GAAG1G,KAAKrF,MAAU+K,EAAMvM,GAAG6G,KAAKrF,OAAS+K,EAAMgB,GAAG7J,GAAGlC,KACpF,MAAM,IAAImO,MAAM,gCAhB3B3P,EAAI,EAAGA,EAAIuM,EAAMxM,SAAUC,EAAI,EAA/BA,GAuBTyB,KAAKmO,UAAL,YAAqBtD,GACrB7K,KAAKoO,OAAL,YAAkBtD,GAClB9K,KAAKqO,oBAAsB,GAC3BrO,KAAK4D,UAAYL,EACjBvD,KAAKsO,aAAe9I,KAAK+I,IAAL,MAAA/I,KAAI,YAAQqF,EAAS2D,KAAI,SAAAjD,GAAC,OAAIA,EAAExL,UAAS,OA3C7DC,KAAKmO,UAAY,GACjBnO,KAAKoO,OAAS,GACdpO,KAAKqO,oBAAsB,GAC3BrO,KAAK4D,UAAYL,EACjBvD,KAAKsO,aAAe,EAPhC,sDAkDchR,EAAGC,EAAGuC,GACZ,IAAMgB,EAAS,IAAIjB,EAAOvC,EAAGC,EAAGuC,EAAQE,KAAKsO,gBAE7C,OADAtO,KAAKmO,UAAU/P,KAAK0C,GACbA,IArDf,mCAwDiBA,GACT,IAAM4K,EAAQ1L,KAAKmO,UAAU3P,WAAU,SAAA+M,GAAC,OAAIA,IAAMzK,MACnC,IAAX4K,IACA1L,KAAKmO,UAAUM,OAAO/C,EAAO,GAC7B1L,KAAKoO,OAASpO,KAAKoO,OAAOM,QAAO,SAAAvK,GAAI,OAAKA,EAAKiB,KAAKrF,OAASe,EAAOf,MAAUoE,EAAKlC,GAAGlC,OAASe,EAAOf,WA5DlH,+BAgEasD,EAAYC,GACjB,OAAItD,KAAK4D,UACE5D,KAAKoO,OAAO5P,WAAU,SAAA4C,GAAC,OAAKA,EAAEgE,OAAS/B,GAAgBjC,EAAEa,KAAOqB,KAEhEtD,KAAKoO,OAAO5P,WAAU,SAAA4C,GAAC,OAAKA,EAAEgE,OAAS/B,GAAgBjC,EAAEa,KAAOqB,GAC/DlC,EAAEa,KAAOoB,GAAgBjC,EAAEgE,OAAS9B,OArExD,8BAwEYD,EAAYC,EAAUE,GAC1B,IAAMjF,EAAIyB,KAAK2O,SAAStL,EAAYC,GACpC,IAAW,IAAP/E,EAAU,CACV,IAAM4F,EAAO,IAAIf,EAAKC,EAAYC,EAAUtD,KAAK4D,UAAWJ,GAE5D,OADAxD,KAAKoO,OAAOhQ,KAAK+F,GACVA,EAGPnE,KAAKoO,OAAO7P,GAAGiF,OAASA,IAhFpC,iCAoFeW,GACPnE,KAAKoO,OAASpO,KAAKoO,OAAOM,QAAO,SAAAtN,GAAC,OAAIA,IAAM+C,OArFpD,0CA0FQ,GADAnE,KAAK4D,WAAa5D,KAAK4D,UACnB5D,KAAK4D,UACL5D,KAAKoO,OAAO3D,SAAQ,SAAAtG,GAAI,OAAIA,EAAKyK,2BAChC,CACD,IAAMC,EAAW,GACjB7O,KAAKoO,OAAO3D,SAAQ,SAAAtG,IAE0C,IADtD0K,EAASrQ,WAAU,SAAA4C,GAAC,OAAKA,EAAEgE,OAASjB,EAAKiB,MAAUhE,EAAEa,KAAOkC,EAAKlC,IAC7Db,EAAEa,KAAOkC,EAAKiB,MAAUhE,EAAEgE,OAASjB,EAAKlC,QAE5CkC,EAAKyK,oBACLC,EAASzQ,KAAK+F,OAGtBnE,KAAKoO,OAASS,KAtG1B,4CA0G0BxL,EAAYC,EAAUC,GACxC,OAAIA,EACOvD,KAAKqO,oBAAoB7P,WAAU,SAAA4C,GAAC,OAAKA,EAAEgE,OAAS/B,GAAgBjC,EAAEa,KAAOqB,KAE7EtD,KAAKqO,oBAAoB7P,WAAU,SAAA4C,GAAC,OAAKA,EAAEgE,OAAS/B,GAAgBjC,EAAEa,KAAOqB,GAC5ElC,EAAEa,KAAOoB,GAAgBjC,EAAEgE,OAAS9B,OA/GxD,2CAkHyBD,EAAYC,EAAUC,EAAUC,GACjDxD,KAAK8O,kCAAkCzL,EAAYC,EAAUC,GAC7D,IAAMY,EAAO,IAAIf,EAAKC,EAAYC,EAAUC,EAAUC,GAEtD,OADAxD,KAAKqO,oBAAoBjQ,KAAK+F,GACvBA,IAtHf,8CAyH4BA,GACpBnE,KAAKqO,oBAAsBrO,KAAKqO,oBAAoBK,QAAO,SAAAtN,GAAC,OAAIA,IAAM+C,OA1H9E,wDA6HsCd,EAAYC,EAAUC,GAEhDvD,KAAKqO,oBADL9K,EAC2BvD,KAAKqO,oBAAoBK,QAAO,SAAAtN,GAAC,OACvDA,EAAEgE,KAAKrF,OAASsD,EAAWtD,MAAUqB,EAAEa,GAAGlC,OAASuD,EAASvD,QAGtCC,KAAKqO,oBAAoBK,QAAO,SAAAtN,GAAC,OACtDA,EAAEgE,KAAKrF,OAASsD,EAAWtD,MAAUqB,EAAEa,GAAGlC,OAASuD,EAASvD,QAC5DqB,EAAEa,GAAGlC,OAASsD,EAAWtD,MAAUqB,EAAEgE,KAAKrF,OAASuD,EAASvD,WArI9E,mCA0JQ,OAAOC,KAAK4D,YA1JpB,+BA0IQ,OAAO5D,KAAKmO,YA1IpB,4BA8IQ,OAAOnO,KAAKoO,SA9IpB,yCAkJQ,OAAOpO,KAAKqO,qBAlJpB,aAqJ2BvD,GACnB9K,KAAKqO,oBAAsBvD,MAtJnC,KA8JMiE,G,4MACF9O,MAAQ,CACJ+O,mBAAenL,EACfoL,YAAa,IACbC,aAAc,K,EAWlBC,kBAAoB,SAACrO,GACjB,OAAO,EAAKsO,MAAMtC,MAAMjC,SAASrM,WAAU,SAAA+M,GAAC,OAAIA,IAAMzK,M,EAG1DuO,sBAAwB,SAACjO,EAAGN,GACxB,IAAMvC,EAAI,EAAK4Q,kBAAkBrO,GACjC,EAAKwO,SAAS,CAAEN,eAAuB,IAAPzQ,EAAWA,OAAIsF,K,EAGnD0L,oBAAsB,SAACjS,EAAGC,GACtB,IAAMuD,EAAS,EAAKb,MAAM+O,mBACXnL,IAAX/C,GACA,EAAKsO,MAAMI,qBAAqB1O,EAAQxD,EAAGC,I,EAGnDkS,qBAAuB,SAAArO,GACnB,EAAKmO,oBAAoBnO,EAAEE,OAAOhE,IAAK8D,EAAEE,OAAO/D,M,EAGpDmS,oBAAsB,SAACtO,EAAGN,GACtB,EAAKyO,oBAAoBnO,EAAEE,OAAOhE,IAAK8D,EAAEE,OAAO/D,KAChD,EAAK+R,SAAS,CAAEN,mBAAenL,K,EAGnC8L,YAAc,SAAAxL,GACV,IAAMd,EAAac,EAAKiB,KAAM9B,EAAWa,EAAKlC,GAE9C,OAAIqB,IAAaD,EACNkB,EAASY,KACVhB,EAAK6G,cAEsF,IAA3F,EAAKoE,MAAMtC,MAAMhC,MAAMtM,WAAU,SAAA4C,GAAC,OAAKA,EAAEgE,OAAS9B,GAAclC,EAAEa,KAAOoB,OACoB,IAA3F,EAAK+L,MAAMtC,MAAMhC,MAAMtM,WAAU,SAAA4C,GAAC,OAAKA,EAAEa,KAAOqB,GAAclC,EAAEgE,OAAS/B,KAC1EkB,EAASW,kBAETX,EAASU,kBALTV,EAASC,c,EAQxBoL,kBAAoB,SAAAxO,GAChB,IAAM9D,EAAI8D,EAAEyO,IAAIC,QAASvS,EAAI6D,EAAEyO,IAAIE,QAE/B,EAAKX,MAAMvH,YAAcgF,GAAU/F,WACnC,EAAKsI,MAAMY,UAAU1S,EAAGC,EAxOR,IAyOX,EAAK6R,MAAMvH,YAAcgF,GAAU9F,eACNlD,IAA9B,EAAKuL,MAAMa,gBACX,EAAKb,MAAMc,kB,EAKvBC,kBAAoB,SAAC/O,EAAGN,GAChB,EAAKsO,MAAMvH,YAAcgF,GAAUgB,uBACnCzM,EAAEgP,cAAe,EACjB,EAAKhB,MAAMiB,aAAavP,IACjB,EAAKsO,MAAMvH,YAAcgF,GAAU9F,UAC1C3F,EAAEgP,cAAe,OAEiBvM,IAA9B,EAAKuL,MAAMa,eACX,EAAKb,MAAMkB,aAAaxP,GAGxB,EAAKsO,MAAMmB,qBACP,+FACA,GACA,0SACA,qDACA,SAACC,GACiB,KAAVA,IACAA,OAAQ3M,GACZ,EAAKuL,MAAMqB,QAAQ,EAAKrB,MAAMa,eAAgBnP,EAAQ0P,GACtD,EAAKpB,MAAMc,mBAEf,KACA,eAGD,EAAKd,MAAMvH,YAAcgF,GAAUiB,mCAC1C1M,EAAEgP,cAAe,EAEjB,EAAKhB,MAAMsB,cAAc5P,EAAQ,Q,EAIzC6P,gBAAkB,SAACvP,EAAG+C,GACd,EAAKiL,MAAMvH,YAAcgF,GAAUgB,uBACnCzM,EAAEgP,cAAe,EACjB,EAAKhB,MAAMwB,WAAWzM,IACf,EAAKiL,MAAMvH,YAAcgF,GAAUkB,iCAC1C3M,EAAEgP,cAAe,EACjB,EAAKhB,MAAMsB,cAAc,KAAMvM,K,kEAjGlB,IAAD,OACV0M,EAAe,WACjB,EAAKvB,SAAS,CAAEL,YAAa6B,OAAOC,WAAY7B,aAAc4B,OAAOE,eAEzEF,OAAOG,SAAWJ,EAClBA,M,+BAgGM,IAAD,OACL,OACI,kBAAC,QAAD,CAAO1P,QAASnB,KAAK4P,kBAAmB9M,MAAO9C,KAAKC,MAAMgP,YAAalM,OAAQ/C,KAAKC,MAAMiP,cACtF,kBAAC,QAAD,KACI,kBAAC,OAAD,CAAM5M,KAAM,QAAShF,EAAG,EAAGC,EAAG,EAAGuF,MAAO9C,KAAKC,MAAMgP,YAAalM,OAAQ/C,KAAKC,MAAMiP,eAE/ElP,KAAKoP,MAAMtC,MAAMhC,MAAM0D,KAAI,SAACrK,EAAMuH,GAAP,OACvB,kBAAC,EAAD,CACIwF,IAAKxF,EACLrI,WAAYc,EAAKiB,KACjB9B,SAAUa,EAAKlC,GACfkC,KAAMA,EACNC,SAAU,EAAKuL,YAAYxL,GAC3BhD,QAAS,SAACC,GAAD,OAAO,EAAKuP,gBAAgBvP,EAAG+C,SAIhDnE,KAAKoP,MAAMtC,MAAMqE,mBAAmB3C,KAAI,SAACrK,EAAMuH,GAAP,OACpC,kBAAC,GAAD,CACIwF,IAAKxF,EACLrI,WAAYc,EAAKiB,KACjB9B,SAAUa,EAAKlC,GACfkC,KAAMA,EACNC,SAAU,EAAKuL,YAAYxL,QAInCnE,KAAKoP,MAAMtC,MAAMjC,SAAS2D,KAAI,SAAC1N,EAAQ4K,GAAT,OAC1B,kBAAC,EAAD,CACIwF,IAAKxF,EACL5K,OAAQA,EACRC,UAAW,EAAKqO,MAAMvH,YAAcgF,GAAU1M,QAC9CgB,QAAS,SAACC,GAAD,OAAO,EAAK+O,kBAAkB/O,EAAGN,IAC1CE,YAAa,SAAAI,GAAC,OAAI,EAAKiO,sBAAsBjO,EAAGN,IAChDG,UAAW,SAAAG,GAAC,OAAI,EAAKsO,oBAAoBtO,EAAGN,IAC5CI,WAAY,SAAAE,GAAC,OAAI,EAAKqO,qBAAqBrO,EAAGN,e,GA/IjDnB,IAAMC,WAsKpBwR,gBAnVS,SAAAnR,GAAK,MAAK,CAC9B6M,MAAO7M,EAAM8M,aAAaD,MAC1BjF,UAAW5H,EAAM8M,aAAalF,UAC9BoI,eAAgBhQ,EAAM8M,aAAakD,mBAmUZ,SAAA9H,GAAQ,MAAK,CACpC6H,UAAW,SAAC1S,EAAGC,EAAGuC,GAAP,OAAkBqI,EN5UR,SAAC7K,EAAGC,EAAGuC,GAAP,MAAmB,CACxCgI,KAAMjB,EAAWC,WACjBxJ,IACAC,IACAuC,UMwUsCkQ,CAAU1S,EAAGC,EAAGuC,KACtD2Q,QAAS,SAACpN,EAAYC,EAAUxD,GAAvB,OAAkCqI,ENtUxB,SAAC9E,EAAYC,EAAUE,GAAvB,MAAmC,CACtDsE,KAAMjB,EAAWE,SACjB1D,aACAC,WACAE,UMkUoDiN,CAAQpN,EAAYC,EAAUxD,KAClFuQ,aAAc,SAACvP,GAAD,OAAYqH,ENhUF,SAACrH,GAAD,MAAa,CACrCgH,KAAMjB,EAAWG,cACjBlG,UM8TmCuP,CAAavP,KAChD8P,WAAY,SAACzM,GAAD,OAAUgE,EN5TA,SAAChE,GAAD,MAAW,CACjC2D,KAAMjB,EAAWI,YACjB9C,QM0T+ByM,CAAWzM,KAC1CqL,qBAAsB,SAAC6B,EAAa/T,EAAGC,GAAjB,OAAuB4K,ENrRb,SAACkJ,EAAa/T,EAAGC,GAAjB,MAAwB,CACxDuK,KAAMjB,EAAWU,uBACjB8J,cACA/T,IACAC,KMiRsDiS,CAAqB6B,EAAa/T,EAAGC,KAC3F+S,aAAc,SAACxP,GAAD,OAAYqH,ENpTF,SAACrH,GAAD,MAAa,CACrCgH,KAAMjB,EAAWM,cACjBrG,UMkTmCwP,CAAaxP,KAChDoP,eAAgB,SAACpP,GAAD,OAAYqH,ENhTF,SAACrH,GAAD,MAAa,CACvCgH,KAAMjB,EAAWO,gBACjBtG,UM8SqCoP,CAAepP,KACpDyP,qBAAsB,SAACe,EAAO3O,EAAMvC,EAAMmR,EAAkBC,EAAUC,EAASC,GAAzD,OAClBvJ,ELlW4B,SAACmJ,EAAO3O,EAAMvC,EAAMmR,EAAkBC,EAAUG,GAAhD,IAA0DD,EAA1D,uDAAoE,KAApE,MAA8E,CAC9G5J,KAAMjB,EAAW6B,wBACjB4I,QACA3O,OACAvC,OACAmR,mBACAC,WACAG,WACAD,WK0VanB,CAAqBe,EAAO3O,EAAMvC,EAAMmR,EAAkBC,EAAUC,EAASC,KAC1FhB,cAAe,SAAC5P,EAAQqD,GAAT,OAAkBgE,EAAS9G,GAAKP,EAAQqD,QAG5CiN,CAA6CrC,I,4DCvWtDrQ,GAAKC,IAAWC,KAAKC,MAEd+S,GAAkB,SAAC,GAA8D,IAA5DjP,EAA2D,EAA3DA,KAA2D,IAArDmF,YAAqD,MAA9C,SAA8C,EAApC3G,EAAoC,EAApCA,QAAS0Q,EAA2B,EAA3BA,UAAWnS,EAAgB,EAAhBA,UACzE,OACI,4BAAQoI,KAAMA,EAAMpI,UAAWhB,GAAG,SAAUgB,EAAX,2BAAsCmS,IAAa1Q,QAASA,GACxFwB,I,oBCLPjE,GAAKC,IAAWC,KAAKC,MAEdiT,GAAkB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOvB,EAAgC,EAAhCA,MAAOwB,EAAyB,EAAzBA,IAAKzD,EAAoB,EAApBA,IAAK0D,EAAe,EAAfA,SACtD,OACI,yBAAKvS,UAAWhB,GAAG,mBACf,yBAAKgB,UAAWhB,GAAG,iBAAkBqT,GACrC,2BACIjK,KAAM,QACNpI,UAAWhB,GAAG,UACd8R,MAAOA,EACPwB,IAAKA,EACLzD,IAAKA,EACL0D,SAAUA,M,oBCZpBvT,GAAKC,IAAWC,KAAKC,MAEdqT,GAAe,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOF,EAAe,EAAfA,SAClC,OACI,4BAAQvS,UAAWhB,GAAG,kBAAmBuT,SAAUA,GAC9CE,EAAM3D,KAAI,SAAC4D,EAAM1G,GAAP,OAAiB,4BAAQwF,IAAKxF,EAAO8E,MAAO9E,GAAQ0G,Q,oBCLrE1T,GAAKC,IAAWC,KAAKC,MAEdwT,GAAsB,SAAC,GAA8C,IAA5C1P,EAA2C,EAA3CA,KAAMsP,EAAqC,EAArCA,SAAUvS,EAA2B,EAA3BA,UAAW4S,EAAgB,EAAhBA,UAC7D,OACI,yBAAK5S,UAAWhB,GAAG,uBAAwBgB,IACvC,2BAAOA,UAAWhB,GAAG,iBACjB,2BAAOoJ,KAAM,WAAYmK,SAAUA,EAAUM,QAASD,IACtD,0BAAM5S,UAAWhB,GAAG,aAExB,0BAAMgB,UAAWhB,GAAG,SAAUiE,KCVtC6P,GAAO,GACPjI,GAAQ,GAiBG,IACXxK,KAAM,mFAEN0S,QAAS3I,GAAc3C,cAEvBuL,SAAUzI,GAASF,QAEnB1I,KAAM,SAACwJ,EAAUC,EAAOqC,GACpB,IAAMpC,EAAgBH,GAAyBC,EAAUC,GACzD0H,GAAO,GACP3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,GAAK1R,EAAOf,OAAQ,KAC/CwK,GAAQ,GAER,IAAMoI,EAAY7B,OAAO8B,YAAYC,OA5BjC,SAANC,EAAOhS,EAAQiK,GAGjB,IAAI9I,EAFJuQ,GAAK1R,IAAU,EACfyJ,GAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,gBAEjFoB,EAAcjK,GAAQ2J,SAAQ,SAAAwI,GAC1BhR,EAAKgR,EAASlT,KACTyS,GAAKvQ,KACNsI,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,cAC5GkJ,EAAI7Q,EAAI8I,GACRR,GAAMnM,KAAK,CAAEgH,KAAMnD,EAAIA,GAAInB,EAAQyC,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,kBAGpHW,GAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaI,KAAM+J,WAAYtJ,GAAoBC,gBAkB5EmJ,CAAI3F,EAAMpN,KAAMgL,GAEhB,IAAMmI,EAAUpC,OAAO8B,YAAYC,MAGnC,MAAO,CACHtI,SACA4I,WAAY,CAAC,mCAAD,QAJCD,EAAUP,GAKAS,QAAQ,GADnB,4GAEY9I,GAAmBC,SC7C1C8I,GAAb,WACI,aAAe,oBACXrT,KAAKsT,OAAS,GAFtB,sDAUQ,OAA8B,IAAvBtT,KAAKsT,OAAOhV,SAV3B,2BAaSkS,GACDxQ,KAAKsT,OAAOlV,KAAKoS,KAdzB,4BAmBQ,OAAOxQ,KAAKsT,OAAO5V,UAnB3B,6BAuBQ,OAAOsC,KAAKsT,OAAO,KAvB3B,6BAMQ,OAAOtT,KAAKsT,OAAOhV,WAN3B,KC0Be,IACXyB,KAAM,6EAEN0S,QAAS3I,GAAc3C,cAEvBuL,SAAUzI,GAASF,QAEnB1I,KAAM,SAACwJ,EAAUC,EAAOqC,GACpB,IAAMpC,EAAgBH,GAAyBC,EAAUC,GACrD0H,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAC/C,IAAIwK,EAAQ,GAENoI,EAAY7B,OAAO8B,YAAYC,OAnCjC,SAAC1F,EAAOpC,EAAeyH,EAAMjI,GACrCiI,EAAKrF,IAAS,EACd,IAGIrM,EAAQmB,EAHN5E,EAAQ,IAAIgW,GAIlB,IAHAhW,EAAMe,KAAK+O,GACX5C,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO4F,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,iBAEhFtM,EAAMkW,WACVzS,EAASzD,EAAMmW,MACfjJ,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,gBAClFoB,EAAcjK,GAAQ2J,SAAQ,SAAAwI,GAC1BhR,EAAKgR,EAASlT,KACTyS,EAAKvQ,KACNsI,EAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,cAC5G4I,EAAKvQ,IAAM,EACX5E,EAAMe,KAAK6D,GACXsI,EAAMnM,KAAK,CAAE0C,OAAQmB,EAAI8Q,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,oBAG7FY,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaI,KAAM+J,WAAYtJ,GAAoBC,gBAmBhF8J,CAAItG,EAAMpN,KAAMgL,EAAeyH,EAAMjI,GAErC,IAAM2I,EAAUpC,OAAO8B,YAAYC,MAGnC,MAAO,CACHtI,QACA4I,WAAY,CAAC,mCAAD,QAJCD,EAAUP,GAKAS,QAAQ,GADnB,4GAEY9I,GAAmBC,QCExC,IACXxK,KAAM,oGAEN0S,QAAS3I,GAAc3C,cAEvBuL,SAAUzI,GAASC,SAEnB7I,KAAM,SAACwJ,EAAUC,EAAOqC,GACpB,IAAMpC,EAAgBH,GAAyBC,EAAUC,GACrD0H,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAC/C,IAAIwK,EAAQ,GAENoI,EAAY7B,OAAO8B,YAAYC,OAtD5B,SAAC1F,EAAOtC,EAAUE,EAAeyH,EAAMjI,GACpD,IAAMmJ,EAAI,GACV7I,EAASJ,SAAQ,SAAAc,GACTA,IAAM4B,IAEVuG,EAAEnI,GAAKoI,OAAOC,iBACdrJ,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGnL,KAAM,SAAK2S,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,QAEpI+I,EAAEvG,GAAS,EACX5C,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO/M,KAAM,IAAK2S,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,qBATvC,eAWrDtL,GACL,IAAIgN,GAAK,EAKT,GAJAV,EAASJ,SAAQ,SAAAqB,IACR0G,EAAK1G,MAAe,IAAPP,GAAcmI,EAAE5H,GAAK4H,EAAEnI,MACrCA,EAAIO,MAER4H,EAAEnI,KAAOoI,OAAOC,iBAChB,cAEJpB,EAAKjH,IAAK,EACVhB,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGwH,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,gBArB3B,oBAuB3BoB,EAAcQ,IAvBa,IAuB1D,2BAAiD,CAAC,IAAD,UAAjCtJ,EAAiC,EAAvClC,KAAUyD,EAA6B,EAA7BA,OACZgP,EAAKvQ,KAETuB,EAASmQ,OAAOnQ,GAEhB+G,EAAMnM,KAAK,CAAEgH,KAAMmG,EAAGtJ,KAAIsB,UAAU,EAAMC,SAAQuP,OAAQxJ,GAAWD,UAAW0J,WAAYtJ,GAAoBE,cAC5G8J,EAAEnI,GAAK/H,EAASkQ,EAAEzR,IAClByR,EAAEzR,GAAMyR,EAAEnI,GAAK/H,EACf+G,EAAMnM,KAAK,CAAEgH,KAAMmG,EAAGtJ,KAAIsB,UAAU,EAAMC,SAAQuP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,YAAae,WAAW,IACnIJ,EAAMnM,KAAK,CAAE0C,OAAQmB,EAAI7B,KAAMsT,EAAEzR,GAAK8Q,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,sBAEpGU,EAAMnM,KAAK,CAAEgH,KAAMmG,EAAGtJ,KAAIsB,UAAU,EAAMC,SAAQuP,OAAQxJ,GAAWR,SAAUiK,WAAYtJ,GAAoBE,gBAlC7D,8BAqC1DW,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGwH,OAAQlK,EAAaI,KAAM+J,WAAYtJ,GAAoBC,iBA1BvF,IAAK,IAAIpL,KAAKsM,EAAU,kBAOhB,OAsCJgJ,CAAS1G,EAAMpN,KAAM8K,EAAS2D,KAAI,SAAAjD,GAAC,OAAIA,EAAExL,QAAOgL,EAAeyH,EAAMjI,GAErE,IAAM2I,EAAUpC,OAAO8B,YAAYC,MAGnC,MAAO,CACHtI,QACA4I,WAAY,CAAC,mCAAD,QAJCD,EAAUP,GAKAS,QAAQ,GADnB,4GAEY9I,GAAmBC,QCTxC,IACXxK,KAAM,kFAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASE,UAAYF,GAASC,SAAWD,GAASzF,aAE5DnD,KAAM,SAACwJ,EAAUC,GACb,GAAwB,IAApBD,EAASvM,OACT,MAAO,CAACiM,MAAO,GAAI4I,WAAY,IAEnC,IAAMpI,EAAgBH,GAAyBC,EAAUC,GACrD0H,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAC/C,IAAIwK,EAAQ,GAENoI,EAAY7B,OAAO8B,YAAYC,MAG/BiB,EA3ED,SAAC3G,EAAOtC,EAAUC,EAAOC,EAAeyH,EAAMjI,GACvDO,EAAML,SAAQ,SAAArJ,GACVmJ,EAAMnM,KAAK,CAAEgH,KAAMhE,EAAEgE,KAAKrF,KAAMkC,GAAIb,EAAEa,GAAGlC,KAAMwD,UAAU,EAAOC,OAAQpC,EAAEoC,OAAQuP,OAAQxJ,GAAWE,OAAQuJ,WAAYtJ,GAAoBE,YAAae,WAAW,OAGzK,IAAM+I,EAAI,GACJK,EAAM,GACZlJ,EAASJ,SAAQ,SAAAc,GACTA,IAAM4B,IAEVuG,EAAEnI,GAAKoI,OAAOC,iBACdrJ,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGnL,KAAM,SAAK2S,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,IAChIoJ,EAAIxI,GAAK,SAEbmI,EAAEvG,GAAS,EACX5C,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO/M,KAAM,IAAK2S,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,qBAfpC,eAiBxDtL,GACL,IAAIgN,GAAK,EAKT,GAJAV,EAASJ,SAAQ,SAAAqB,IACR0G,EAAK1G,MAAe,IAAPP,GAAcmI,EAAE5H,GAAK4H,EAAEnI,MACrCA,EAAIO,MAER4H,EAAEnI,KAAOoI,OAAOC,iBAChB,cAEJpB,EAAKjH,IAAK,EACVhB,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGwH,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,gBA3BxB,oBA6B9BoB,EAAcQ,IA7BgB,IA6B7D,2BAAiD,CAAC,IAAD,UAAjCtJ,EAAiC,EAAvClC,KAAUyD,EAA6B,EAA7BA,OACZgP,EAAKvQ,KAETuB,EAASmQ,OAAOnQ,GAEhB+G,EAAMnM,KAAK,CAAEgH,KAAMmG,EAAGtJ,KAAIsB,UAAU,EAAOC,SAAQuP,OAAQxJ,GAAWD,UAAW0J,WAAYtJ,GAAoBE,cAC7GpG,EAASkQ,EAAEzR,IACXyR,EAAEzR,GAAMuB,EACQ,OAAZuQ,EAAI9R,IACJsI,EAAMnM,KAAK,CAAEgH,KAAM2O,EAAI9R,GAAKA,KAAIsB,UAAU,EAAOC,SAAQuP,OAAQxJ,GAAWE,OAAQuJ,WAAYtJ,GAAoBE,YAAae,WAAW,IAEhJoJ,EAAI9R,GAAMsJ,EACVhB,EAAMnM,KAAK,CAAEgH,KAAMmG,EAAGtJ,KAAIsB,UAAU,EAAOC,SAAQuP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,YAAae,WAAW,IACpIJ,EAAMnM,KAAK,CAAE0C,OAAQmB,EAAI7B,KAAMsT,EAAEzR,GAAK8Q,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,sBAEpGU,EAAMnM,KAAK,CAAEgH,KAAMmG,EAAGtJ,KAAIsB,UAAU,EAAOC,SAAQuP,OAAQxJ,GAAWE,OAAQuJ,WAAYtJ,GAAoBE,gBA5CzD,8BA+C7DW,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGwH,OAAQlK,EAAaI,KAAM+J,WAAYtJ,GAAoBC,iBA9BvF,IAAK,IAAIpL,KAAKsM,EAAU,kBAOhB,MA0BR,IAAIiJ,EAAY,EAChB,IAAK,IAAMvI,KAAKmI,EACZI,GAAaJ,EAAEnI,GACnB,OAAOuI,EAsBeE,CADJnJ,EAASrF,KAAKyO,MAAMzO,KAAK0O,SAAWrJ,EAASvM,SAC9ByB,KAAM8K,EAAS2D,KAAI,SAAAjD,GAAC,OAAIA,EAAExL,QAAO+K,EAAOC,EAAeyH,EAAMjI,GAGpFrI,EADU4O,OAAO8B,YAAYC,MACRF,EAE3B,MAAO,CACHpI,QACA4I,WAAY,CAAC,2IAAD,OACqBW,GADrB,0CAEE5R,EAASkR,QAAQ,GAFnB,4GAGY9I,GAAmBC,QChG1C4J,GAAb,WACI,aAAe,oBACXnU,KAAKxC,OAAS,GACdwC,KAAKoU,KAAO,GAHpB,oDAMY9W,GACJ0C,KAAKxC,OAAOF,GAAKA,EACjB0C,KAAKoU,KAAK9W,GAAK,IARvB,2BAWSA,GACD,OAAIA,IAAM0C,KAAKxC,OAAOF,GACXA,GACX0C,KAAKxC,OAAOF,GAAK0C,KAAKqU,KAAKrU,KAAKxC,OAAOF,IAChC0C,KAAKxC,OAAOF,MAf3B,4BAkBUA,EAAGC,GAGL,IAFAD,EAAI0C,KAAKqU,KAAK/W,OACdC,EAAIyC,KAAKqU,KAAK9W,KAENyC,KAAKoU,KAAK9W,GAAK0C,KAAKoU,KAAK7W,GAA7B,OACa,CAACA,EAAGD,GAAZA,EADL,KACQC,EADR,KAEAyC,KAAKxC,OAAOD,GAAKD,EACjB0C,KAAKoU,KAAK9W,IAAM0C,KAAKoU,KAAK7W,OAzBtC,KC+Be,IACXwC,KAAM,oGAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASE,UAAYF,GAASC,SAAWD,GAASzF,aAE5DnD,KAAM,SAACwJ,EAAUC,GACb,GAAwB,IAApBD,EAASvM,OACT,MAAO,CAACiM,MAAO,GAAI4I,WAAY,IAEnC,IAAI5I,EAAQ,GAENoI,EAAY7B,OAAO8B,YAAYC,MAE/BiB,EA3CE,SAACjJ,EAAUC,EAAOP,GAC9B,IAAM+J,EAAM,IAAIH,GAChBtJ,EAASJ,SAAQ,SAAAc,GAAC,OAAI+I,EAAIC,QAAQhJ,EAAExL,SACpC+K,EAAMK,MAAK,SAAC/C,EAAGgD,GAAJ,OAAUhD,EAAE5E,OAAS4H,EAAE5H,UAElCsH,EAAML,SAAQ,SAAArJ,GACVmJ,EAAMnM,KAAK,CAAEgH,KAAMhE,EAAEgE,KAAKrF,KAAMkC,GAAIb,EAAEa,GAAGlC,KAAMwD,UAAU,EAAOC,OAAQpC,EAAEoC,OAAQuP,OAAQxJ,GAAWE,OAAQuJ,WAAYtJ,GAAoBE,YAAae,WAAW,OAGzK,IACIvF,EAAMnD,EAAIuB,EADVsQ,EAAY,EAgBhB,OAdAhJ,EAAML,SAAQ,SAAArJ,GACVgE,EAAOhE,EAAEgE,KAAKrF,KACdkC,EAAKb,EAAEa,GAAGlC,KACVyD,EAASmQ,OAAOvS,EAAEoC,QAClB+G,EAAMnM,KAAK,CAAEgH,OAAMnD,KAAIsB,UAAU,EAAOC,SAAQuP,OAAQxJ,GAAWD,UAAW0J,WAAYtJ,GAAoBE,cAC1G0K,EAAID,KAAKjP,KAAUkP,EAAID,KAAKpS,IAC5B6R,GAAatQ,EACb8Q,EAAIE,MAAMpP,EAAMnD,GAChBsI,EAAMnM,KAAK,CAAEgH,OAAMnD,KAAIsB,UAAU,EAAOC,SAAQuP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,eAEzGW,EAAMnM,KAAK,CAAEgH,OAAMnD,KAAIsB,UAAU,EAAOC,SAAQuP,OAAQxJ,GAAWE,OAAQuJ,WAAYtJ,GAAoBE,iBAI5GkK,EAkBeW,CAAQ5J,EAAUC,EAAOP,GAGrCrI,EADU4O,OAAO8B,YAAYC,MACRF,EAE3B,MAAO,CACHpI,QACA4I,WAAY,CAAC,2IAAD,OACqBW,GADrB,0CAEE5R,EAASkR,QAAQ,GAFnB,4GAGY9I,GAAmBC,QCxBxC,IACXxK,KAAM,uHAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASzF,aAEnBnD,KAAM,SAACwJ,EAAUC,GACb,GAAwB,IAApBD,EAASvM,OACT,MAAO,CAACiM,MAAO,GAAI4I,WAAY,IAEnC,IAAMpI,EAAgBH,GAAyBC,EAAUC,GACrD0H,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAC/C,IAAIwK,EAAQ,GAENoI,EAAY7B,OAAO8B,YAAYC,MAG/B6B,EA/CF,SAACvH,EAAOtC,EAAUE,EAAeyH,EAAMjI,GAC/CiI,EAAKrF,IAAS,EACd,IAGIrM,EAAQmB,EAHN5E,EAAQ,IAAIgW,GAIlB,IAHAhW,EAAMe,KAAK+O,GACX5C,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO4F,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,iBAEhFtM,EAAMkW,WACVzS,EAASzD,EAAMmW,MACfjJ,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,gBAClFoB,EAAcjK,GAAQ2J,SAAQ,SAAAwI,GAC1BhR,EAAKgR,EAASlT,KACTyS,EAAKvQ,KACNsI,EAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAOwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,cAC7G4I,EAAKvQ,IAAM,EACX5E,EAAMe,KAAK6D,GACXsI,EAAMnM,KAAK,CAAE0C,OAAQmB,EAAI8Q,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,oBAG7FY,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaI,KAAM+J,WAAYtJ,GAAoBC,gBAlB3B,oBAsBpCkB,GAtBoC,IAsBzD,gCAAW/J,EAAX,QACI,IAAK0R,EAAK1R,EAAOf,MACb,OAAO,GAxB0C,8BAyBzD,OAAO,EAsBiB0T,CADN5I,EAASrF,KAAKyO,MAAMzO,KAAK0O,SAAWrJ,EAASvM,SAC7ByB,KAAM8K,EAAUE,EAAeyH,EAAMjI,GAG7DrI,EADU4O,OAAO8B,YAAYC,MACRF,EAE3B,MAAO,CACHpI,QACA4I,WAAY,CAAC,4BAAD,OACAuB,EAAc,6CAAY,0DAD1B,0CAEExS,EAASkR,QAAQ,GAFnB,4GAGY9I,GAAmBC,QC1DnDiI,GAAO,GACPjI,GAAQ,GAENuI,GAAM,SAANA,EAAOhS,EAAQiK,GAA2C,IAGxD9I,EAH4BzE,EAA2B,wDAAjB,EAAG+E,EAAc,uDAAN,EACrDiQ,GAAK1R,GAAUyB,EACfgI,GAAMnM,KAAK,CAAE0C,SAAQiS,OAAkB,IAAVxQ,EAAcsG,EAAalI,QAAUkI,EAAajI,QAASoS,WAAYtJ,GAAoBC,gBAF7D,oBAIpCoB,EAAcjK,IAJsB,IAI3D,2BAA8C,CAAC,IAApCmS,EAAmC,QAE1C,GADAhR,EAAKgR,EAASlT,KACTyS,GAAKvQ,IAKH,GAAKzE,IAAWyE,GAAQuQ,GAAKvQ,KAAQM,EAExC,OADAgI,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWD,UAAW0J,WAAYtJ,GAAoBE,eAC1G,MAPI,CAEX,GADAW,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,eACvGkJ,EAAI7Q,EAAI8I,EAAejK,EAAQ,EAAIyB,GACpC,OAAO,EACXgI,GAAMnM,KAAK,CAAEgH,KAAMnD,EAAIA,GAAInB,EAAQyC,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,gBAVzD,8BAgB3D,OAAO,GAGI,IACX7J,KAAM,yIAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASzF,aAEnBnD,KAAM,SAACwJ,EAAUC,GACb,GAAwB,IAApBD,EAASvM,OACT,MAAO,CAACiM,MAAO,GAAI4I,WAAY,IAEnC,IAAMpI,EAAgBH,GAAyBC,EAAUC,GACzD0H,GAAO,GACP3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,GAAK1R,EAAOf,MAAQ,KAC/CwK,GAAQ,GAER,IATuB,EASjBoI,EAAY7B,OAAO8B,YAAYC,MAEjC8B,GAAc,EAXK,cAYM9J,GAZN,IAYvB,2BAAuC,CAAC,IAAtB/J,EAAqB,QAA3Bf,KACR,IAAKyS,GAAK1R,MACN6T,GAAe7B,GAAIhS,EAAQiK,IAEvB,OAhBW,8BAoBvB,IACM7I,EADU4O,OAAO8B,YAAYC,MACRF,EAE3B,MAAO,CACHpI,SACA4I,WAAY,CAAC,4BAAD,OACAwB,EAAc,+DAAe,4EAD7B,0CAEEzS,EAASkR,QAAQ,GAFnB,4GAGY9I,GAAmBC,SChDjDkJ,GAAM,SAACtG,EAAOtC,EAAUE,EAAeyH,EAAMjI,GAC/C,IAAMmJ,EAAI,GAAIkB,EAAI,GAClB/J,EAASJ,SAAQ,SAAA3J,GACb4S,EAAE5S,EAAOf,MAAQ4T,OAAOC,iBACxBgB,EAAE9T,EAAOf,OAAS,KAEtByS,EAAKrF,IAAS,EACd,IAIIrM,EAAQ+T,EAAO5S,EAJb5E,EAAQ,IAAIgW,GAKlB,IAJAhW,EAAMe,KAAK,CAAE0C,OAAQqM,EAAO0H,MAAO,IACnCtK,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO4F,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,iBAGhFtM,EAAMkW,WACVzS,EAASzD,EAAMyX,OAAOhU,OACtB+T,EAAQxX,EAAMmW,MAAMqB,MACpBnB,EAAE5S,GAAU+T,EACZ9J,EAAcjK,GAAQ2J,SAAQ,SAAAwI,GAC1BhR,EAAKgR,EAASlT,KACTyS,EAAKvQ,KACNuQ,EAAKvQ,IAAM,EACX5E,EAAMe,KAAK,CAAE0C,OAAQmB,EAAI4S,MAAOA,EAAQ,IACxCD,EAAE3S,GAAMnB,MAKpB,MAAsB,IAAf8T,EAAE9T,IACLyJ,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,cAAegB,WAAW,IAC5GJ,EAAMnM,KAAK,CAAEgH,KAAMwP,EAAE9T,GAASmB,GAAInB,EAAQyC,UAAU,EAAOwP,OAAQxJ,GAAWD,UAAW0J,WAAYtJ,GAAoBE,YAAae,WAAW,IACjJ7J,EAAS8T,EAAE9T,GAIf,OAFAyJ,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,cAAegB,WAAW,IAC5GJ,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO/M,KAAMyU,EAAO9B,OAAQ5J,GAAiBG,UAAW0J,WAAYtJ,GAAoBG,qBACtGgL,GA4BI,IACX9U,KAAM,4GAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASzF,aAAeyF,GAASE,UAE3C9I,KAAM,SAACwJ,EAAUC,GACb,GAAwB,IAApBD,EAASvM,OACT,MAAO,CAACiM,MAAO,GAAI4I,WAAY,IAEnC,IAAM5I,EAAQ,GACRQ,EAAgBH,GAAyBC,EAAUC,GAEnD6H,EAAY7B,OAAO8B,YAAYC,MAE/B/S,EAzCK,SAAC+K,EAAUC,EAAOC,EAAeR,GAChD,IAAIiI,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAE/C,IAJ0D,EAItDgV,EAAiB,GACjBjV,EAAS6T,OAAOC,iBALsC,cAM9B/I,GAN8B,IAM1D,2BAAsC,CAAC,IAArBsC,EAAoB,QAA1BpN,KACR8K,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAC/CgV,EAAe5H,GAASsG,GAAItG,EAAOtC,EAAUE,EAAeyH,EAAMjI,GAClEA,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO/M,KAAM2U,EAAe5H,GAAQ4F,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,IAEtJJ,EAAMnM,KAAK,CAAE2U,OAAQlK,EAAaK,qBAAsB8J,WAAYtJ,GAAoBC,cAAegB,WAAW,IAClHJ,EAAMnM,KAAK,CAAE2U,OAAQxJ,GAAWL,qBAAsB8J,WAAYtJ,GAAoBE,YAAae,WAAW,IAE9G7K,EAAS0F,KAAKwM,IAAIlS,EAAQiV,EAAe5H,KAda,kDAiBlCtC,GAjBkC,IAiB1D,2BAAkC,CAAC,IAAjBU,EAAgB,QAAtBxL,KACJgV,EAAexJ,KAAOzL,GACtByK,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGwH,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,cAAegB,WAAW,KAnB7D,8BAsB1D,OAAO7K,EAmBYkV,CAAWnK,EAAUC,EAAOC,EAAeR,GAGpDrI,EADU4O,OAAO8B,YAAYC,MACRF,EAE3B,MAAO,CACHpI,QACA4I,WAAY,CAAC,wEAAD,OACSrT,GADT,0CAEEoC,EAASkR,QAAQ,GAFnB,4GAGY9I,GAAmBC,QCvFjDkJ,GAAM,SAACtG,EAAOtC,EAAUE,EAAeyH,EAAMjI,GAC/C,IAAMmJ,EAAI,GAAIkB,EAAI,GAClB/J,EAASJ,SAAQ,SAAA3J,GACb4S,EAAE5S,EAAOf,MAAQ4T,OAAOC,iBACxBgB,EAAE9T,EAAOf,OAAS,KAEtByS,EAAKrF,IAAS,EACd,IAIIrM,EAAQ+T,EAAO5S,EAJb5E,EAAQ,IAAIgW,GAKlB,IAJAhW,EAAMe,KAAK,CAAE0C,OAAQqM,EAAO0H,MAAO,IACnCtK,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO4F,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,iBAGhFtM,EAAMkW,WACVzS,EAASzD,EAAMyX,OAAOhU,OACtB+T,EAAQxX,EAAMmW,MAAMqB,MACpBnB,EAAE5S,GAAU+T,EACZ9J,EAAcjK,GAAQ2J,SAAQ,SAAAwI,GAC1BhR,EAAKgR,EAASlT,KACTyS,EAAKvQ,KACNuQ,EAAKvQ,IAAM,EACX5E,EAAMe,KAAK,CAAE0C,OAAQmB,EAAI4S,MAAOA,EAAQ,IACxCD,EAAE3S,GAAMnB,MAKpB,MAAsB,IAAf8T,EAAE9T,IACLyJ,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,cAAegB,WAAW,IAC5GJ,EAAMnM,KAAK,CAAEgH,KAAMwP,EAAE9T,GAASmB,GAAInB,EAAQyC,UAAU,EAAOwP,OAAQxJ,GAAWD,UAAW0J,WAAYtJ,GAAoBE,YAAae,WAAW,IACjJ7J,EAAS8T,EAAE9T,GAIf,OAFAyJ,EAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,cAAegB,WAAW,IAC5GJ,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO/M,KAAMyU,EAAO9B,OAAQ5J,GAAiBG,UAAW0J,WAAYtJ,GAAoBG,qBACtGgL,GA4BI,IACX9U,KAAM,uMAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASzF,aAAeyF,GAASE,UAE3C9I,KAAM,SAACwJ,EAAUC,GACb,GAAwB,IAApBD,EAASvM,OACT,MAAO,CAACiM,MAAO,GAAI4I,WAAY,IAEnC,IAAM5I,EAAQ,GACRQ,EAAgBH,GAAyBC,EAAUC,GAEnD6H,EAAY7B,OAAO8B,YAAYC,MAE/BoC,EAzCO,SAACpK,EAAUC,EAAOC,EAAeR,GAClD,IAAIiI,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAE/C,IAJ4D,EAIxDgV,EAAiB,GACjBE,EAAW,EAL6C,cAMhCpK,GANgC,IAM5D,2BAAsC,CAAC,IAArBsC,EAAoB,QAA1BpN,KACR8K,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,KAC/CgV,EAAe5H,GAASsG,GAAItG,EAAOtC,EAAUE,EAAeyH,EAAMjI,GAClEA,EAAMnM,KAAK,CAAE0C,OAAQqM,EAAO/M,KAAM2U,EAAe5H,GAAQ4F,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,IAEtJJ,EAAMnM,KAAK,CAAE2U,OAAQlK,EAAaK,qBAAsB8J,WAAYtJ,GAAoBC,cAAegB,WAAW,IAClHJ,EAAMnM,KAAK,CAAE2U,OAAQxJ,GAAWL,qBAAsB8J,WAAYtJ,GAAoBE,YAAae,WAAW,IAE9GsK,EAAWzP,KAAK+I,IAAI0G,EAAUF,EAAe5H,KAdW,kDAiBpCtC,GAjBoC,IAiB5D,2BAAkC,CAAC,IAAjBU,EAAgB,QAAtBxL,KACJgV,EAAexJ,KAAO0J,GACtB1K,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGwH,OAAQlK,EAAaC,OAAQkK,WAAYtJ,GAAoBC,cAAegB,WAAW,KAnB3D,8BAsB5D,OAAOsK,EAmBcC,CAAarK,EAAUC,EAAOC,EAAeR,GAGxDrI,EADU4O,OAAO8B,YAAYC,MACRF,EAE3B,MAAO,CACHpI,QACA4I,WAAY,CAAC,8EAAD,OACU8B,GADV,0CAEE/S,EAASkR,QAAQ,GAFnB,4GAGY9I,GAAmBC,QCxFnDiI,GAAO,GACPjI,GAAQ,GACR4K,GAAc,GACdC,GAAgB,EAChBC,GAAiB,EAEfvC,GAAM,SAANA,EAAOhS,EAAQiK,GAGjB,IAAI9I,EAFJuQ,GAAK1R,IAAU,EACfyJ,GAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,gBAEjFoB,EAAcjK,GAAQ2J,SAAQ,SAAAwI,GAC1BhR,EAAKgR,EAASlT,KACTyS,GAAKvQ,KACNsI,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,cAC5GkJ,EAAI7Q,EAAI8I,OAGhBR,GAAMnM,KAAK,CAAE0C,SAAQV,KAAMgV,KAAiBrC,OAAQ5J,GAAiBG,UAAW0J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,IAC/IJ,GAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaI,KAAM+J,WAAYtJ,GAAoBC,gBAChFwL,GAAY/W,KAAK0C,IAiCN,IACXf,KAAM,oJAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASG,SAAWH,GAASI,QAEvChJ,KAAM,SAACwJ,EAAUC,GACb,IAAMC,EAAgBH,GAAyBC,EAAUC,GACzDP,GAAQ,GAER,IAAMoI,EAAY7B,OAAO8B,YAAYC,OAzC7B,SAAChI,EAAUC,EAAOC,EAAeR,GAC7CiI,GAAO,GACP2C,GAAc,GACd,IAAMG,EAAgB,GACtBzK,EAASJ,SAAQ,SAAA3J,GACb0R,GAAK1R,EAAOf,OAAQ,EACpBuV,EAAcxU,EAAOf,OAAQ,KANsB,oBAQ5B8K,GAR4B,IAQvD,2BAAqC,CACjCE,EADiC,QAAzBhL,MACY0K,SAAQ,SAAAxI,GACxBqT,EAAcrT,EAAGlC,OAAQ,MAVsB,8BAavDqV,GAAgB,EAChBC,GAAiB,EAdsC,oBAgB3BxK,GAhB2B,IAgBvD,2BAAsC,CAAC,IAArBsC,EAAoB,QAA1BpN,KACJuV,EAAcnI,IACd2F,GAAI3F,EAAOpC,IAlBoC,8BAsBvDR,EAAMnM,KAAK,CAAE2U,OAAQxJ,GAAWL,qBAAsB8J,WAAYtJ,GAAoBE,YAAae,WAAW,IAtBvD,oBAwBvCwK,GAAYI,WAxB2B,IAwBvD,2BAAuC,CAAC,IAA7BhK,EAA4B,QACnChB,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGnL,KAAMiV,KAAkBtC,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,IAC7IJ,EAAMnM,KAAK,CAAE0C,OAAQyK,EAAGwH,OAAQlK,EAAaE,SAAUiK,WAAYtJ,GAAoBC,iBA1BpC,+BA2CnD6L,CAAQ3K,EAAUC,EAAOC,EAAeR,IAExC,IAAM2I,EAAUpC,OAAO8B,YAAYC,MAGnC,MAAO,CACHtI,SACA4I,WAAY,CAAC,mCAAD,QAJCD,EAAUP,GAKAS,QAAQ,GADnB,4GAEY9I,GAAmBC,SC1EnDiI,GAAO,GACPjI,GAAQ,GACRkL,GAAQ,EACRC,GAAM,GAAIC,GAAO,GACjBC,GAAe,EAEb9C,GAAM,SAANA,EAAOhS,EAAQiK,GAAgC,IAAjBvN,EAAgB,wDAAN,EAC1CgV,GAAK1R,IAAU,EACf4U,GAAI5U,GAAU6U,GAAK7U,GAAU2U,KAC7BlL,GAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaG,MAAOgK,WAAYtJ,GAAoBC,cAAegB,WAAW,IAC3GJ,GAAMnM,KAAK,CAAE0C,SAAQV,KAAMsV,GAAI5U,GAAU,IAAM6U,GAAK7U,GAASiS,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,qBAJ3E,oBAMvBkB,EAAcjK,IANS,IAMhD,2BAAgD,CAAC,IAA/BmB,EAA8B,QAApClC,KACJkC,IAAOzE,IAENgV,GAAKvQ,IAaNsI,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,cAC5G+L,GAAK7U,GAAU0E,KAAKwM,IAAI2D,GAAK7U,GAAS4U,GAAIzT,IAC1CsI,GAAMnM,KAAK,CAAE0C,SAAQV,KAAMsV,GAAI5U,GAAU,IAAM6U,GAAK7U,GAASiS,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,IAC1JJ,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWR,SAAUiK,WAAYtJ,GAAoBE,gBAfhHW,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWC,KAAMwJ,WAAYtJ,GAAoBE,cAC5GkJ,EAAI7Q,EAAI8I,EAAejK,GACvB6U,GAAK7U,GAAU0E,KAAKwM,IAAI2D,GAAK7U,GAAS6U,GAAK1T,IAC3CsI,GAAMnM,KAAK,CAAE0C,SAAQV,KAAMsV,GAAI5U,GAAU,IAAM6U,GAAK7U,GAASiS,OAAQ5J,GAAiBE,IAAK2J,WAAYtJ,GAAoBG,mBAAoBc,WAAW,IACtJgL,GAAK1T,GAAMyT,GAAI5U,MACb8U,GACFrL,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWR,SAAUiK,WAAYtJ,GAAoBE,cAChHW,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,KAAIsB,UAAU,EAAOwP,OAAQxJ,GAAWD,UAAW0J,WAAYtJ,GAAoBE,eAE9GW,GAAMnM,KAAK,CAAEgH,KAAMtE,EAAQmB,GAAIA,EAAIsB,UAAU,EAAMwP,OAAQxJ,GAAWR,SAAUiK,WAAYtJ,GAAoBE,iBAnB5E,8BA6BhDW,GAAMnM,KAAK,CAAE0C,SAAQiS,OAAQlK,EAAaI,KAAM+J,WAAYtJ,GAAoBC,iBAiBrE,IACX5J,KAAM,sEAEN0S,QAAS3I,GAAcC,QAEvB2I,SAAUzI,GAASzF,aAEnBnD,KAAM,SAACwJ,EAAUC,GACb,IAAMC,EAAgBH,GAAyBC,EAAUC,GACzDP,GAAQ,GAER,IAAMoI,EAAY7B,OAAO8B,YAAYC,OAzBzB,SAAChI,EAAUC,EAAOC,GAClCyH,GAAO,GACP3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,GAAK1R,EAAOf,OAAQ,KAC/C0V,GAAQ,EACRC,GAAM,GACNC,GAAO,GACPC,GAAe,EANqC,oBAQxB/K,GARwB,IAQpD,2BAAsC,CAAC,IAArBsC,EAAoB,QAA1BpN,KACHyS,GAAKrF,IACN2F,GAAI3F,EAAOpC,IAViC,+BA2BhD8K,CAAYhL,EAAUC,EAAOC,GAE7B,IACM7I,EADU4O,OAAO8B,YAAYC,MACRF,EAE3B,MAAO,CACHpI,SACA4I,WAAY,CAAC,sGAAD,OACcyC,IADd,0CAEE1T,EAASkR,QAAQ,GAFnB,4GAGY9I,GAAmBC,SCtF1C1D,GAAa9H,OAAOC,OAAO,CACpC8W,+BAAgC,iCAChCC,oBAAqB,wBAOnBC,GAAoB,iBAAO,CAC9BlO,KAAMjB,GAAWkP,sBCiCdrX,GAAKC,IAAWC,KAAKC,MAerBoX,G,4MACFhW,MAAQ,CACJiW,WAAY,CACRC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IAEJC,iBAAiB,G,EAwBrBC,sBAAwB,SAAA3V,GACpB,EAAK4V,qBACL,EAAK5H,MAAMxH,gBAAgBiF,GAAU1M,SACrC,EAAKiP,MAAM7G,eAEX,EAAK6G,MAAM6H,aAAa,EAAKhX,MAAMiW,WAAW9U,EAAEE,OAAOkP,S,EAG3D0G,mBAAqB,WAC0B,IAAvC,EAAK9H,MAAM+H,yBACX,EAAK/H,MAAMgI,aACX,EAAKhI,MAAMiI,kBACX,EAAKjI,MAAMkI,uBACX,EAAKlI,MAAMqD,WACJ,EAAKrD,MAAMmI,uBAClB,EAAKnI,MAAMlC,QACX,EAAKoC,SAAS,CAAEwH,iBAAiB,MAEjC,EAAKxH,SAAS,CAAEwH,iBAAiB,IACjC,EAAK1H,MAAMoI,a,EAInBC,kBAAoB,WAC2B,IAAvC,EAAKrI,MAAM+H,yBACX,EAAK/H,MAAMgI,aACX,EAAKhI,MAAMiI,kBACX,EAAKjI,MAAMkI,uBACX,EAAKlI,MAAMqD,SAAQ,KAEnB,EAAKnD,SAAS,CAAEwH,iBAAiB,IACjC,EAAK1H,MAAMoI,UAAS,K,EAI5BE,kBAAoB,WAChB,EAAKV,qBACL,EAAK5H,MAAM7G,eACX,EAAK6G,MAAMxH,gBAAgBiF,GAAU1M,U,EAGzCwX,2BAA6B,SAAAvW,GACzB,EAAKgO,MAAMwI,SA7FO,IA6FsBxW,EAAEE,OAAOkP,Q,EAGrDqH,aAAe,SAAC5P,EAASJ,GACrB,EAAKmP,qBAEL,EAAK5H,MAAMpH,YAAYC,GACvB,EAAKmH,MAAMxH,gBAAgBC,I,EAG/BU,aAAe,WACX,EAAK6G,MAAMxH,gBAAgBiF,GAAU1M,SACrC,EAAKiP,MAAM7G,gB,EAGfqG,kBAAoB,WAChB,EAAKoI,qBAEL,EAAK5H,MAAMR,qB,EAGfoI,mBAAqB,WACjB,EAAK5H,MAAMlC,QACX,EAAKoC,SAAS,CAAEwH,iBAAiB,IACjC,EAAK1H,MAAMkI,uBACX,EAAKlI,MAAMgI,aACX,EAAKhI,MAAMiI,mB,EAGfS,YAAc,WACV,EAAKd,qBACL,EAAK5H,MAAMxH,gBAAgBiF,GAAU1M,SAErC,IAAM4X,EAAOC,KAAKC,UAAU,CACxBpN,SAAU,EAAKuE,MAAMtC,MAAMjC,SAAS2D,KAAI,SAAAjD,GAAC,MAAK,CAC1CjO,EAAGiO,EAAEjO,EACLC,EAAGgO,EAAEhO,EACLwC,KAAMwL,EAAExL,SAEZ+K,MAAO,EAAKsE,MAAMtC,MAAMhC,MAAM0D,KAAI,SAAApN,GAAC,MAAK,CACpCgE,KAAMhE,EAAEgE,KAAKrF,KACbkC,GAAIb,EAAEa,GAAGlC,KACTyD,OAAQpC,EAAEoC,WAEdD,SAAU,EAAK6L,MAAMpE,aAGnBkN,EAAa,gCAAkCC,OAAOJ,GACtDK,EAAgBC,SAASC,eAAe,YAC9CF,EAAcG,aAAa,OAAQL,GACnCE,EAAcG,aAAa,WAAY,cACvCH,EAAcI,S,EAGlBC,gBAAkB,WACd,EAAKzB,qBACL,EAAK5H,MAAMxH,gBAAgBiF,GAAU1M,SAErCkY,SAASC,eAAe,YAAYE,S,EAGxCE,aAAe,SAACtX,GACZ,IAAMuX,EAAS,IAAIC,WACbC,EAAOzX,EAAEE,OAAOwX,MAAM,GAE5BH,EAAOI,OAAS,SAAC3X,GACb,IACI,IAAM2W,EAAOC,KAAKgB,MAAM5X,EAAEE,OAAO2X,QAE3B1V,EAAWwU,EAAKxU,SAChBsH,EAAWkN,EAAKlN,SAAS2D,KAAI,SAAAjD,GAAC,OAAI,IAAI1L,EAAO0L,EAAEjO,EAAGiO,EAAEhO,EnB3L9C,GmB2L+DgO,EAAExL,SACvE+K,EAAQiN,EAAKjN,MAAM0D,KAAI,SAAApN,GAAC,OAC1B,IAAIgC,EACAyH,EAASwJ,MAAK,SAAA9I,GAAC,OAAIA,EAAExL,OAASqB,EAAEgE,QAChCyF,EAASwJ,MAAK,SAAA9I,GAAC,OAAIA,EAAExL,OAASqB,EAAEa,MAChCsB,EACAnC,EAAEoC,WAIJsJ,EAAQ,IAAIkB,GAAMzK,EAAUsH,EAAUC,GAExCvH,IAAa,EAAK6L,MAAMpE,YACxB,EAAK4D,oBACT,EAAKQ,MAAM8J,SAASpM,GACtB,MAAO1L,GACL,EAAKgO,MAAMpH,YAAY,kJAI/B2Q,EAAOQ,WAAWN,GAClBR,SAASC,eAAe,YAAY9H,MAAQ,M,EAGhD4I,oBAAsB,WAClB,EAAKhK,MAAMiK,qB,kEA7JXrZ,KAAKoP,MAAM6H,aAAajX,KAAKC,MAAMiW,WAAW,IAC9ClW,KAAKoP,MAAMwI,SAAS,O,4CAGF0B,EAAWC,EAAWC,GACxC,OAAIF,EAAUzR,YAAc7H,KAAKoP,MAAMvH,YAEnCyR,EAAUtO,aAAehL,KAAKoP,MAAMpE,aAEpCsO,EAAU/B,wBAA0BvX,KAAKoP,MAAMmI,wBAE/C+B,EAAUG,qBAAuBzZ,KAAKoP,MAAMqK,qBAE5CH,EAAUI,oBAAsB1Z,KAAKoP,MAAMsK,mBAE3CJ,EAAUnC,0BAA4BnX,KAAKoP,MAAM+H,8B,+BAiJ/C,IAAD,OACL,OACI,kBAAC,KAAD,CAAWwC,KAAM,CAAC,EAAG,GAAIC,OAAQ,OAAQC,OAAQ,CAAC,SAAU,QAAS,WACjE,yBAAKna,UAAWhB,GAAG,SACf,yBAAKgB,UAAWhB,GAAG,aACf,yBAAKgB,UAAWhB,GAAG,0BACf,kBAAC,GAAD,CACIiE,KAAM,wFACNxB,QAAS,kBAAM,EAAKoH,gBACpBsJ,UAAW7R,KAAKoP,MAAMvH,YAAcgF,GAAU1M,UAClD,kBAAC,GAAD,CACIwC,KAAM,8FACNxB,QAAS,kBAAM,EAAK0W,aAAa,6MAAyChL,GAAU/F,aACpF+K,UAAW7R,KAAKoP,MAAMvH,YAAcgF,GAAU/F,aAClD,kBAAC,GAAD,CACInE,KAAM,kFACNxB,QAAS,kBAAM,EAAK0W,aAAa,qQAAoDhL,GAAU9F,WAC/F8K,UAAW7R,KAAKoP,MAAMvH,YAAcgF,GAAU9F,WAClD,kBAAC,GAAD,CACIpE,KAAM,uHACNxB,QAAS,kBAAM,EAAK0W,aAAa,4JAAgChL,GAAUgB,wBAC3EgE,UAAW7R,KAAKoP,MAAMvH,YAAcgF,GAAUgB,yBAEtD,kBAAC,GAAD,CACInO,UAAWhB,GAAG,UACdiE,KAAM,8FACNsP,SAAU,kBAAM,EAAKrD,qBACrB0D,UAAWtS,KAAKoP,MAAMpE,cAE9B,yBAAKtL,UAAWhB,GAAG,aACf,yBAAKgB,UAAWhB,GAAG,oBACf,kBAAC,GAAD,CACIyT,MAAOnS,KAAKC,MAAMiW,WAAW1H,KAAI,SAAApG,GAAC,OAAIA,EAAErI,QACxCkS,SAAUjS,KAAK+W,yBAEvB,yBAAKrX,UAAWhB,GAAG,WACf,kBAAC,GAAD,CACIqT,MAAO,oGACPvB,MArON,IAqOiCxQ,KAAKoP,MAAMqK,mBACtCzH,IAvON,EAwOMzD,IAvON,IAwOM0D,SAAUjS,KAAK2X,8BAEvB,yBAAKjY,UAAWhB,GAAG,kCACf,kBAAC,GAAD,CACIiE,KAAM3C,KAAKC,MAAM6W,gBAAkB,iCAAW9W,KAAKoP,MAAMmI,sBAAwB,iCAAU,iCAC3FpW,QAASnB,KAAKkX,qBAClB,kBAAC,GAAD,CAAiBvU,KAAM,qBAAOxB,QAASnB,KAAKyX,oBAC5C,kBAAC,GAAD,CAAiB9U,KAAM,2BAAQxB,QAASnB,KAAK0X,sBAGrD,yBAAKhY,UAAWhB,GAAG,aACf,yBAAKgB,UAAWhB,GAAG,yBACf,kBAAC,GAAD,CACIiE,KAAM,yDACNxB,QAAS,kBAAM,EAAK2W,eACpBjG,WAAW,IACf,uBAAGiI,GAAG,WAAWC,MAAO,CAAC,QAAW,QAASC,eAAa,EAAMC,KAAK,MAArE,cAEA,kBAAC,GAAD,CACItX,KAAM,yDACNxB,QAAS,kBAAM,EAAKsX,mBACpB5G,WAAW,IACf,2BAAOiI,GAAG,WAAWhS,KAAK,OAAOoS,OAAO,QAAQH,MAAO,CAAC,QAAW,QAAS9H,SAAU,SAAC7Q,GAAD,OAAO,EAAKsX,aAAatX,QAGvH,yBAAK1B,UAAWhB,GAAG,aACf,yBAAKgB,UAAWhB,GAAG,2BACf,kBAAC,GAAD,CACIiE,KAAM,oGACNxB,QAAS,kBAAM,EAAKiY,uBACpBvH,WAAW,Y,GA1PflS,IAAMC,WAqRnBwR,gBA/RS,SAAAnR,GAAK,MAAK,CAC9B4H,UAAW5H,EAAM8M,aAAalF,UAC9BmD,WAAY/K,EAAM8M,aAAaD,MAAM9B,aACrCuM,sBAAuBtX,EAAMgN,iBAAiBS,SAC9C+L,mBAAoBxZ,EAAMgN,iBAAiBU,MAC3C+L,kBAAmBzZ,EAAMgN,iBAAiBjQ,UAC1Cma,wBAAyBlX,EAAMgN,iBAAiB1C,MAAMjM,OACtDwO,MAAO7M,EAAM8M,aAAaD,UAsQH,SAAA3E,GAAQ,MAAK,CACpCP,gBAAiB,SAACC,GAAD,OAAeM,EAASP,EAAgBC,KACzDG,YAAa,SAACC,GAAD,OAAaE,EAASH,EAAYC,KAC/CM,aAAc,kBAAMJ,EAASI,MAC7BqG,kBAAmB,kBAAMzG,EzB5OW,CACpCL,KAAMjB,EAAWW,sByB4OjByP,aAAc,SAACja,GAAD,OAAemL,ErBpNL,SAACnL,GAAD,MAAgB,CACxC8K,KAAMjB,GAAWuF,cACjBpP,aqBkNsCia,CAAaja,KACnD4a,SAAU,SAACjK,GAAD,OAAWxF,ErB1ND,SAACwF,GAAD,MAAY,CAChC7F,KAAMjB,GAAWwF,UACjBsB,SqBwN8BiK,CAASjK,KACvC8E,QAAS,SAAC9F,GAAD,OAAexE,ErBhTL,eAACwE,EAAD,+DAAuB,SAACxE,EAAUyE,GACrDzE,EAASuE,GAAaC,IAEtB,IAAMG,EAAQF,IAAWG,aAAaD,MAChCjC,EAAWiC,EAAMjC,SACjBC,EAAQgC,EAAMhC,MACdC,EAAgBH,GAAyBC,EAAUC,GAEnD4H,EAAW9F,IAAWK,iBAAiBjQ,UAAU0V,SACvD,GAAIA,EAAWzI,GAASC,SAAU,CAAC,IAAD,gBACXY,GADW,IAC9B,2BAA0B,CACtB,IADsB,QACZlG,aAEN,YADAuD,EAASH,EAAY,wJAAgC,KAH/B,+BAQlC,GAAK0K,EAAWzI,GAASzF,cAAiBsI,EAAM9B,aAC5C7C,EAASH,EAAY,kMAAuC,SAGhE,GAAK0K,EAAWzI,GAASG,WAAc0C,EAAM9B,aACzC7C,EAASH,EAAY,sLAAqC,QAD9D,CAIA,GAAK0K,EAAWzI,GAASE,WAAeU,EAASvM,OAAS,EAAI,CAC1D,IAAIkU,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,OAAQ,MACnC,SAAN+S,EAAOvH,GAET,IAAItJ,EADJuQ,EAAKjH,IAAK,EAEVR,EAAcQ,GAAGd,SAAQ,SAAAwI,GACrBhR,EAAKgR,EAASlT,KACTyS,EAAKvQ,IACN6Q,EAAI7Q,MAIhB6Q,CAAIjI,EAAS,GAAG9K,MAb0C,oBAe1C8K,GAf0C,IAe1D,2BAA0B,CAAC,IAAhBU,EAAe,QACtB,IAAKiH,EAAKjH,EAAExL,MAER,YADAoI,EAASH,EAAY,sIAA6B,KAjBA,+BAsB9D,GAAK0K,EAAWzI,GAASI,SAAaQ,EAASvM,OAAS,EAAI,CACxD,IAAIkU,EAAO,GACX3H,EAASJ,SAAQ,SAAA3J,GAAM,OAAI0R,EAAK1R,EAAOf,MAAQ,KAC/C,IAHwD,EAGlD+S,EAAM,SAANA,EAAOvH,GAET,IAAItJ,EADJuQ,EAAKjH,GAAK,EADK,oBAGQR,EAAcQ,IAHtB,IAGf,2BAAyC,CAErC,GADAtJ,EADqC,QACvBlC,KACTyS,EAAKvQ,IAGH,GAAiB,IAAbuQ,EAAKvQ,GACZ,OAAO,OAHP,IAAK6Q,EAAI7Q,GACL,OAAO,GAPJ,8BAaf,OADAuQ,EAAKjH,GAAK,GACH,GAhB6C,cAkB5BV,GAlB4B,IAkBxD,2BAAsC,CAAC,IAArBsC,EAAoB,QAA1BpN,KACR,IAAKyS,EAAKrF,KAAW2F,EAAI3F,GAErB,YADAhF,EAASH,EAAY,wJAAgC,KApBL,+BA0B5D,IAAMyK,EAAU7F,IAAWK,iBAAiBjQ,UAAUyV,QAClDA,IAAY3I,GAAc3C,eAC1BgB,EAASP,EAAgBiF,GAAUiB,mCACnC3F,EAASH,EAAY,iGACdyK,IAAY3I,GAAcE,aACjC7B,EAASP,EAAgBiF,GAAUkB,iCACnC5F,EAASH,EAAY,qFACdyK,IAAY3I,GAAcC,SACjC5B,EAAS9G,QqB+NoBoR,CAAQ9F,KACzCtL,KAAM,kBAAM8G,EAAS9G,OACrB6L,MAAO,kBAAM/E,EAAS+E,OACtBsK,SAAU,SAAC7K,GAAD,OAAexE,ErBpMD,eAACwE,EAAD,+DAAuB,SAACxE,GACpCA,EAAZwE,EAAqBO,KAAoBC,MACzChF,EAASiF,GAAYT,KqBkMawN,CAAaxN,KAC/C2K,qBAAsB,kBAAMnP,EzB1OW,CACvCL,KAAMjB,EAAWa,0ByB0OjB0P,WAAY,kBAAMjP,ErB3IW,CAC7BL,KAAMjB,GAAW0F,eqB2IjB8K,gBAAiB,kBAAMlP,ErBpIW,CAClCL,KAAMjB,GAAW4F,oBqBoIjByM,SAAU,SAACpM,GAAD,OAAW3E,EzBzOD,SAAC2E,GAAD,MAAY,CAChChF,KAAMjB,EAAWc,UACjBmF,SyBuO8BoM,CAASpM,KACvCuM,kBAAmB,kBAAMlR,EDvUoB,CAC7CL,KAAMjB,GAAWiP,qCCyUN1E,CAA6C6E,I,oBC1UtDvX,GAAKC,IAAWC,KAAKC,MAeZuS,gBAbS,SAAAnR,GAAK,MAAK,CAC9BgI,QAAShI,EAAM8M,aAAa9E,QAC5BC,QAASjI,EAAM8M,aAAa7E,WAWjBkJ,EARI,SAAC,GAA0B,IAAxBnJ,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC3B,OACI,yBAAKxI,UAAWhB,GAAG,cAAD,gCAA4CmF,IAAZoE,GAAhC,uBAAoEC,KACjFD,M,4DCXPvJ,GAAKC,IAAWC,KAAKC,MAEdub,GAAqB,SAAC,GAA6E,IAA3E5J,EAA0E,EAA1EA,MAAO6J,EAAmE,EAAnEA,YAAapI,EAAsD,EAAtDA,SAAUP,EAA4C,EAA5CA,QAAShS,EAAmC,EAAnCA,UAAmC,IAAxB4a,iBAAwB,SAC3G,OACI,2BACI5a,UAAWhB,GAAG,aAAcgB,GAC5BoI,KAAK,OACL4J,QAASA,EACTlB,MAAOA,EACPyB,SAAUA,EACVoI,YAAaA,EACbC,UAAWA,KCNjB5b,GAAKC,IAAWC,KAAKC,MAErB0b,GAAe,CACjBC,QAAS,CAACC,OAAQ,MAchBC,G,4MACFza,MAAQ,CACJuQ,MAAO,I,EAGXmK,aAAe,SAACvZ,GACRA,EAAEE,OAAOsZ,SAASC,OAClB,EAAKvL,SAAS,CAAEkB,MAAOpP,EAAEE,OAAOkP,S,EAGxCsK,OAAS,SAAC1Z,GACNA,EAAE2Z,iBACF,EAAKzL,SAAS,CAAEkB,MAAO,KACvB,EAAKpB,MAAM4L,aAAa,EAAK5L,MAAMoC,SAAU,EAAKvR,MAAMuQ,Q,EAG5DqJ,OAAS,WACL,EAAKvK,SAAS,CAAEkB,MAAO,KACvB,EAAKpB,MAAM6L,aAAa,EAAK7L,MAAMuC,W,uDAG7B,IAAD,OACL,OACI,kBAAC,KAAD,CACIuJ,OAAQlb,KAAKoP,MAAM8L,OACnBC,eAAgB,WACZ,EAAK7L,SAAS,CAAEkB,MAAO,KACvB,EAAKpB,MAAM6L,aAAa,EAAK7L,MAAMuC,WAEvCyJ,aAAa,EACb1b,UAAWhB,GAAG,gBACdqb,MAAOQ,IAEP,4BAAKva,KAAKoP,MAAMkC,OAChB,6BAAMtR,KAAKoP,MAAMzM,MACjB,0BAAM6O,SAAU,SAACpQ,GAAD,OAAO,EAAK0Z,OAAO1Z,KAC/B,kBAAC,GAAD,CACIkZ,WAAW,EACX5a,UAAWhB,GAAG,cACd2b,YAAara,KAAKoP,MAAMmC,iBACxBG,QAAS1R,KAAKoP,MAAMsC,QACpBO,SAAUjS,KAAK2a,aACfnK,MAAOxQ,KAAKC,MAAMuQ,QAEtB,kBAAC,GAAD,CACI1I,KAAM,SACNpI,UAAWhB,GAAG,UACdiE,KAAM,eACNxB,QAAS,SAACC,GAAD,OAAO,EAAK0Z,OAAO1Z,MAChC,kBAAC,GAAD,CACI1B,UAAWhB,GAAG,UACdiE,KAAM,uCACNxB,QAAS,kBAAM,EAAK0Y,aAG5B,yBAAKna,UAAWhB,GAAG,SAAUsB,KAAKoP,MAAMhP,W,GAvD9BT,IAAMC,WAkEjBwR,gBA7ES,SAAAnR,GAAK,MAAK,CAC9Bib,OAAQjb,EAAMob,cAAcH,OAC5B5J,MAAOrR,EAAMob,cAAc/J,MAC3B3O,KAAM1C,EAAMob,cAAc1Y,KAC1BvC,KAAMH,EAAMob,cAAcjb,KAC1BmR,iBAAkBtR,EAAMob,cAAc9J,iBACtCG,QAASzR,EAAMob,cAAc3J,QAC7BF,SAAUvR,EAAMob,cAAc7J,SAC9BG,SAAU1R,EAAMob,cAAc1J,aAgEP,SAAAxJ,GAAQ,MAAK,CACpC6S,aAAc,SAACxJ,EAAUyH,GAAX,OAAsB9Q,E3B9DZ,SAACqJ,EAAUyH,GAAX,OAAsB,SAAC9Q,GAC3CqJ,GACAA,EAASyH,GACb9Q,EAASS,M2B2DoCoS,CAAaxJ,EAAUyH,KACpEgC,aAAc,SAACtJ,GAAD,OAAcxJ,E3BrEJ,SAACwJ,GAAD,OAAc,SAACxJ,GACnCwJ,GACAA,IACJxJ,EAASS,M2BkE4BqS,CAAatJ,QAGvCP,CAA6CsJ,I,oBCtFtDhc,GAAKC,IAAWC,KAAKC,MAyBZuS,gBAvBS,SAAAnR,GAAK,MAAK,CAC9Bqb,MAAOrb,EAAMgN,iBAAiBkG,WAC9BoI,UAAWtb,EAAMgN,iBAAiBuO,qBAqBvBpK,EAlBC,SAAC,GAA0B,IAAxBkK,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACtB,OACI,yBAAK7b,UAAWhB,GAAG,WAAD,6BAA+B6c,GAAa1P,MAAMoC,QAAQqN,IAAUA,EAAMhd,WACvFgd,EAAM9M,KAAI,SAACiN,EAAM/P,GAAP,OAAiB,yBAAKhM,UAAWhB,GAAG,QAASwS,IAAKxF,GAAQ+P,U,wCCX3E/c,GAAKC,IAAWC,KAAKC,MAErB6c,GAAa,SAAC,GAA0D,IAAxD/P,EAAuD,EAAvDA,KAAMgQ,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YACvD,OACI,yBAAKpc,UAAWhB,GAAG,cAAD,wBAA6BiN,GAA7B,8BACKA,IAASA,EAAKI,UADnB,+BAEM4P,GAFN,gCAGOC,GAHP,kCAISC,GAJT,mCAKUC,KACvBnQ,EAAQA,EAAKI,SAAWJ,EAAKnI,OAAS,IAAO,MAKpDuY,GAAY,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACnC,OACI,yBAAKzc,UAAWhB,GAAG,eACf,yBAAKgB,UAAWhB,GAAG,eAAgByd,GAClCH,EAAIxN,KAAI,SAAC7C,EAAMD,GAAP,OACL,kBAAC,GAAD,CACIC,KAAMA,EACNgQ,QAAoB,IAAVjQ,GAAgBuQ,EAC1BL,SAAWlQ,EAAQ,IAAMsQ,EAAI1d,QAAW2d,EACxCJ,WAAuB,IAAVnQ,GAAgBwQ,EAC7BJ,YAAcpQ,EAAQ,IAAMsQ,EAAI1d,QAAW4d,SAuBhDE,GAjBS,SAAC,GAAe,IAAbtP,EAAY,EAAZA,MAAY,EACQzB,GAA2ByB,EAAMjC,SAAUiC,EAAMhC,OAArFc,EAD4B,EAC5BA,gBAAiBN,EADW,EACXA,gBACxB,OACI,yBAAK5L,UAAWhB,GAAG,WACf,yBAAKgB,UAAWhB,GAAG,eAAgB,KAClC4M,EAAgBkD,KAAI,SAAAjD,GAAC,OAAI,yBAAK7L,UAAWhB,GAAG,eAAgB6M,MAC5DK,EAAgB4C,KAAI,SAACwN,EAAKtQ,GAAN,OACjB,kBAAC,GAAD,CACIsQ,IAAKA,EACLC,MAAiB,IAAVvQ,EACPwQ,KAAMxQ,EAAQ,IAAMoB,EAAMjC,SAASvM,OACnC6d,aAAc7Q,EAAgBI,UCrC5ChN,GAAKC,IAAWC,KAAKC,MAErB0b,GAAe,CACjBC,QAAS,CAACC,OAAQ,MAQhB4B,G,4MAQFvE,YAAc,WAAO,IACZlM,EAAmBP,GAA2B,EAAK+D,MAAMtC,MAAMjC,SAAU,EAAKuE,MAAMtC,MAAMhC,OAA1Fc,gBAGLA,GADAA,EAAkBA,EAAgB4C,KAAI,SAAAwN,GAAG,OAAIA,EAAIxN,KAAI,SAAA7C,GAAI,OAAIA,EAAQA,EAAKI,SAAWJ,EAAKnI,OAAS,IAAO,WACxE8Y,QAAO,SAACC,EAAMC,GAAP,OAAeD,EAAOC,EAAIF,QAAO,SAACb,EAAM9P,GAAP,OAAgB8P,EAAO9P,EAAO,MAAK,IAAM,OAAM,IAEzH,IAAMuM,EAAa,iCAAmCC,OAAOvM,GACvDwM,EAAgBC,SAASC,eAAe,YAC9CF,EAAcG,aAAa,OAAQL,GACnCE,EAAcG,aAAa,WAAY,uBACvCH,EAAcI,S,EAGlBqB,OAAS,WACL,EAAKzK,MAAM6L,aAAa,O,oEApBN3B,EAAWC,EAAWC,GACxC,SAAKxZ,KAAKoP,MAAM8L,SAAW5B,EAAU4B,U,+BAsB/B,IAAD,OACL,OACI,kBAAC,KAAD,CACIA,OAAQlb,KAAKoP,MAAM8L,OACnBC,eAAgB,kBAAM,EAAKtB,UAC3BuB,aAAa,EACb1b,UAAWhB,GAAG,iBACdqb,MAAOQ,IAEP,kBAAC,GAAD,CAAiBzN,MAAO9M,KAAKoP,MAAMtC,QAEnC,kBAAC,GAAD,CACIhF,KAAM,SACNpI,UAAWhB,GAAG,UACdiE,KAAM,yFACNxB,QAAS,kBAAM,EAAK2W,iBACxB,uBAAGgC,GAAG,WAAWC,MAAO,CAAC,QAAW,QAASC,eAAa,EAAMC,KAAK,MAArE,eAEA,kBAAC,GAAD,CACIva,UAAWhB,GAAG,UACdiE,KAAM,6CACNxB,QAAS,kBAAM,EAAK0Y,iB,GA9Cbla,IAAMC,WAyDlBwR,gBA9DS,SAAAnR,GAAK,MAAK,CAC9Bib,OAAQjb,EAAMwc,oBAAoBvB,OAClCpO,MAAO7M,EAAM8M,aAAaD,UAuDH,SAAA3E,GAAQ,MAAK,CACpC6S,aAAc,SAACxJ,EAAUyH,GAAX,OAAsB9Q,EPvDN,SAACqJ,EAAUyH,GAAX,OAAsB,SAAC9Q,GACjDqJ,GACAA,EAASyH,GACb9Q,EAAS6N,OOoDoC0G,CAAmBlL,EAAUyH,KAC1EgC,aAAc,SAACtJ,GAAD,OAAcxJ,EP9DE,SAACwJ,GAAD,OAAc,SAACxJ,GACzCwJ,GACAA,IACJxJ,EAAS6N,OO2D4B2G,CAAmBhL,QAG7CP,CAA6CiL,ICnEtD3d,GAAKC,IAAWC,KAAKC,KAaZ+d,GAXH,kBACR,yBAAKld,UAAWhB,GAAG,QACf,kBAACme,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCRYC,QACW,cAA7BhM,OAAOiM,SAASC,UAEe,UAA7BlM,OAAOiM,SAASC,UAEhBlM,OAAOiM,SAASC,SAASC,MACvB,2D,aCfAC,GAAe,CACjBhC,QAAQ,EACR5J,MAAO,GACP3O,KAAM,GACNvC,KAAM,GACNmR,iBAAkB,GAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,MAoCEyL,GAjCA,WAAmC,IAC1CC,EADQnd,EAAiC,uDAAzBid,GAAcnK,EAAW,uCAE7C,OAAQA,EAAOjL,MACX,KAAKjB,EAAW6B,wBAsBZ,OArBA0U,EAAQ,eACDnd,EADC,CAEJib,QAAQ,EACR5J,MAAOyB,EAAOzB,MACd3O,KAAMoQ,EAAOpQ,KACbvC,KAAM2S,EAAO3S,KACbmR,iBAAkBwB,EAAOxB,iBACzBG,QAASqB,EAAOrB,WAGXF,SAAW,SAAChB,GACjB,IAAMgB,EAAWuB,EAAOvB,SACpBA,GACAA,EAAShB,IAEjB4M,EAASzL,SAAW,WAChB,IAAMA,EAAWoB,EAAOpB,SACpBA,GACAA,KAGDyL,EACX,KAAKvW,EAAW8B,aACZ,OAAOuU,GACX,QACI,OAAOjd,ICvCbid,GAAe,CACjB3S,MAAO,GACPmD,UAAU,EACV1Q,UAAW,KACX2Q,MAAO,IACPhB,WAAW,EACXwG,WAAY,GACZqI,mBAAmB,GAiFRxe,GA9EG,WAAmC,IAC7CogB,EADWnd,EAAiC,uDAAzBid,GAAcnK,EAAW,uCAEhD,OAAQA,EAAOjL,MACX,KAAKjB,GAAWoF,KACZmR,EAAQ,eACDnd,GAGP,IAGIgZ,EAHExG,EAAUxS,EAAMjD,UAAUyV,QAC1B5H,EAAWkI,EAAOjG,MAAMjC,SACxBC,EAAQiI,EAAOjG,MAAMhC,MAY3B,OAVI2H,IAAY3I,GAAc3C,cAC1B8R,EAAShZ,EAAMjD,UAAUqE,KAAKwJ,EAAUC,EAAOiI,EAAOjS,QAC/C2R,IAAY3I,GAAcE,YACjCiP,EAAShZ,EAAMjD,UAAUqE,KAAKwJ,EAAUC,EAAOiI,EAAO5O,MAC/CsO,IAAY3I,GAAcC,UACjCkP,EAAShZ,EAAMjD,UAAUqE,KAAKwJ,EAAUC,IAE5CsS,EAAS7S,MAAQ0O,EAAO1O,MACxB6S,EAASjK,WAAa8F,EAAO9F,WAEtBiK,EACX,KAAKvW,GAAWsF,eAQZ,OAPAiR,EAAQ,eACDnd,EADC,CAEJsK,MAAM,YAAKtK,EAAMsK,UAGZA,MAAM7M,QAER0f,EACX,KAAKvW,GAAW1H,MACZ,OAAO,eACAc,EADP,CAEIyN,UAAU,IAElB,KAAK7G,GAAWqF,MACZ,OAAO,eACAjM,EADP,CAEIyN,UAAU,IAElB,KAAK7G,GAAWuF,cACZ,OAAO,eACAnM,EADP,CAEIjD,UAAW+V,EAAO/V,YAE1B,KAAK6J,GAAWwF,UACZ,OAAO,eACApM,EADP,CAEI0N,MAAOoF,EAAOpF,QAEtB,KAAK9G,GAAWyF,gBACZ,OAAO,eACArM,EADP,CAEI0M,UAAWoG,EAAOpG,YAE1B,KAAK9F,GAAW0F,YACZ,OAAO,eACAtM,EADP,CAEIsK,MAAO,KAEf,KAAK1D,GAAW2F,gBACZ,OAAO,eACAvM,EADP,CAEIub,mBAAmB,IAE3B,KAAK3U,GAAW4F,iBACZ,OAAO,eACAxM,EADP,CAEIkT,WAAY,GACZqI,mBAAmB,IAE3B,QACI,OAAOvb,ICrFbid,GAAe,CACjBhC,QAAQ,GAiBGmC,GAdM,WAAmC,IAAlCpd,EAAiC,uDAAzBid,GAAcnK,EAAW,uCACnD,OAAQA,EAAOjL,MACX,KAAKjB,GAAWiP,+BACZ,OAAO,eACA7V,EADP,CAEIib,QAAQ,IAEhB,KAAKrU,GAAWkP,oBACZ,OAAOmH,GACX,QACI,OAAOjd,ICPbid,GAAe,CACjBpQ,MAAO,IAAIkB,IAAM,GACjB/F,aAASpE,EACTqE,SAAS,EACTL,UAAWgF,GAAU1M,QACrB8P,oBAAgBpM,GAGdyZ,GAAQ,SAAAC,GACV,OAAOxe,OAAOye,OAAQze,OAAO0e,OAAQ1e,OAAO2e,eAAeH,IAAUA,IAGnEI,GAAyB,SAAC1d,GAC5B,QAA6B4D,IAAzB5D,EAAMgQ,eAA8B,CACpC,IAAM1R,EAAI0B,EAAM6M,MAAMjC,SAASrM,WAAU,SAAA+M,GAAC,OAAIA,IAAMtL,EAAMgQ,mBAC/C,IAAP1R,IACA0B,EAAM6M,MAAMjC,SAAStM,GAAG0B,MAAQC,EAAYC,SAChDF,EAAMgQ,oBAAiBpM,IAIzB+Z,GAAuB,SAAC9c,EAAQiS,GAClC,OAAQA,GACJ,KAAKlK,EAAaC,OACdhI,EAAOb,MAAQC,EAAYM,YAC3B,MACJ,KAAKqI,EAAaG,MACdlI,EAAOb,MAAQC,EAAYO,cAC3B,MACJ,KAAKoI,EAAaI,KACdnI,EAAOb,MAAQC,EAAYQ,UAC3B,MACJ,KAAKmI,EAAaE,SACdjI,EAAOb,MAAQC,EAAYC,QAC3B,MACJ,KAAK0I,EAAalI,QACdG,EAAOb,MAAQC,EAAYS,QAC3B,MACJ,KAAKkI,EAAajI,QACdE,EAAOb,MAAQC,EAAYU,UAMjCid,GAAqB,SAAC1Z,EAAM4O,GAC9B,OAAQA,GACJ,KAAKxJ,GAAWC,KACZrF,EAAKlE,MAAQ0D,EAAUG,OACvB,MACJ,KAAKyF,GAAWD,UACZnF,EAAKlE,MAAQ0D,EAAUnD,YACvB,MACJ,KAAK+I,GAAWE,OACZtF,EAAKlE,MAAQ0D,EAAUK,WAM7B8Z,GAA2B,SAAChd,EAAQiS,GACtC,OAAQA,GACJ,KAAK5J,GAAiBC,OAClBtI,EAAOT,UAAYC,EAAgBC,MACnC,MACJ,KAAK4I,GAAiBE,IAClBvI,EAAOT,UAAYC,EAAgBH,QACnC,MACJ,KAAKgJ,GAAiBG,UAClBxI,EAAOT,UAAYC,EAAgBE,cAMzC8W,GAAuB,SAACrX,GAC1BA,EAAM6M,MAAMjC,SAASJ,SAAQ,SAAAc,GACzBA,EAAEtL,MAAQC,EAAYC,QACtBoL,EAAElL,UAAYC,EAAgBC,MAC9BgL,EAAEnL,KAAO,MAEbH,EAAM6M,MAAMhC,MAAML,SAAQ,SAAArJ,GAAC,OAAIA,EAAEnB,MAAQ0D,EAAUxD,WACnDF,EAAM6M,MAAMqE,mBAAqB,GACjClR,EAAMgQ,oBAAiBpM,GA0KZka,gBAAgB,CAC3BhR,aAxKY,WAAmC,IAC3CqQ,EACA7e,EAFS0B,EAAiC,uDAAzBid,GAAcnK,EAAW,uCAG9C,OAAQA,EAAOjL,MACX,KAAKjB,EAAWC,WAQZ,OAPAsW,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,UAGdA,MAAMkD,UAAU+C,EAAOzV,EAAGyV,EAAOxV,EAAGwV,EAAOjT,QAE7Csd,EACX,KAAKvW,EAAWE,SAQZ,OAPAqW,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,UAGdA,MAAM2D,QAAQsC,EAAO1P,WAAY0P,EAAOzP,SAAUyP,EAAOvP,QAE3D4Z,EACX,KAAKvW,EAAWG,cAQZ,OAPAoW,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,UAGdA,MAAMuD,aAAa0C,EAAOjS,QAE5Bsc,EACX,KAAKvW,EAAWI,YAQZ,OAPAmW,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,UAGdA,MAAM8D,WAAWmC,EAAO5O,MAE1BiZ,EACX,KAAKvW,EAAWU,uBASZ,OARA6V,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,UAGdA,MAAMjC,SAASkI,EAAO1B,aAAa/T,EAAIyV,EAAOzV,EACvD8f,EAAStQ,MAAMjC,SAASkI,EAAO1B,aAAa9T,EAAIwV,EAAOxV,EAEhD6f,EACX,KAAKvW,EAAWK,kBAYZ,OAXAkW,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,SAGnBiG,EAAOlL,YAAcuV,EAASvV,YAC9BuV,EAASvV,UAAYkL,EAAOlL,UAE5B8V,GAAuBP,IAGpBA,EACX,KAAKvW,EAAWM,cAcZ,OAbAiW,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,SAGvB6Q,GAAuBP,IAGZ,KADX7e,EAAI6e,EAAStQ,MAAMjC,SAASrM,WAAU,SAAA+M,GAAC,OAAIA,IAAMwH,EAAOjS,aAEpDsc,EAAStQ,MAAMjC,SAAStM,GAAG0B,MAAQC,EAAYM,YAC/C4c,EAASnN,eAAiB8C,EAAOjS,QAG9Bsc,EACX,KAAKvW,EAAWO,gBAQZ,OAPAgW,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,SAGvB6Q,GAAuBP,GAEhBA,EACX,KAAKvW,EAAWQ,aACZ,OAAO,eACApH,EADP,CAEIgI,QAAS8K,EAAO9K,QAChBC,QAAS6K,EAAO7K,UAExB,KAAKrB,EAAWS,cACZ,OAAO,eACArH,EADP,CAEIgI,aAASpE,EACTqE,SAAS,IAEjB,KAAKrB,EAAWW,mBAQZ,OAPA4V,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,UAGdA,MAAM8B,oBAERwO,EACX,KAAKvW,EAAWY,eACZ2V,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,SAGvB,IAAMrE,EAAOsK,EAAOtK,KACpB,GAAIA,EAAKuK,aAAetJ,GAAoBC,cACxC,GAAIlB,EAAKsK,SAAWlK,EAAaK,qBAC7BkU,EAAStQ,MAAMjC,SAASJ,SAAQ,SAAAc,GAAC,OAAIA,EAAEtL,MAAQC,EAAYC,eACxD,CACH,IAAMW,EAASsc,EAAStQ,MAAMjC,SAASwJ,MAAK,SAAA9I,GAAC,OAAIA,EAAExL,OAAS0I,EAAK3H,UAC7DA,GACA8c,GAAqB9c,EAAQ2H,EAAKsK,aAEvC,GAAItK,EAAKuK,aAAetJ,GAAoBE,YAC/C,GAAInB,EAAKsK,SAAWxJ,GAAWL,qBAC3BkU,EAAStQ,MAAMqE,mBAAqB,OACjC,CACH,IAAM9N,EAAa+Z,EAAStQ,MAAMjC,SAASwJ,MAAK,SAAA9I,GAAC,OAAIA,EAAExL,OAAS0I,EAAKrD,QAC/D9B,EAAW8Z,EAAStQ,MAAMjC,SAASwJ,MAAK,SAAA9I,GAAC,OAAIA,EAAExL,OAAS0I,EAAKxG,MACnE,GAAIwG,EAAKsK,SAAWxJ,GAAWR,SAC3BqU,EAAStQ,MAAMgC,kCAAkCzL,EAAYC,EAAUmF,EAAKlF,cACzE,CACH,IAAMY,EAAOiZ,EAAStQ,MAAMkR,qBAAqB3a,EAAYC,EAAUmF,EAAKlF,SAAUkF,EAAKjF,QAC3Fqa,GAAmB1Z,EAAMsE,EAAKsK,cAGnC,GAAItK,EAAKuK,aAAetJ,GAAoBG,mBAAoB,CACnE,IAAM/I,EAASsc,EAAStQ,MAAMjC,SAASwJ,MAAK,SAAA9I,GAAC,OAAIA,EAAExL,OAAS0I,EAAK3H,UAC7DA,IACI2H,EAAKsK,SAAW5J,GAAiBC,OACjCtI,EAAOV,KAAO,GAEdU,EAAOV,KAAOqI,EAAKrI,KACvB0d,GAAyBhd,EAAQ2H,EAAKsK,SAI9C,OAAOqK,EACX,KAAKvW,EAAWa,uBAQZ,OAPA0V,EAAQ,eACDnd,EADC,CAEJ6M,MAAOwQ,GAAMrd,EAAM6M,SAGvBwK,GAAqB8F,GAEdA,EACX,KAAKvW,EAAWc,UACZ,OAAO,eACA1H,EADP,CAEI6M,MAAOiG,EAAOjG,QAEtB,QACI,OAAO7M,IAMfob,cAAe8B,GACflQ,iBAAkBjQ,GAClByf,oBAAqBY,K,SCjQnBY,GAAQC,aAAYC,GAAaC,aAAgBC,OAEvDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,GAAD,OAEJ5F,SAASC,eAAe,SLmHtB,kBAAmBkG,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLphB,QAAQohB,MAAMA,EAAM9W,a,mBMxI5B+W,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,YAAc,gCAAgC,aAAe,iCAAiC,KAAO,yBAAyB,eAAe,iCAAiC,YAAY,8BAA8B,aAAa,+BAA+B,cAAc,kC,wCCApSD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAW,uBAAuB,wBAAwB,oCAAoC,OAAS,qBAAqB,gCAAgC,4CAA4C,uBAAuB,mCAAmC,kBAAkB,8BAA8B,OAAS,qBAAqB,yBAAyB,uC,mBCArZD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,UAAY,6B,mBCA/DD,EAAOC,QAAU,CAAC,iBAAiB,gCAAgC,eAAe,8BAA8B,OAAS,0B,mBCAzHD,EAAOC,QAAU,CAAC,iBAAiB,wC,mBCAnCD,EAAOC,QAAU,CAAC,uBAAuB,6CAA6C,eAAe,qCAAqC,OAAS,+BAA+B,KAAO,+B,mBCAzLD,EAAOC,QAAU,CAAC,cAAc,gCAAgC,UAAY,8BAA8B,MAAQ,4B,mBCAlHD,EAAOC,QAAU,CAAC,eAAe,kCAAkC,aAAa,gCAAgC,OAAS,4BAA4B,KAAO,4B,mBCA5JD,EAAOC,QAAU,CAAC,aAAa,iC,mBCA/BD,EAAOC,QAAU,CAAC,WAAW,0BAA0B,KAAO,sBAAsB,UAAY,6B,mBCAhGD,EAAOC,QAAU,CAAC,gBAAgB,oCAAoC,OAAS,+B,mBCA/ED,EAAOC,QAAU,CAAC,OAAS,gCAAgC,aAAa,oCAAoC,gBAAgB,uCAAuC,iBAAiB,wCAAwC,mBAAmB,0CAA0C,oBAAoB,2CAA2C,cAAc,qCAAqC,aAAa,oCAAoC,MAAQ,iC","file":"static/js/main.91cb1565.chunk.js","sourcesContent":["export const algorithm = {\n    name: \"Breadth First Search\",\n    run: function (cells, cellStart, cellFinish, pathStatus) {\n        let node = { x: cellStart.x, y: cellStart.y, parent: null };\n\n        const queue = [node];\n        while (queue.length) {\n            let current = queue.shift();\n            if ((current.x !== cellStart.x) || (current.y !== cellStart.y))\n                cells[current.y][current.x] = pathStatus;\n            if ((current.x === cellFinish.x) && (current.y === cellFinish.y)) {\n                // const path = backtrace(current);\n                // TODO: something\n                return;\n            }\n            console.log(current);\n            const next = neighbours(current, 0, 0, cells[0].length - 1, cells.length - 1);\n            for (let i = 0; i < next.length; ++i)\n                if ((cells[next[i].y][next[i].x] !== pathStatus) && !((next[i].x === cellStart.x) && (next[i].y === cellStart.y)) && (queue.findIndex(n => (n.x === next[i].x) && (n.y === next[i].y)) === -1))\n                    queue.push(next[i]);\n        }\n    }\n};\n\nfunction backtrace(node) {\n    const path = [{x: node.x, y: node.y}];\n    while (node.parent !== null) {\n        node = node.parent;\n        path.push({x: node.x, y: node.y});\n    }\n    return path;\n}\n\nfunction neighbours(node, minX, minY, maxX, maxY) {\n    const res = [];\n    if (node.x < maxX)\n        res.push({ x: node.x + 1, y: node.y, parent: node });\n    if (node.x > minX)\n        res.push({ x: node.x - 1, y: node.y, parent: node });\n    if (node.y < maxY)\n        res.push({ x: node.x, y: node.y + 1, parent: node });\n    if (node.y > minY)\n        res.push({ x: node.x, y: node.y - 1, parent: node });\n    return res;\n}","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./PlainGraph.module.scss\";\nimport { algorithm } from \"../../algorithms/plain/breadth-first-search\";\n\nconst cx = classnames.bind(styles);\n\nconst CellState = Object.freeze({ EMPTY: 0, BLOCKED: 1, START: 2, FINISH: 3, PATH: 4});\n\nconst Cell = ({x, y, status, onMouseEnter, onMouseLeave}) => (\n    <rect x={x} y={y} className={cx(\"cell\", {\n            [`cell-blocked`]: status === CellState.BLOCKED,\n            [`cell-path`]: status === CellState.PATH,\n            [`cell-start`]: status === CellState.START,\n            [`cell-finish`]: status === CellState.FINISH\n          })}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}/>\n);\n\nclass PlainGraph extends React.Component {\n    state = {\n        cells: [],\n        cellSize: 40,\n        rows: 1000 / 40 + 10,\n        columns: 2000 / 40 + 10,\n        isMouseDown: false,\n        previousMouseRow: -1,\n        previousMouseColumn: -1,\n        mouseCellState: -1\n    };\n\n    componentDidMount() {\n        const cellSize = 40;\n        const rows = 1000 / cellSize + 10;\n        const columns = 2000 / cellSize + 10;\n        const cells = [];\n        // const rows = window.innerHeight / cellSize + 10, columns = window.innerWidth / cellSize + 10; // TODO: change on resize\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < columns; ++j) {\n                row.push(CellState.EMPTY);\n            }\n            cells.push(row);\n        }\n        cells[2][2] = CellState.START;\n        cells[2][40] = CellState.FINISH;\n        this.setState({ cells: cells, cellSize: cellSize, rows: rows, columns: columns});\n    }\n\n    invertCellUnderMouse = (event) => {\n        this.setState(oldState => {\n            const x = Math.floor(event.x / this.state.cellSize);\n            const y = Math.floor(event.y / this.state.cellSize);\n            if ((x === oldState.previousMouseColumn) && (y === oldState.previousMouseRow))\n                return oldState;\n            const state = {...oldState};\n\n            const currentCellState = state.cells[y][x];\n            if (currentCellState === state.mouseCellState) {\n                if ((currentCellState === CellState.EMPTY) || (currentCellState === CellState.PATH))\n                    state.cells[y][x] = CellState.BLOCKED;\n                else if (currentCellState === CellState.BLOCKED)\n                    state.cells[y][x] = CellState.EMPTY;\n            }\n            state.previousMouseRow = y;\n            state.previousMouseColumn = x;\n\n            return state;\n        });\n    };\n\n    handleMouseDown = (event) => {\n        algorithm.run(this.state.cells, {x:2,y:2},{x:40,y:2}, CellState.PATH);\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.setState({\n            isMouseDown: true,\n            mouseCellState: this.state.cells\n                [Math.floor(reducedEvent.y / this.state.cellSize)]\n                [Math.floor(reducedEvent.x / this.state.cellSize)]\n        });\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    handleMouseUp = (event) => {\n        this.invertCellUnderMouse({ x: event.clientX, y: event.clientY });\n        this.setState({ isMouseDown: false, previousMouseRow: -1, previousMouseColumn: -1 });\n    };\n\n    handleCellMouseEnter = (event) => {\n        if (!this.state.isMouseDown)\n            return;\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    render() {\n        return (\n            <div className={cx(\"plain_graph\")}>\n                <svg className={cx(\"drawing_area\")}\n                     onMouseDown={e => this.handleMouseDown(e)}\n                     onMouseUp={e => this.handleMouseUp(e)}>\n                    {this.state.cells.map((row, y) =>\n                        row.map((cell, x) =>\n                            <Cell\n                                x={x * this.state.cellSize}\n                                y={y * this.state.cellSize}\n                                status={cell}\n                                key={this.state.columns * y + x}\n                                onMouseEnter={e => this.handleCellMouseEnter(e)}/>\n                            )\n                        )\n                    }\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default PlainGraph;","import { Circle, Group, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Vertex {\n    constructor(x, y, radius, name) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.state = VertexState.DEFAULT;\n        this.name = name;\n        this.hint = \"\";\n        this.hintState = VertexHintState.CLEAR;\n    }\n\n    get color() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'white';\n            case VertexState.HIGHLIGHTED:\n                return 'yellow';\n            case VertexState.PRE_COMPLETED:\n                return '#CCCCCC';\n            case VertexState.COMPLETED:\n                return '#444444';\n            case VertexState.COLOR_1:\n                return '#ff0000';\n            case VertexState.COLOR_2:\n                return '#0000ff';\n            default:\n                return 'white';\n        }\n    }\n\n    get textColor() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'black';\n            case VertexState.HIGHLIGHTED:\n                return 'black';\n            case VertexState.PRE_COMPLETED:\n                return 'black';\n            case VertexState.COMPLETED:\n                return 'white';\n            case VertexState.COLOR_1:\n                return 'white';\n            case VertexState.COLOR_2:\n                return 'white';\n            default:\n                return 'black';\n        }\n    }\n\n    get hintColor() {\n        switch (this.hintState) {\n            case VertexHintState.CLEAR:\n                return '#00000000';\n            case VertexHintState.DEFAULT:\n                return '#ff5f3c';\n            case VertexHintState.HIGHLIGHTED:\n                return '#2c99c3';\n            default:\n                return '#00000000';\n        }\n    }\n}\n\nconst handleDragStart = (e, call) => {\n    e.target.getChildren()[0].setAttrs({\n        scaleX: 1.1,\n        scaleY: 1.1,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: { x: 10, y: 10 },\n        shadowOpacity: 0.5\n    });\n    e.target.moveToTop();\n\n    call(e);\n};\n\nconst handleDragEnd = (e, call) => {\n    e.target.getChildren()[0].to({\n        duration: 0.25,\n        scaleX: 1,\n        scaleY: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0\n    });\n\n    call(e);\n};\n\nexport const VertexComponent = ({ vertex, draggable, onDragStart, onDragEnd, onDragMove, onClick }) => {\n    const labelWidth = 40, labelHeight = 20;\n    return (\n        <Group\n            draggable={draggable}\n            onDragStart={e => handleDragStart(e, onDragStart)}\n            onDragEnd={e => handleDragEnd(e, onDragEnd)}\n            onDragMove={onDragMove}\n            onClick={onClick}\n            x={vertex.x}\n            y={vertex.y}>\n            <Circle\n                x={0}\n                y={0}\n                radius={vertex.radius}\n                fill={vertex.color}\n                stroke={'black'}\n                shadowBlur={0}\n                strokeWidth={vertexBorderWidth}\n                shadowOpacity={0.5}/>\n            <Text\n                text={vertex.name}\n                x={-labelWidth / 2.}\n                y={-labelHeight / 2.}\n                fontSize={20}\n                fill={vertex.textColor}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n\n            <Text\n                text={vertex.hint}\n                x={-2 * vertex.radius}\n                y={-2 * vertex.radius}\n                fontSize={25}\n                fill={vertex.hintColor}\n                stroke={vertex.hintColor}\n                width={labelWidth * 2}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>);\n};\n\nexport const vertexBorderWidth = 2;\n\nexport const VertexState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, PRE_COMPLETED: 2, COMPLETED: 3, COLOR_1: 4, COLOR_2: 5 });\nexport const VertexHintState = Object.freeze({ CLEAR: 0, DEFAULT: 1, HIGHLIGHTED: 2 });","import { vertexBorderWidth } from \"../Vertex/Vertex\";\nimport { Arrow, Circle, Group, Line, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Edge {\n    constructor(vertexFrom, vertexTo, oriented, weight) {\n        this._from = vertexFrom;\n        this._to = vertexTo;\n        this.weight = weight;\n        this.state = EdgeState.DEFAULT;\n        this._oriented = oriented;\n    }\n\n    get from() {\n        return this._from;\n    }\n\n    get to() {\n        return this._to;\n    }\n\n    get color() {\n        switch (this.state) {\n            case EdgeState.DEFAULT:\n                return 'black';\n            case EdgeState.HIGHLIGHTED:\n                return '#f7ff00';\n            case EdgeState.WALKED:\n                return '#ff5f3c';\n            case EdgeState.ERASED:\n                return '#ffffff00';\n            case EdgeState.SHADOWED:\n                return '#dddddd';\n            default:\n                return 'black';\n        }\n    }\n\n    isWeighted() {\n        return (this.weight !== undefined) && (this.weight !== null);\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n    }\n}\n\nexport const EdgeComponent = ({ edge, edgeType, onClick }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group onClick={onClick}>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeLabel = ({ x, y, text }) => {\n    const labelRadius = 15;\n    const labelHorizontalPadding = 1, labelVerticalPadding = 5;\n    const labelBorderWidth = 0;\n    return (\n        <Group\n            x={x - labelRadius - labelHorizontalPadding - labelBorderWidth}\n            y={y - labelRadius - labelVerticalPadding - labelBorderWidth}\n            width={labelRadius * 2. + 2. * (labelHorizontalPadding + labelBorderWidth)}\n            height={labelRadius * 2. + 2. * (labelVerticalPadding + labelBorderWidth)}>\n            <Circle\n                x={labelRadius + labelHorizontalPadding + labelBorderWidth}\n                y={labelRadius + labelVerticalPadding + labelBorderWidth}\n                radius={labelRadius}\n                fill={'white'}\n                stroke={'black'}\n                strokeWidth={labelBorderWidth}/>\n            <Text\n                x={labelBorderWidth + labelHorizontalPadding}\n                y={labelBorderWidth + labelVerticalPadding}\n                text={text}\n                fontSize={20}\n                width={labelRadius * 2.}\n                height={labelRadius * 2.}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>\n    );\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });\nexport const EdgeState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, ERASED: 2, WALKED: 3, SHADOWED: 4 });\n\nexport const getEdgePointsForType = (edge, edgeType) => {\n    const vertexFrom = edge.from;\n    const vertexTo = edge.to;\n    const dx = vertexTo.x - vertexFrom.x;\n    const dy = vertexFrom.y - vertexTo.y;\n    const angle = Math.atan2(dy, dx);\n    const vertexFromOffset = vertexFrom.radius + vertexBorderWidth / 2.;\n    const vertexToOffset = vertexTo.radius + vertexBorderWidth / 2.;\n\n    if ((edgeType === EdgeType.ONE_SIDE_ORIENTED) || (edgeType === EdgeType.NOT_ORIENTED)) {\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle);\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xTo, yTo\n            ],\n            labelPoints: [\n                (xFrom + xTo) / 2.,\n                (yFrom + yTo) / 2.\n            ]\n        };\n    } else if (edgeType === EdgeType.TWO_SIDE_ORIENTED) {\n        const angleOffset = 0.25;\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle + angleOffset);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle + angleOffset);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle - angleOffset);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle - angleOffset);\n\n        const middlePointHeightCoefficient = 1. / 15.;\n        const xMiddle = (xFrom + xTo) / 2. - (yFrom - yTo) * middlePointHeightCoefficient;\n        const yMiddle = (yFrom + yTo) / 2. + (xFrom - xTo) * middlePointHeightCoefficient;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddle, yMiddle,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle,\n                yMiddle\n            ]\n        };\n    } else if (edgeType === EdgeType.LOOP) {\n        const xFrom = vertexFrom.x - vertexFromOffset;\n        const yFrom = vertexFrom.y;\n        const xTo = vertexFrom.x - vertexFromOffset;\n        const yTo = vertexFrom.y;\n\n        const anchorDx = 3. * vertexFromOffset / Math.sqrt(2.);\n        const anchorDy = 1.5 * vertexFromOffset / Math.sqrt(2.);\n        const xMiddleFirst = xFrom - anchorDx;\n        const yMiddleFirst = yFrom - anchorDy;\n        const xMiddle = xMiddleFirst - vertexFromOffset;\n        const yMiddle = yFrom;\n        const xMiddleSecond = xTo - anchorDx;\n        const yMiddleSecond = yTo + anchorDy;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddleFirst, yMiddleFirst,\n                xMiddle, yMiddle,\n                xMiddleSecond, yMiddleSecond,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle, yMiddle\n            ]\n        };\n    }\n};","export function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    ADD_VERTEX: 'ADD_VERTEX',\n    ADD_EDGE: 'ADD_EDGE',\n    REMOVE_VERTEX: 'REMOVE_VERTEX',\n    REMOVE_EDGE: 'REMOVE_EDGE',\n    CHANGE_GRAPH_MODE: 'CHANGE_GRAPH_MODE',\n    SELECT_VERTEX: 'SELECT_VERTEX',\n    UNSELECT_VERTEX: 'UNSELECT_VERTEX',\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    CLOSE_MESSAGE: 'CLOSE_MESSAGE',\n    UPDATE_VERTEX_POSITION: 'UPDATE_VERTEX_POSITION',\n    INVERT_ORIENTATION: 'INVERT_ORIENTATION',\n    ALGORITHM_STEP: 'ALGORITHM_STEP',\n    CLEAN_GRAPH_SELECTIONS: 'CLEAN_GRAPH_SELECTIONS',\n    SET_GRAPH: 'SET_GRAPH'\n});\n\nexport const addVertex = (x, y, radius) => ({\n    type: ActionType.ADD_VERTEX,\n    x,\n    y,\n    radius\n});\n\nexport const addEdge = (vertexFrom, vertexTo, weight) => ({\n    type: ActionType.ADD_EDGE,\n    vertexFrom,\n    vertexTo,\n    weight\n});\n\nexport const removeVertex = (vertex) => ({\n    type: ActionType.REMOVE_VERTEX,\n    vertex\n});\n\nexport const removeEdge = (edge) => ({\n    type: ActionType.REMOVE_EDGE,\n    edge\n});\n\nexport const changeGraphMode = (graphMode) => ({\n    type: ActionType.CHANGE_GRAPH_MODE,\n    graphMode\n});\n\nexport const selectVertex = (vertex) => ({\n    type: ActionType.SELECT_VERTEX,\n    vertex\n});\n\nexport const unselectVertex = (vertex) => ({\n    type: ActionType.UNSELECT_VERTEX,\n    vertex\n});\n\nlet currentMessageId = 0;\n\nexport const showMessage = (message, isAlert = false) => async (dispatch) => {\n    const messageId = ++currentMessageId;\n    dispatch(showMessageConnector(message, isAlert));\n    await sleep(2000);\n    if (messageId === currentMessageId)\n        dispatch(closeMessage());\n};\n\nconst showMessageConnector = (message, isAlert = false) => ({\n    type: ActionType.SHOW_MESSAGE,\n    message,\n    isAlert\n});\n\nexport const closeMessage = () => ({\n    type: ActionType.CLOSE_MESSAGE\n});\n\nexport const updateVertexPosition = (vertexIndex, x, y) => ({\n    type: ActionType.UPDATE_VERTEX_POSITION,\n    vertexIndex,\n    x,\n    y\n});\n\nexport const invertOrientation = () => ({\n    type: ActionType.INVERT_ORIENTATION\n});\n\nexport const algorithmStep = (step) => ({\n    type: ActionType.ALGORITHM_STEP,\n    step\n});\n\nexport const cleanGraphSelections = () => ({\n    type: ActionType.CLEAN_GRAPH_SELECTIONS\n});\n\nexport const setGraph = (graph) => ({\n    type: ActionType.SET_GRAPH,\n    graph\n});","export const ActionType = Object.freeze({\n    START_DIALOG_FOR_RESULT: 'START_DIALOG_FOR_RESULT',\n    CLOSE_DIALOG: 'CLOSE_DIALOG'\n});\n\nexport const startDialogForResult = (title, text, hint, inputPlaceholder, onSubmit, onCancel, pattern = \".*\") => ({\n    type: ActionType.START_DIALOG_FOR_RESULT,\n    title,\n    text,\n    hint,\n    inputPlaceholder,\n    onSubmit,\n    onCancel,\n    pattern\n});\n\nconst closeDialog = () => ({\n   type: ActionType.CLOSE_DIALOG\n});\n\nexport const cancelDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeDialog());\n};\n\nexport const submitDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeDialog());\n};","export const VertexAction = Object.freeze({\n    SELECT: 0,\n    UNSELECT: 1,\n    ENTER: 2,\n    EXIT: 3,\n    COLOR_1: 4,\n    COLOR_2: 5,\n    CLEAR_ALL_SELECTIONS: 6\n});\n\nexport const VertexHintAction = Object.freeze({\n    REMOVE: 0,\n    SET: 1,\n    HIGHLIGHT: 2\n});\n\nexport const EdgeAction = Object.freeze({\n    WALK: 0,\n    HIGHLIGHT: 1,\n    UNSELECT: 2,\n    SHADOW: 3,\n    CLEAR_ALL_SELECTIONS: 4\n});\n\nexport const AlgorithmActionType = Object.freeze({\n    VERTEX_ACTION: 0,\n    EDGE_ACTION: 1,\n    VERTEX_HINT_ACTION: 2\n});\n\nexport const PreCallAction = Object.freeze({\n    NOTHING: 0,\n    SELECT_VERTEX: 1,\n    SELECT_EDGE: 2\n});\n\nexport const Criteria = Object.freeze({\n    NOTHING: 0,\n    WEIGHTED: 0b1,\n    CONNECTED: 0b10,\n    NOT_ORIENTED: 0b100,\n    ORIENTED: 0b1000,\n    ACYCLIC: 0b10000\n});\n\nexport const getOperationsCount = (trace) => {\n    let operationsCount = 0;\n    trace.forEach((t, i) => {\n        if ((i + 1 === trace.length) || !t.isChained)\n            ++operationsCount;\n    });\n    return operationsCount;\n};","export const edgesListToAdjacencyList = (vertices, edges) => {\n    const adjacencyList = {};\n    vertices.forEach(vertex => adjacencyList[vertex.name] = []);\n    edges.forEach(edge => {\n        adjacencyList[edge.from.name].push({name: edge.to.name, weight: edge.weight});\n        if (!edge.isOriented() && (edge.from !== edge.to))\n            adjacencyList[edge.to.name].push({name: edge.from.name, weight: edge.weight});\n    });\n    for (let [, verticesList] of Object.entries(adjacencyList))\n        verticesList = verticesList.sort((a, b) => a.name - b.name);\n    return adjacencyList;\n};\n\nexport const edgesListToAdjacencyMatrix = (vertices, edges) => {\n    const verticesNumbers = [];\n    vertices.forEach(v => verticesNumbers.push(v.name));\n    verticesNumbers.sort((a, b) => a - b);\n    const nameToIndex = {};\n    verticesNumbers.forEach((number, index) => nameToIndex[number] = index);\n\n    const adjacencyMatrix = new Array(vertices.length);\n    for (let i = 0; i < vertices.length; ++i) {\n        adjacencyMatrix[i] = new Array(vertices.length);\n        for (let j = 0; j < vertices.length; ++j)\n            adjacencyMatrix[i][j] = null;\n    }\n\n    let from, to, cell;\n    edges.forEach(e => {\n        from = nameToIndex[e.from.name];\n        to = nameToIndex[e.to.name];\n        cell = e.weight ? { weighted: true, weight: e.weight } : { weighted : false };\n        adjacencyMatrix[from][to] = cell;\n        if (!e.isOriented())\n            adjacencyMatrix[to][from] = cell;\n    });\n\n    return {adjacencyMatrix, verticesNumbers};\n};","import { algorithmStep, changeGraphMode, closeMessage, showMessage } from \"./index\";\nimport { GraphMode } from \"../components/Graph/Graph\";\nimport { Criteria, PreCallAction } from \"../algorithms/graph\";\nimport { sleep } from \"../utils/sleep\";\nimport { edgesListToAdjacencyList } from \"../utils/graphConverter\";\n\nexport const ActionType = Object.freeze({\n    PRE_CALL: 'PRE_CALL',\n    CALL: 'CALL',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    POP_TRACE_STEP: 'POP_TRACE_STEP',\n    SET_ALGORITHM: 'SET_ALGORITHM',\n    SET_SPEED: 'SET_SPEED',\n    SET_IS_ONE_STEP: 'SET_IS_ONE_STEP',\n    CLEAR_TRACE: 'CLEAR_TRACE',\n    SHOW_STATISTICS: 'SHOW_STATISTICS',\n    CLEAR_STATISTICS: 'CLEAR_STATISTICS'\n});\n\nexport const preCall = (isOneStep = false) => (dispatch, getState) => {\n    dispatch(setIsOneStep(isOneStep));\n\n    const graph = getState().graphReducer.graph;\n    const vertices = graph.vertices;\n    const edges = graph.edges;\n    const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n    const criteria = getState().algorithmReducer.algorithm.criteria;\n    if (criteria & Criteria.WEIGHTED) {\n        for (const edge of edges) {\n            if (!edge.isWeighted()) {\n                dispatch(showMessage(\"Граф должен быть взвешенным!\", true));\n                return;\n            }\n        }\n    }\n    if ((criteria & Criteria.NOT_ORIENTED) && graph.isOriented()) {\n        dispatch(showMessage(\"Граф должен быть неориентированным!\", true));\n        return;\n    }\n    if ((criteria & Criteria.ORIENTED) && !graph.isOriented()) {\n        dispatch(showMessage(\"Граф должен быть ориентированным!\", true));\n        return;\n    }\n    if ((criteria & Criteria.CONNECTED) && (vertices.length > 0)) {\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        const dfs = (v) => {\n            used[v] = true;\n            let to;\n            adjacencyList[v].forEach(toVertex => {\n                to = toVertex.name;\n                if (!used[to]) {\n                    dfs(to);\n                }\n            });\n        };\n        dfs(vertices[0].name);\n\n        for (const v of vertices) {\n            if (!used[v.name]) {\n                dispatch(showMessage(\"Граф должен быть связным!\", true));\n                return;\n            }\n        }\n    }\n    if ((criteria & Criteria.ACYCLIC) && (vertices.length > 0)) {\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = 0);\n        const dfs = (v) => {\n            used[v] = 1;\n            let to;\n            for (const toVertex of adjacencyList[v]) {\n                to = toVertex.name;\n                if (!used[to]) {\n                    if (!dfs(to))\n                        return false;\n                } else if (used[to] === 1) {\n                    return false;\n                }\n            }\n            used[v] = 2;\n            return true;\n        };\n        for (const {name: start} of vertices) {\n            if (!used[start] && !dfs(start)) {\n                dispatch(showMessage(\"Граф должен быть ацикличным!\", true));\n                return;\n            }\n        }\n    }\n\n    const preCall = getState().algorithmReducer.algorithm.preCall;\n    if (preCall === PreCallAction.SELECT_VERTEX) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX));\n        dispatch(showMessage(\"Выберите вершину\"));\n    } else if (preCall === PreCallAction.SELECT_EDGE) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE));\n        dispatch(showMessage(\"Выберите ребро\"));\n    } else if (preCall === PreCallAction.NOTHING) {\n        dispatch(call());\n    }\n};\n\nexport const setSpeed = (speed) => ({\n    type: ActionType.SET_SPEED,\n    speed\n});\n\nexport const setAlgorithm = (algorithm) => ({\n    type: ActionType.SET_ALGORITHM,\n    algorithm\n});\n\nconst setIsOneStep = (isOneStep) => ({\n    type: ActionType.SET_IS_ONE_STEP,\n    isOneStep\n});\n\nexport const call = (vertex, edge) => (dispatch, getState) => {\n    dispatch(closeMessage());\n    dispatch(changeGraphMode(GraphMode.DEFAULT));\n    const graph = getState().graphReducer.graph;\n    dispatch(callConnector(graph, vertex, edge));\n\n    const isOneStep = getState().algorithmReducer.isOneStep;\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nexport const continueCall = (isOneStep = false) => (dispatch) => {\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nconst start = () => ({\n    type: ActionType.START\n});\n\nexport const pause = () => ({\n    type: ActionType.PAUSE\n});\n\nconst callConnector = (graph, vertex, edge) => ({\n    type: ActionType.CALL,\n    graph,\n    vertex,\n    edge\n});\n\nlet currentVisualizationId = 0; // To prevent several visualization 'threads'\n\nconst callSuccess = (isOneStep = false) => async (dispatch, getState) => {\n    if (isOneStep) {\n        let traceStep = {isChained : true};\n        while ((getState().algorithmReducer.trace.length > 0) && traceStep.isChained) {\n            traceStep = getState().algorithmReducer.trace[0];\n            dispatch(algorithmStep(traceStep));\n            dispatch(popTraceStep());\n\n            if (getState().algorithmReducer.trace.length === 0) {\n                dispatch(showStatistics());\n            }\n        }\n        return;\n    }\n\n    const visualizationId = ++currentVisualizationId;\n    let traceStep;\n    while ((getState().algorithmReducer.trace.length > 0) && getState().algorithmReducer.isActive) {\n        traceStep = getState().algorithmReducer.trace[0];\n        dispatch(algorithmStep(traceStep));\n        dispatch(popTraceStep());\n        if ((getState().algorithmReducer.trace.length > 0) && !traceStep.isChained) {\n            await sleep(getState().algorithmReducer.speed);\n            if (currentVisualizationId !== visualizationId)\n                return;\n        }\n    }\n    if (getState().algorithmReducer.isActive) {\n        dispatch(pause());\n        dispatch(showStatistics());\n    }\n};\n\nconst popTraceStep = () => ({\n    type: ActionType.POP_TRACE_STEP\n});\n\nexport const clearTrace = () => ({\n    type: ActionType.CLEAR_TRACE\n});\n\nconst showStatistics = () => ({\n   type: ActionType.SHOW_STATISTICS\n});\n\nexport const clearStatistics = () => ({\n    type: ActionType.CLEAR_STATISTICS\n});","import { Arrow, Group, Line } from \"react-konva\";\nimport React from \"react\";\nimport { EdgeLabel, getEdgePointsForType } from \"../Edge/Edge\";\n\nexport const VisualizationEdgeComponent = ({ edge, edgeType }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Graph.module.scss\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Vertex, VertexComponent } from \"./Vertex/Vertex\";\nimport { Edge, EdgeComponent, EdgeType } from \"./Edge/Edge\";\nimport { connect } from \"react-redux\";\nimport {\n    addEdge,\n    addVertex,\n    removeEdge,\n    removeVertex,\n    selectVertex,\n    unselectVertex,\n    updateVertexPosition\n} from \"../../actions\";\nimport { startDialogForResult } from \"../../actions/dialog\";\nimport { call } from \"../../actions/algorithm\";\nimport { VisualizationEdgeComponent } from \"./VisualizationEdge/VisualizationEdge\";\n\nconst cx = classnames.bind(styles);\n\nexport const vertexRadius = 20;\n\nconst mapStateToProps = state => ({\n    graph: state.graphReducer.graph,\n    graphMode: state.graphReducer.graphMode,\n    selectedVertex: state.graphReducer.selectedVertex\n});\n\nexport const GraphMode = Object.freeze({\n    DEFAULT: 0,\n    ADD_VERTEX: 1,\n    ADD_EDGE: 2,\n    REMOVE_VERTEX_OR_EDGE: 3,\n    ALGORITHM_PRE_CALL_SELECT_VERTEX: 4,\n    ALGORITHM_PRE_CALL_SELECT_EDGE: 5\n});\n\nexport class Graph {\n    constructor(oriented, vertices = null, edges = null) {\n        if (!vertices || !Array.isArray(vertices) || !edges || !Array.isArray(edges)) {\n            this._vertices = [];\n            this._edges = [];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = 0;\n        } else {\n            for (let i = 0; i < vertices.length; ++i) {\n                if ((vertices[i].name < 0) || (vertices[i].name > 999))\n                    throw new Error(\"Invalid vertex name\");\n\n                for (let j = 0; j < vertices.length; ++j) {\n                    if ((i !== j) && (vertices[i].name === vertices[j].name))\n                        throw new Error(\"Two vertices with equal names\");\n                }\n            }\n\n            for (let i = 0; i < edges.length; ++i) {\n                if (edges[i].weight && ((edges[i].weight < 0) || (edges[i].weight > 99)))\n                    throw new Error(\"Invalid edge weight\");\n                if (vertices.findIndex(v => v.name === edges[i].from.name) === -1)\n                    throw new Error(\"Invalid vertex 'from'\");\n                if (vertices.findIndex(v => v.name === edges[i].to.name) === -1)\n                    throw new Error(\"Invalid vertex 'to'\");\n\n                for (let j = 0; j < edges.length; ++j) {\n                    if (i !== j) {\n                        if (oriented) {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name))\n                                throw new Error(\"Multiedges aren't supported\");\n                        } else {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name)\n                                || (edges[i].to.name === edges[j].from.name) && (edges[i].from.name === edges[j].to.name)) {\n                                throw new Error(\"Multiedges aren't supported\");\n                            }\n                        }\n                    }\n                }\n            }\n\n            this._vertices = [...vertices];\n            this._edges = [...edges];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = Math.max(...vertices.map(v => v.name)) + 1;\n        }\n    }\n\n    addVertex(x, y, radius) {\n        const vertex = new Vertex(x, y, radius, this._currentName++);\n        this._vertices.push(vertex);\n        return vertex;\n    }\n\n    removeVertex(vertex) {\n        const index = this._vertices.findIndex(v => v === vertex);\n        if (index !== -1) {\n            this._vertices.splice(index, 1);\n            this._edges = this._edges.filter(edge => (edge.from.name !== vertex.name) && (edge.to.name !== vertex.name));\n        }\n    }\n\n    findEdge(vertexFrom, vertexTo) {\n        if (this._oriented)\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addEdge(vertexFrom, vertexTo, weight) {\n        const i = this.findEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, this._oriented, weight);\n            this._edges.push(edge);\n            return edge;\n        }\n        else {\n            this._edges[i].weight = weight;\n        }\n    }\n\n    removeEdge(edge) {\n        this._edges = this._edges.filter(e => e !== edge);\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n        if (this._oriented)\n            this._edges.forEach(edge => edge.invertOrientation());\n        else {\n            const newEdges = [];\n            this._edges.forEach(edge => {\n                if (newEdges.findIndex(e => (e.from === edge.from) && (e.to === edge.to)\n                    || (e.to === edge.from) && (e.from === edge.to)) === -1) {\n\n                    edge.invertOrientation();\n                    newEdges.push(edge);\n                }\n            });\n            this._edges = newEdges;\n        }\n    }\n\n    findVisualizationEdge(vertexFrom, vertexTo, oriented) {\n        if (oriented)\n            return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addVisualizationEdge(vertexFrom, vertexTo, oriented, weight) {\n        this.removeVisualizationEdgeByVertices(vertexFrom, vertexTo, oriented);\n        const edge = new Edge(vertexFrom, vertexTo, oriented, weight);\n        this._visualizationEdges.push(edge);\n        return edge;\n    }\n\n    removeVisualizationEdge(edge) {\n        this._visualizationEdges = this._visualizationEdges.filter(e => e !== edge);\n    }\n\n    removeVisualizationEdgeByVertices(vertexFrom, vertexTo, oriented) {\n        if (oriented)\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                (e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)\n            );\n        else\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                ((e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)) &&\n                ((e.to.name !== vertexFrom.name) || (e.from.name !== vertexTo.name))\n            );\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    get visualizationEdges() {\n        return this._visualizationEdges;\n    }\n\n    set visualizationEdges(edges) {\n        this._visualizationEdges = edges;\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n}\n\nclass GraphComponent extends React.Component {\n    state = {\n        draggedVertex: undefined,\n        windowWidth: 700,\n        windowHeight: 700\n    };\n\n    componentDidMount() {\n        const handleResize = () => {\n            this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n        };\n        window.onresize = handleResize;\n        handleResize();\n    }\n\n    findIndexOfVertex = (vertex) => {\n        return this.props.graph.vertices.findIndex(v => v === vertex);\n    };\n\n    handleVertexDragStart = (e, vertex) => {\n        const i = this.findIndexOfVertex(vertex);\n        this.setState({ draggedVertex: (i !== -1 ? i : undefined) });\n    };\n\n    updateDraggedVertex = (x, y) => {\n        const vertex = this.state.draggedVertex;\n        if (vertex !== undefined)\n            this.props.updateVertexPosition(vertex, x, y);\n    };\n\n    handleVertexDragMove = e => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n    };\n\n    handleVertexDragEnd = (e, vertex) => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n        this.setState({ draggedVertex: undefined });\n    };\n\n    getEdgeType = edge => {\n        const vertexFrom = edge.from, vertexTo = edge.to;\n\n        if (vertexTo === vertexFrom)\n            return EdgeType.LOOP;\n        else if (!edge.isOriented())\n            return EdgeType.NOT_ORIENTED;\n        else if ((this.props.graph.edges.findIndex(e => (e.from === vertexTo) && (e.to === vertexFrom)) !== -1)\n                && (this.props.graph.edges.findIndex(e => (e.to === vertexTo) && (e.from === vertexFrom)) !== -1))\n            return EdgeType.TWO_SIDE_ORIENTED;\n        else\n            return EdgeType.ONE_SIDE_ORIENTED;\n    };\n\n    handleCanvasClick = e => {\n        const x = e.evt.clientX, y = e.evt.clientY;\n\n        if (this.props.graphMode === GraphMode.ADD_VERTEX)\n            this.props.addVertex(x, y, vertexRadius);\n        else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            if (this.props.selectedVertex !== undefined) {\n                this.props.unselectVertex();\n            }\n        }\n    };\n\n    handleVertexClick = (e, vertex) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeVertex(vertex);\n        } else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            e.cancelBubble = true;\n\n            if (this.props.selectedVertex === undefined) {\n                this.props.selectVertex(vertex);\n            }\n            else {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    \"\",\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        this.props.addEdge(this.props.selectedVertex, vertex, value);\n                        this.props.unselectVertex();\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX) {\n            e.cancelBubble = true;\n\n            this.props.callAlgorithm(vertex, null);\n        }\n    };\n\n    handleEdgeClick = (e, edge) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeEdge(edge);\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE) {\n            e.cancelBubble = true;\n            this.props.callAlgorithm(null, edge);\n        }\n    };\n\n    render() {\n        return (\n            <Stage onClick={this.handleCanvasClick} width={this.state.windowWidth} height={this.state.windowHeight}>\n                <Layer>\n                    <Rect fill={'white'} x={0} y={0} width={this.state.windowWidth} height={this.state.windowHeight}/>\n                    {\n                        this.props.graph.edges.map((edge, index) =>\n                            <EdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}\n                                onClick={(e) => this.handleEdgeClick(e, edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.visualizationEdges.map((edge, index) =>\n                            <VisualizationEdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.vertices.map((vertex, index) =>\n                            <VertexComponent\n                                key={index}\n                                vertex={vertex}\n                                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                                onClick={(e) => this.handleVertexClick(e, vertex)}\n                                onDragStart={e => this.handleVertexDragStart(e, vertex)}\n                                onDragEnd={e => this.handleVertexDragEnd(e, vertex)}\n                                onDragMove={e => this.handleVertexDragMove(e, vertex)}/>\n                        )\n                    }\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    addVertex: (x, y, radius) => dispatch(addVertex(x, y, radius)),\n    addEdge: (vertexFrom, vertexTo, radius) => dispatch(addEdge(vertexFrom, vertexTo, radius)),\n    removeVertex: (vertex) => dispatch(removeVertex(vertex)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    updateVertexPosition: (vertexIndex, x, y) => dispatch(updateVertexPosition(vertexIndex, x, y)),\n    selectVertex: (vertex) => dispatch(selectVertex(vertex)),\n    unselectVertex: (vertex) => dispatch(unselectVertex(vertex)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern)),\n    callAlgorithm: (vertex, edge) => dispatch(call(vertex, edge))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Buttons.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const ButtonComponent = ({ text, type = \"button\", onClick, activated, className }) => {\n    return (\n        <button type={type} className={cx(\"button\", className, {[`activated`]: activated})} onClick={onClick}>\n            {text}\n        </button>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Sliders.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const SliderComponent = ({ label, value, min, max, onChange }) => {\n    return (\n        <div className={cx(\"slider-wrapper\")}>\n            <div className={cx(\"slider-label\")}>{label}</div>\n            <input\n                type={\"range\"}\n                className={cx(\"slider\")}\n                value={value}\n                min={min}\n                max={max}\n                onChange={onChange}/>\n        </div>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./DropDownLists.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const DropDownList = ({ items, onChange }) => {\n    return (\n        <select className={cx(\"drop-down-list\")} onChange={onChange}>\n            {items.map((item, index) => <option key={index} value={index}>{item}</option>)}\n        </select>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./ToggleSwitches.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const RoundedToggleSwitch = ({ text, onChange, className, isChecked }) => {\n    return (\n        <div className={cx(\"switch-round-wrapper\", className)}>\n            <label className={cx(\"switch-round\")}>\n                <input type={\"checkbox\"} onChange={onChange} checked={isChecked}/>\n                <span className={cx(\"slider\")}/>\n            </label>\n            <span className={cx(\"text\")}>{text}</span>\n        </div>\n    );\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList);\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nexport default {\n    name: \"Поиск в глубину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        dfs(start.name, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export class Queue {\n    constructor() {\n        this._queue = [];\n    }\n\n    get length() {\n        return this._queue.length;\n    }\n\n    isEmpty() {\n        return this._queue.length === 0;\n    }\n\n    push(value) {\n        this._queue.push(value);\n    }\n\n    pop() {\n        // TODO: O(N) -> O(1)\n        return this._queue.shift();\n    }\n\n    peek() {\n        return this._queue[0];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Поиск в ширину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        bfs(start.name, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst dijkstra = (start, vertices, adjacencyList, used, trace) => {\n    const d = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (d[v] + weight < d[to]) {\n                d[to] = d[v] + weight;\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Алгоритм Дейкстры\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.WEIGHTED,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        dijkstra(start.name, vertices.map(v => v.name), adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst prim = (start, vertices, edges, adjacencyList, used, trace) => {\n    edges.forEach(e => {\n        trace.push({ from: e.from.name, to: e.to.name, oriented: false, weight: e.weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    });\n\n    const d = {};\n    const mst = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        mst[v] = null;\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (weight < d[to]) {\n                d[to] = weight;\n                if (mst[to] !== null) {\n                    trace.push({ from: mst[to], to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: false });\n                }\n                mst[to] = v;\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n    let mstWeight = 0;\n    for (const v in d)\n        mstWeight += d[v];\n    return mstWeight;\n};\n\nexport default {\n    name: \"Алгоритм Прима\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const start = vertices[Math.floor(Math.random() * vertices.length)];\n        const mstWeight = prim(start.name, vertices.map(v => v.name), edges, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export class DSU {\n    constructor() {\n        this.parent = {};\n        this.size = {};\n    }\n\n    makeSet(x) {\n        this.parent[x] = x;\n        this.size[x] = 1;\n    }\n\n    find(x) {\n        if (x === this.parent[x])\n            return x;\n        this.parent[x] = this.find(this.parent[x]);\n        return this.parent[x];\n    }\n\n    union(x, y) {\n        x = this.find(x);\n        y = this.find(y);\n        if (x !== y)\n            if (this.size[x] < this.size[y])\n                [x, y] = [y, x];\n            this.parent[y] = x;\n            this.size[x] += this.size[y];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction } from \"./index\";\nimport { DSU } from \"../../utils/dsu\";\n\nconst kruskal = (vertices, edges, trace) => {\n    const dsu = new DSU();\n    vertices.forEach(v => dsu.makeSet(v.name));\n    edges.sort((a, b) => a.weight - b.weight);\n\n    edges.forEach(e => {\n        trace.push({ from: e.from.name, to: e.to.name, oriented: false, weight: e.weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    });\n\n    let mstWeight = 0;\n    let from, to, weight;\n    edges.forEach(e => {\n        from = e.from.name;\n        to = e.to.name;\n        weight = Number(e.weight);\n        trace.push({ from, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n        if (dsu.find(from) !== dsu.find(to)) {\n            mstWeight += weight;\n            dsu.union(from, to);\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else {\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n\n    return mstWeight;\n};\n\nexport default {\n    name: \"Алгоритм Краскала\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const mstWeight = kruskal(vertices, edges, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: false, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n\n    for (const vertex of vertices)\n        if (!used[vertex.name])\n            return false;\n    return true;\n};\n\nexport default {\n    name: \"Проверка на связность\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n\n        const startTime = window.performance.now();\n\n        const start = vertices[Math.floor(Math.random() * vertices.length)];\n        const isConnected = bfs(start.name, vertices, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Граф ${isConnected ? \"связный\" : \"несвязный\"}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList, parent = -1, color = 1) => {\n    used[vertex] = color;\n    trace.push({ vertex, action: color === 1 ? VertexAction.COLOR_1 : VertexAction.COLOR_2, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    for (const toVertex of adjacencyList[vertex]) {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (!dfs(to, adjacencyList, vertex, 3 - color))\n                return false;\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else if ((parent !== to) && (used[to] === color)) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            return false;\n        }\n    }\n    return true;\n};\n\nexport default {\n    name: \"Проверка на двудольность\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = 0);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        let isBipartite = true;\n        for (const {name: vertex} of vertices) {\n            if (!used[vertex]) {\n                isBipartite &= dfs(vertex, adjacencyList);\n                if (!isBipartite)\n                    break;\n            }\n        }\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Граф ${isBipartite ? \"двудольный\" : \"недвудольный\"}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    const d = {}, p = {};\n    vertices.forEach(vertex => {\n        d[vertex.name] = Number.MAX_SAFE_INTEGER;\n        p[vertex.name] = -1;\n    });\n    used[start] = true;\n    const queue = new Queue();\n    queue.push({ vertex: start, level: 0 });\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    let vertex, level, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.peek().vertex;\n        level = queue.pop().level;\n        d[vertex] = level;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                used[to] = true;\n                queue.push({ vertex: to, level: level + 1 });\n                p[to] = vertex;\n            }\n        });\n    }\n\n    while (p[vertex] !== -1) {\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ from: p[vertex], to: vertex, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        vertex = p[vertex];\n    }\n    trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex: start, hint: level, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n    return level;\n};\n\nconst findRadius = (vertices, edges, adjacencyList, trace) => {\n    let used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let eccentricities = {};\n    let radius = Number.MAX_SAFE_INTEGER;\n    for (const {name: start} of vertices) {\n        vertices.forEach(vertex => used[vertex.name] = false);\n        eccentricities[start] = bfs(start, vertices, adjacencyList, used, trace);\n        trace.push({ vertex: start, hint: eccentricities[start], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n\n        trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n\n        radius = Math.min(radius, eccentricities[start]);\n    }\n\n    for (const {name: v} of vertices) {\n        if (eccentricities[v] === radius)\n            trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    }\n\n    return radius;\n};\n\nexport default {\n    name: \"Радиус и центр графа\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED | Criteria.CONNECTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const trace = [];\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        const startTime = window.performance.now();\n\n        const radius = findRadius(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Радиус графа: ${radius}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    const d = {}, p = {};\n    vertices.forEach(vertex => {\n        d[vertex.name] = Number.MAX_SAFE_INTEGER;\n        p[vertex.name] = -1;\n    });\n    used[start] = true;\n    const queue = new Queue();\n    queue.push({ vertex: start, level: 0 });\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    let vertex, level, to;\n    while (!queue.isEmpty()) {\n        vertex = queue.peek().vertex;\n        level = queue.pop().level;\n        d[vertex] = level;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                used[to] = true;\n                queue.push({ vertex: to, level: level + 1 });\n                p[to] = vertex;\n            }\n        });\n    }\n\n    while (p[vertex] !== -1) {\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ from: p[vertex], to: vertex, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        vertex = p[vertex];\n    }\n    trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex: start, hint: level, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n    return level;\n};\n\nconst findDiameter = (vertices, edges, adjacencyList, trace) => {\n    let used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let eccentricities = {};\n    let diameter = 0;\n    for (const {name: start} of vertices) {\n        vertices.forEach(vertex => used[vertex.name] = false);\n        eccentricities[start] = bfs(start, vertices, adjacencyList, used, trace);\n        trace.push({ vertex: start, hint: eccentricities[start], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n\n        trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n\n        diameter = Math.max(diameter, eccentricities[start]);\n    }\n\n    for (const {name: v} of vertices) {\n        if (eccentricities[v] === diameter)\n            trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    }\n\n    return diameter;\n};\n\nexport default {\n    name: \"Диаметр и переферийные вершины графа\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED | Criteria.CONNECTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const trace = [];\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        const startTime = window.performance.now();\n\n        const diameter = findDiameter(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Диаметр графа: ${diameter}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\nlet topSortList = [];\nlet addedVertices = 0;\nlet sortedVertices = 0;\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList);\n        }\n    });\n    trace.push({ vertex, hint: addedVertices++, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    topSortList.push(vertex);\n};\n\nconst topSort = (vertices, edges, adjacencyList, trace) => {\n    used = {};\n    topSortList = [];\n    const isStartVertex = {};\n    vertices.forEach(vertex => {\n        used[vertex.name] = false;\n        isStartVertex[vertex.name] = true;\n    });\n    for (const {name: from} of vertices) {\n        adjacencyList[from].forEach(to => {\n            isStartVertex[to.name] = false;\n        });\n    }\n    addedVertices = 0;\n    sortedVertices = 0;\n\n    for (const {name: start} of vertices) {\n        if (isStartVertex[start]) {\n            dfs(start, adjacencyList);\n        }\n    }\n\n    trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n\n    for (const v of topSortList.reverse()) {\n        trace.push({ vertex: v, hint: sortedVertices++, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        trace.push({ vertex: v, action: VertexAction.UNSELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Топологическая сортировка\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.ORIENTED | Criteria.ACYCLIC,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        topSort(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\nlet timer = 0;\nlet tin = {}, tout = {};\nlet countBridges = 0;\n\nconst dfs = (vertex, adjacencyList, parent = -1) => {\n    used[vertex] = true;\n    tin[vertex] = tout[vertex] = timer++;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (const {name: to} of adjacencyList[vertex]) {\n        if (to === parent)\n            continue;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList, vertex);\n            tout[vertex] = Math.min(tout[vertex], tout[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            if (tout[to] > tin[vertex]) {\n                ++countBridges;\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n                trace.push({ from: vertex, to, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            } else {\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        } else {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            tout[vertex] = Math.min(tout[vertex], tin[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    }\n\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nconst findBridges = (vertices, edges, adjacencyList) => {\n    used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n    timer = 0;\n    tin = {};\n    tout = {};\n    countBridges = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start])\n            dfs(start, adjacencyList);\n    }\n};\n\nexport default {\n    name: \"Поиск мостов\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n\n        const startTime = window.performance.now();\n\n        findBridges(vertices, edges, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Количество мостов: ${countBridges}`,\n                `Время: ${duration.toFixed(4)}мс`,\n                `Кол-во операций: ${getOperationsCount(trace)}`\n            ]\n        };\n    }\n};","export const ActionType = Object.freeze({\n    START_MATRIX_DIALOG_FOR_RESULT: 'START_MATRIX_DIALOG_FOR_RESULT',\n    CLOSE_MATRIX_DIALOG: 'CLOSE_MATRIX_DIALOG'\n});\n\nexport const startMatrixDialogForResult = () => ({\n    type: ActionType.START_MATRIX_DIALOG_FOR_RESULT\n});\n\nconst closeMatrixDialog = () => ({\n   type: ActionType.CLOSE_MATRIX_DIALOG\n});\n\nexport const cancelMatrixDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeMatrixDialog());\n};\n\nexport const submitMatrixDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeMatrixDialog());\n};","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Menu.module.scss\";\nimport Draggable from 'react-draggable';\nimport { ButtonComponent } from \"../Buttons/Buttons\";\nimport { SliderComponent } from \"../Sliders/Sliders\";\nimport { DropDownList } from \"../DropDownLists/DropDownLists\";\nimport {\n    changeGraphMode,\n    cleanGraphSelections,\n    closeMessage,\n    invertOrientation,\n    setGraph,\n    showMessage\n} from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { Graph, GraphMode, vertexRadius } from \"../Graph/Graph\";\nimport { RoundedToggleSwitch } from \"../ToggleSwitches/ToggleSwitches\";\nimport {\n    call,\n    clearStatistics,\n    clearTrace,\n    continueCall,\n    pause,\n    preCall,\n    setAlgorithm,\n    setSpeed\n} from \"../../actions/algorithm\";\nimport DFS from \"../../algorithms/graph/dfs\"\nimport BFS from \"../../algorithms/graph/bfs\"\nimport Dijkstra from \"../../algorithms/graph/dijkstra\"\nimport PrimMST from \"../../algorithms/graph/prim-mst\"\nimport KruskalMST from \"../../algorithms/graph/kruskal-mst\"\nimport CheckConnected from \"../../algorithms/graph/check-connected\"\nimport CheckBipartite from \"../../algorithms/graph/check-bipartite\"\nimport FindRadius from \"../../algorithms/graph/radius\"\nimport FindDiameter from \"../../algorithms/graph/diameter\"\nimport TopologicalSort from \"../../algorithms/graph/topological-sort\"\nimport FindBridges from \"../../algorithms/graph/find-bridges\"\nimport { Vertex } from \"../Graph/Vertex/Vertex\";\nimport { Edge } from \"../Graph/Edge/Edge\";\nimport { startMatrixDialogForResult } from \"../../actions/matrixDialog\";\n\nconst cx = classnames.bind(styles);\n\nconst minAlgorithmSpeed = 0;\nconst maxAlgorithmSpeed = 1000;\n\nconst mapStateToProps = state => ({\n    graphMode: state.graphReducer.graphMode,\n    isOriented: state.graphReducer.graph.isOriented(),\n    isVisualizationActive: state.algorithmReducer.isActive,\n    visualizationSpeed: state.algorithmReducer.speed,\n    selectedAlgorithm: state.algorithmReducer.algorithm,\n    remainingAlgorithmSteps: state.algorithmReducer.trace.length,\n    graph: state.graphReducer.graph\n});\n\nclass MenuComponent extends React.Component {\n    state = {\n        algorithms: [\n            DFS,\n            BFS,\n            Dijkstra,\n            PrimMST,\n            KruskalMST,\n            CheckConnected,\n            CheckBipartite,\n            FindRadius,\n            FindDiameter,\n            TopologicalSort,\n            FindBridges\n        ],\n        algorithmPaused: false\n    };\n\n    componentDidMount() {\n        this.props.setAlgorithm(this.state.algorithms[0]);\n        this.props.setSpeed((minAlgorithmSpeed + maxAlgorithmSpeed) / 2);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (nextProps.graphMode !== this.props.graphMode)\n            return true;\n        if (nextProps.isOriented !== this.props.isOriented)\n            return true;\n        if (nextProps.isVisualizationActive !== this.props.isVisualizationActive)\n            return true;\n        if (nextProps.visualizationSpeed !== this.props.visualizationSpeed)\n            return true;\n        if (nextProps.selectedAlgorithm !== this.props.selectedAlgorithm)\n            return true;\n        if (nextProps.remainingAlgorithmSteps !== this.props.remainingAlgorithmSteps)\n            return true;\n        return false;\n    }\n\n    handleAlgorithmChange = e => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n\n        this.props.setAlgorithm(this.state.algorithms[e.target.value]);\n    };\n\n    startVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.clearTrace();\n            this.props.clearStatistics();\n            this.props.cleanGraphSelections();\n            this.props.preCall();\n        } else if (this.props.isVisualizationActive) {\n            this.props.pause();\n            this.setState({ algorithmPaused: true });\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue();\n        }\n    };\n\n    stepVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.clearTrace();\n            this.props.clearStatistics();\n            this.props.cleanGraphSelections();\n            this.props.preCall(true);\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue(true);\n        }\n    };\n\n    stopVisualization = () => {\n        this.clearVisualization();\n        this.props.closeMessage();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n    };\n\n    handleAlgorithmSpeedChange = e => {\n        this.props.setSpeed(maxAlgorithmSpeed - e.target.value);\n    };\n\n    askForAction = (message, graphMode) => {\n        this.clearVisualization();\n\n        this.props.showMessage(message);\n        this.props.changeGraphMode(graphMode);\n    };\n\n    closeMessage = () => {\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n    };\n\n    invertOrientation = () => {\n        this.clearVisualization();\n\n        this.props.invertOrientation();\n    };\n\n    clearVisualization = () => {\n        this.props.pause();\n        this.setState({ algorithmPaused: false });\n        this.props.cleanGraphSelections();\n        this.props.clearTrace();\n        this.props.clearStatistics();\n    };\n\n    writeToFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        const json = JSON.stringify({\n            vertices: this.props.graph.vertices.map(v => ({\n                x: v.x,\n                y: v.y,\n                name: v.name\n            })),\n            edges: this.props.graph.edges.map(e => ({\n                from: e.from.name,\n                to: e.to.name,\n                weight: e.weight\n            })),\n            oriented: this.props.isOriented\n        });\n\n        const exportData = \"data:text/json;charset=utf-8,\" + escape(json);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"graph.json\");\n        anchorElement.click();\n    };\n\n    askReadFromFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        document.getElementById(\"fileLoad\").click();\n    };\n\n    readFromFile = (e) => {\n        const reader = new FileReader();\n        const file = e.target.files[0];\n\n        reader.onload = (e) => {\n            try {\n                const json = JSON.parse(e.target.result);\n\n                const oriented = json.oriented;\n                const vertices = json.vertices.map(v => new Vertex(v.x, v.y, vertexRadius, v.name));\n                const edges = json.edges.map(e =>\n                    new Edge(\n                        vertices.find(v => v.name === e.from),\n                        vertices.find(v => v.name === e.to),\n                        oriented,\n                        e.weight\n                    )\n                );\n\n                const graph = new Graph(oriented, vertices, edges);\n\n                if (oriented !== this.props.isOriented)\n                    this.invertOrientation();\n                this.props.setGraph(graph);\n            } catch (e) {\n                this.props.showMessage(\"Некорректный формат файла\");\n            }\n        };\n\n        reader.readAsText(file);\n        document.getElementById(\"fileLoad\").value = null;\n    };\n\n    showAdjacencyMatrix = () => {\n        this.props.startMatrixDialog();\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"} cancel={[\"button\", \"input\", \"select\"]}>\n                <div className={cx(\"menu\")}>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"graph-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Режим просмотра\"} // TODO: Find proper name\n                                onClick={() => this.closeMessage()}\n                                activated={this.props.graphMode === GraphMode.DEFAULT}/>\n                            <ButtonComponent\n                                text={\"Добавить вершину\"}\n                                onClick={() => this.askForAction(\"Выберите точку для добавления вершины\", GraphMode.ADD_VERTEX)}\n                                activated={this.props.graphMode === GraphMode.ADD_VERTEX}/>\n                            <ButtonComponent\n                                text={\"Добавить ребро\"}\n                                onClick={() => this.askForAction(\"Выберите вершины, которые нужно соединить ребром\", GraphMode.ADD_EDGE)}\n                                activated={this.props.graphMode === GraphMode.ADD_EDGE}/>\n                            <ButtonComponent\n                                text={\"Удалить вершину/ребро\"}\n                                onClick={() => this.askForAction(\"Выберите объект для удаления\", GraphMode.REMOVE_VERTEX_OR_EDGE)}\n                                activated={this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE}/>\n                        </div>\n                        <RoundedToggleSwitch\n                            className={cx(\"switch\")}\n                            text={\"Ориентированный?\"}\n                            onChange={() => this.invertOrientation()}\n                            isChecked={this.props.isOriented}/>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"algorithms-list\")}>\n                            <DropDownList\n                                items={this.state.algorithms.map(a => a.name)}\n                                onChange={this.handleAlgorithmChange}/>\n                        </div>\n                        <div className={cx(\"slider\")}>\n                            <SliderComponent\n                                label={\"Скорость анимации\"}\n                                value={maxAlgorithmSpeed - this.props.visualizationSpeed}\n                                min={minAlgorithmSpeed}\n                                max={maxAlgorithmSpeed}\n                                onChange={this.handleAlgorithmSpeedChange}/>\n                        </div>\n                        <div className={cx(\"visualization-control-buttons\")}>\n                            <ButtonComponent\n                                text={this.state.algorithmPaused ? \"Далее\" : (this.props.isVisualizationActive ? \"Пауза\" : \"Старт\")}\n                                onClick={this.startVisualization}/>\n                            <ButtonComponent text={\"Шаг\"} onClick={this.stepVisualization}/>\n                            <ButtonComponent text={\"Стоп\"} onClick={this.stopVisualization}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"file-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Сохранить\"}\n                                onClick={() => this.writeToFile()}\n                                activated={false}/>\n                            <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save graph</a>\n\n                            <ButtonComponent\n                                text={\"Загрузить\"}\n                                onClick={() => this.askReadFromFile()}\n                                activated={false}/>\n                            <input id=\"fileLoad\" type=\"file\" accept=\".json\" style={{\"display\": \"none\"}} onChange={(e) => this.readFromFile(e)}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"matrix-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Матрица смежности\"}\n                                onClick={() => this.showAdjacencyMatrix()}\n                                activated={false}/>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeGraphMode: (graphMode) => dispatch(changeGraphMode(graphMode)),\n    showMessage: (message) => dispatch(showMessage(message)),\n    closeMessage: () => dispatch(closeMessage()),\n    invertOrientation: () => dispatch(invertOrientation()),\n    setAlgorithm: (algorithm) => dispatch(setAlgorithm(algorithm)),\n    setSpeed: (speed) => dispatch(setSpeed(speed)),\n    preCall: (isOneStep) => dispatch(preCall(isOneStep)),\n    call: () => dispatch(call()),\n    pause: () => dispatch(pause()),\n    continue: (isOneStep) => dispatch(continueCall(isOneStep)),\n    cleanGraphSelections: () => dispatch(cleanGraphSelections()),\n    clearTrace: () => dispatch(clearTrace()),\n    clearStatistics: () => dispatch(clearStatistics()),\n    setGraph: (graph) => dispatch(setGraph(graph)),\n    startMatrixDialog: () => dispatch(startMatrixDialogForResult())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MessageBox.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message,\n    isAlert: state.graphReducer.isAlert\n});\n\nconst MessageBox = ({ message, isAlert }) => {\n    return (\n        <div className={cx(\"message-box\", {[`invisible`]: message === undefined}, {[`alert`]: isAlert})}>\n            {message}\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(MessageBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./TextInputs.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const TextInputComponent = ({ value, placeholder, onChange, pattern, className, autoFocus = false }) => {\n    return (\n        <input\n            className={cx(\"text-input\", className)}\n            type=\"text\"\n            pattern={pattern}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}\n            autoFocus={autoFocus}/>\n    );\n};","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InputDialog.module.scss\";\nimport { cancelDialog, submitDialog } from \"../../../actions/dialog\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { TextInputComponent } from \"../../TextInputs/TextInputs\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.dialogReducer.isOpen,\n    title: state.dialogReducer.title,\n    text: state.dialogReducer.text,\n    hint: state.dialogReducer.hint,\n    inputPlaceholder: state.dialogReducer.inputPlaceholder,\n    pattern: state.dialogReducer.pattern,\n    onSubmit: state.dialogReducer.onSubmit,\n    onCancel: state.dialogReducer.onCancel\n});\n\nclass InputDialog extends React.Component {\n    state = {\n        value: \"\"\n    };\n\n    handleChange = (e) => {\n        if (e.target.validity.valid)\n            this.setState({ value: e.target.value });\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n        this.setState({ value: \"\" });\n        this.props.submitDialog(this.props.onSubmit, this.state.value);\n    };\n\n    cancel = () => {\n        this.setState({ value: \"\" });\n        this.props.cancelDialog(this.props.onCancel);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => {\n                    this.setState({ value: \"\" });\n                    this.props.cancelDialog(this.props.onCancel);\n                }}\n                ariaHideApp={false}\n                className={cx(\"input-dialog\")}\n                style={customStyles}>\n\n                <h2>{this.props.title}</h2>\n                <div>{this.props.text}</div>\n                <form onSubmit={(e) => this.submit(e)}>\n                    <TextInputComponent\n                        autoFocus={true}\n                        className={cx(\"text-input\")}\n                        placeholder={this.props.inputPlaceholder}\n                        pattern={this.props.pattern}\n                        onChange={this.handleChange}\n                        value={this.state.value}/>\n\n                    <ButtonComponent\n                        type={\"submit\"}\n                        className={cx(\"button\")}\n                        text={\"Ок\"}\n                        onClick={(e) => this.submit(e)}/>\n                    <ButtonComponent\n                        className={cx(\"button\")}\n                        text={\"Отмена\"}\n                        onClick={() => this.cancel()}/>\n                </form>\n\n                <div className={cx(\"hint\")}>{this.props.hint}</div>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputDialog);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InfoBox.module.scss\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    lines: state.algorithmReducer.statistics,\n    isVisible: state.algorithmReducer.isStatisticsShown\n});\n\nconst InfoBox = ({ lines, isVisible }) => {\n    return (\n        <div className={cx(\"info-box\", {[`invisible`]: !(isVisible && Array.isArray(lines) && lines.length)})}>\n            {lines.map((line, index) => <div className={cx(\"text\")} key={index}>{line}</div>)}\n        </div>\n    );\n};\n\nInfoBox.propTypes = {\n    lines: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.symbol,\n        PropTypes.bool\n    ])),\n    isVisible: PropTypes.bool\n};\n\nexport default connect(mapStateToProps)(InfoBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./AdjacencyMatrix.module.scss\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\n\nconst cx = classnames.bind(styles);\n\nconst MatrixCell = ({ cell, topLeft, topRight, bottomLeft, bottomRight }) => {\n    return (\n        <div className={cx(\"matrix-cell\", {[`empty`]: !cell},\n            {[`non-weighted`]: cell && !cell.weighted},\n            {[`top-left-cell`]: topLeft},\n            {[`top-right-cell`]: topRight},\n            {[`bottom-left-cell`]: bottomLeft},\n            {[`bottom-right-cell`]: bottomRight})}>\n            {cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"}\n        </div>\n    );\n};\n\nconst MatrixRow = ({ row, first, last, vertexNumber }) => {\n    return (\n        <div className={cx(\"matrix-row\")}>\n            <div className={cx(\"label-cell\")}>{vertexNumber}</div>\n            {row.map((cell, index) =>\n                <MatrixCell\n                    cell={cell}\n                    topLeft={(index === 0) && first}\n                    topRight={(index + 1 === row.length) && first}\n                    bottomLeft={(index === 0) && last}\n                    bottomRight={(index + 1 === row.length) && last}/>)\n            }\n        </div>\n    );\n};\n\nconst AdjacencyMatrix = ({ graph }) => {\n    const {adjacencyMatrix, verticesNumbers} = edgesListToAdjacencyMatrix(graph.vertices, graph.edges);\n    return (\n        <div className={cx(\"matrix\")}>\n            <div className={cx(\"label-cell\")}>{\" \"}</div>\n            {verticesNumbers.map(v => <div className={cx(\"label-cell\")}>{v}</div>)}\n            {adjacencyMatrix.map((row, index) =>\n                <MatrixRow\n                    row={row}\n                    first={index === 0}\n                    last={index + 1 === graph.vertices.length}\n                    vertexNumber={verticesNumbers[index]}/>)\n            }\n        </div>\n    );\n};\n\nexport default AdjacencyMatrix;","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MatrixDialog.module.scss\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\nimport { cancelMatrixDialog, submitMatrixDialog } from \"../../../actions/matrixDialog\";\nimport AdjacencyMatrix from \"./AdjacencyMatrix\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.matrixDialogReducer.isOpen,\n    graph: state.graphReducer.graph\n});\n\nclass MatrixDialog extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (!this.props.isOpen && !nextProps.isOpen)\n            return false;\n        return true;\n    }\n\n    writeToFile = () => {\n        let {adjacencyMatrix} = edgesListToAdjacencyMatrix(this.props.graph.vertices, this.props.graph.edges);\n\n        adjacencyMatrix = adjacencyMatrix.map(row => row.map(cell => cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"));\n        adjacencyMatrix = adjacencyMatrix.reduce((prev, arr) => prev + arr.reduce((line, cell) => line + cell + \" \", \"\") + \"\\n\", \"\");\n\n        const exportData = \"data:text/plain;charset=utf-8,\" + escape(adjacencyMatrix);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"adjacencyMatrix.txt\");\n        anchorElement.click();\n    };\n\n    cancel = () => {\n        this.props.cancelDialog(null);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => this.cancel()}\n                ariaHideApp={false}\n                className={cx(\"matrix-dialog\")}\n                style={customStyles}>\n\n                <AdjacencyMatrix graph={this.props.graph}/>\n\n                <ButtonComponent\n                    type={\"submit\"}\n                    className={cx(\"button\")}\n                    text={\"Сохранить в файл\"}\n                    onClick={() => this.writeToFile()}/>\n                <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save matrix</a>\n\n                <ButtonComponent\n                    className={cx(\"button\")}\n                    text={\"Закрыть\"}\n                    onClick={() => this.cancel()}/>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitMatrixDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelMatrixDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatrixDialog);","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./App.module.scss\";\nimport PlainGraph from \"./PlainGraph/PlainGraph\";\nimport GraphComponent from \"./Graph/Graph\";\nimport MenuComponent from \"./Menu/Menu\";\nimport MessageBox from \"./MessageBox/MessageBox\";\nimport InputDialog from \"./Dialogs/InputDialog/InputDialog\";\nimport InfoBox from \"./InfoBox/InfoBox\";\nimport MatrixDialog from \"./Dialogs/MatrixDialog/MatrixDialog\";\n\nconst cx = classnames.bind(styles);\n\nconst App = () => (\n    <div className={cx(\"app\")}>\n        <MenuComponent/>\n        <GraphComponent/>\n        <MessageBox/>\n        <InfoBox/>\n        <InputDialog/>\n        <MatrixDialog/>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionType } from \"../actions/dialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false,\n    title: \"\",\n    text: \"\",\n    hint: \"\",\n    inputPlaceholder: \"\",\n    onSubmit: null,\n    onClose: null,\n    pattern: \".*\"\n};\n\nconst dialog = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.START_DIALOG_FOR_RESULT:\n            newState = {\n                ...state,\n                isOpen: true,\n                title: action.title,\n                text: action.text,\n                hint: action.hint,\n                inputPlaceholder: action.inputPlaceholder,\n                pattern: action.pattern\n            };\n\n            newState.onSubmit = (value) => {\n                const onSubmit = action.onSubmit;\n                if (onSubmit)\n                    onSubmit(value);\n            };\n            newState.onCancel = () => {\n                const onCancel = action.onCancel;\n                if (onCancel)\n                    onCancel();\n            };\n\n            return newState;\n        case ActionType.CLOSE_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default dialog;","import { ActionType } from \"../actions/algorithm\";\nimport React from \"react\";\nimport { PreCallAction } from \"../algorithms/graph/index\";\n\nconst defaultState = {\n    trace: [],\n    isActive: false,\n    algorithm: null,\n    speed: 1000,\n    isOneStep: false,\n    statistics: [],\n    isStatisticsShown: false\n};\n\nconst algorithm = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.CALL:\n            newState = {\n                ...state\n            };\n\n            const preCall = state.algorithm.preCall;\n            const vertices = action.graph.vertices;\n            const edges = action.graph.edges;\n            let result;\n            if (preCall === PreCallAction.SELECT_VERTEX) {\n                result = state.algorithm.call(vertices, edges, action.vertex);\n            } else if (preCall === PreCallAction.SELECT_EDGE) {\n                result = state.algorithm.call(vertices, edges, action.edge);\n            } else if (preCall === PreCallAction.NOTHING) {\n                result = state.algorithm.call(vertices, edges);\n            }\n            newState.trace = result.trace;\n            newState.statistics = result.statistics;\n\n            return newState;\n        case ActionType.POP_TRACE_STEP:\n            newState = {\n                ...state,\n                trace: [...state.trace]\n            };\n\n            newState.trace.shift();\n\n            return newState;\n        case ActionType.START:\n            return {\n                ...state,\n                isActive: true\n            };\n        case ActionType.PAUSE:\n            return {\n                ...state,\n                isActive: false\n            };\n        case ActionType.SET_ALGORITHM:\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        case ActionType.SET_SPEED:\n            return {\n                ...state,\n                speed: action.speed\n            };\n        case ActionType.SET_IS_ONE_STEP:\n            return {\n                ...state,\n                isOneStep: action.isOneStep\n            };\n        case ActionType.CLEAR_TRACE:\n            return {\n                ...state,\n                trace: []\n            };\n        case ActionType.SHOW_STATISTICS:\n            return {\n                ...state,\n                isStatisticsShown: true\n            };\n        case ActionType.CLEAR_STATISTICS:\n            return {\n                ...state,\n                statistics: [],\n                isStatisticsShown: false\n            };\n        default:\n            return state;\n    }\n};\n\nexport default algorithm;","import { ActionType } from \"../actions/matrixDialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false\n};\n\nconst matrixDialog = (state = defaultState, action) => {\n    switch (action.type) {\n        case ActionType.START_MATRIX_DIALOG_FOR_RESULT:\n            return {\n                ...state,\n                isOpen: true\n            };\n        case ActionType.CLOSE_MATRIX_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default matrixDialog;","import { Graph, GraphMode } from \"../components/Graph/Graph\";\nimport { ActionType } from \"../actions\";\nimport { VertexHintState, VertexState } from \"../components/Graph/Vertex/Vertex\";\nimport { combineReducers } from \"redux\";\nimport dialog from \"./dialog\";\nimport algorithm from \"./algorithm\";\nimport matrixDialog from \"./matrixDialog\";\nimport { AlgorithmActionType, EdgeAction, VertexAction, VertexHintAction } from \"../algorithms/graph\";\nimport { EdgeState } from \"../components/Graph/Edge/Edge\";\n\nconst defaultState = {\n    graph: new Graph(false),\n    message: undefined,\n    isAlert: false,\n    graphMode: GraphMode.DEFAULT,\n    selectedVertex: undefined // For 'ADD_EDGE' // TODO: Do 'ADD_EDGE' in a cleaner way\n};\n\nconst clone = object => {\n    return Object.assign( Object.create( Object.getPrototypeOf(object)), object);\n};\n\nconst unselectSelectedVertex = (state) => {\n    if (state.selectedVertex !== undefined) {\n        const i = state.graph.vertices.findIndex(v => v === state.selectedVertex);\n        if (i !== -1)\n            state.graph.vertices[i].state = VertexState.DEFAULT;\n        state.selectedVertex = undefined;\n    }\n};\n\nconst updateVertexByAction = (vertex, action) => {\n    switch (action) {\n        case VertexAction.SELECT:\n            vertex.state = VertexState.HIGHLIGHTED;\n            break;\n        case VertexAction.ENTER:\n            vertex.state = VertexState.PRE_COMPLETED;\n            break;\n        case VertexAction.EXIT:\n            vertex.state = VertexState.COMPLETED;\n            break;\n        case VertexAction.UNSELECT:\n            vertex.state = VertexState.DEFAULT;\n            break;\n        case VertexAction.COLOR_1:\n            vertex.state = VertexState.COLOR_1;\n            break;\n        case VertexAction.COLOR_2:\n            vertex.state = VertexState.COLOR_2;\n            break;\n        default:\n    }\n};\n\nconst updateEdgeByAction = (edge, action) => {\n    switch (action) {\n        case EdgeAction.WALK:\n            edge.state = EdgeState.WALKED;\n            break;\n        case EdgeAction.HIGHLIGHT:\n            edge.state = EdgeState.HIGHLIGHTED;\n            break;\n        case EdgeAction.SHADOW:\n            edge.state = EdgeState.SHADOWED;\n            break;\n        default:\n    }\n};\n\nconst updateVertexHintByAction = (vertex, action) => {\n    switch (action) {\n        case VertexHintAction.REMOVE:\n            vertex.hintState = VertexHintState.CLEAR;\n            break;\n        case VertexHintAction.SET:\n            vertex.hintState = VertexHintState.DEFAULT;\n            break;\n        case VertexHintAction.HIGHLIGHT:\n            vertex.hintState = VertexHintState.HIGHLIGHTED;\n            break;\n        default:\n    }\n};\n\nconst cleanGraphSelections = (state) => {\n    state.graph.vertices.forEach(v => {\n        v.state = VertexState.DEFAULT;\n        v.hintState = VertexHintState.CLEAR;\n        v.hint = \"\";\n    });\n    state.graph.edges.forEach(e => e.state = EdgeState.DEFAULT);\n    state.graph.visualizationEdges = [];\n    state.selectedVertex = undefined;\n};\n\nconst reducer = (state = defaultState, action) => {\n    let newState;\n    let i;\n    switch (action.type) {\n        case ActionType.ADD_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addVertex(action.x, action.y, action.radius);\n\n            return newState;\n        case ActionType.ADD_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addEdge(action.vertexFrom, action.vertexTo, action.weight);\n\n            return newState;\n        case ActionType.REMOVE_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeVertex(action.vertex);\n\n            return newState;\n        case ActionType.REMOVE_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeEdge(action.edge);\n\n            return newState;\n        case ActionType.UPDATE_VERTEX_POSITION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.vertices[action.vertexIndex].x = action.x;\n            newState.graph.vertices[action.vertexIndex].y = action.y;\n\n            return newState;\n        case ActionType.CHANGE_GRAPH_MODE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            if (action.graphMode !== newState.graphMode) {\n                newState.graphMode = action.graphMode;\n\n                unselectSelectedVertex(newState);\n            }\n\n            return newState;\n        case ActionType.SELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            i = newState.graph.vertices.findIndex(v => v === action.vertex);\n            if (i !== -1) {\n                newState.graph.vertices[i].state = VertexState.HIGHLIGHTED;\n                newState.selectedVertex = action.vertex;\n            }\n\n            return newState;\n        case ActionType.UNSELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            return newState;\n        case ActionType.SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message,\n                isAlert: action.isAlert\n            };\n        case ActionType.CLOSE_MESSAGE:\n            return {\n                ...state,\n                message: undefined,\n                isAlert: false\n            };\n        case ActionType.INVERT_ORIENTATION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.invertOrientation();\n\n            return newState;\n        case ActionType.ALGORITHM_STEP:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            const step = action.step;\n            if (step.actionType === AlgorithmActionType.VERTEX_ACTION) {\n                if (step.action === VertexAction.CLEAR_ALL_SELECTIONS) {\n                    newState.graph.vertices.forEach(v => v.state = VertexState.DEFAULT);\n                } else {\n                    const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                    if (vertex)\n                        updateVertexByAction(vertex, step.action);\n                }\n            } else if (step.actionType === AlgorithmActionType.EDGE_ACTION) {\n                if (step.action === EdgeAction.CLEAR_ALL_SELECTIONS) {\n                    newState.graph.visualizationEdges = [];\n                } else {\n                    const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                    const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                    if (step.action === EdgeAction.UNSELECT) {\n                        newState.graph.removeVisualizationEdgeByVertices(vertexFrom, vertexTo, step.oriented);\n                    } else {\n                        const edge = newState.graph.addVisualizationEdge(vertexFrom, vertexTo, step.oriented, step.weight);\n                        updateEdgeByAction(edge, step.action);\n                    }\n                }\n            } else if (step.actionType === AlgorithmActionType.VERTEX_HINT_ACTION) {\n                const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                if (vertex) {\n                    if (step.action === VertexHintAction.REMOVE)\n                        vertex.hint = \"\";\n                    else\n                        vertex.hint = step.hint;\n                    updateVertexHintByAction(vertex, step.action);\n                }\n            }\n\n            return newState;\n        case ActionType.CLEAN_GRAPH_SELECTIONS:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            cleanGraphSelections(newState);\n\n            return newState;\n        case ActionType.SET_GRAPH:\n            return {\n                ...state,\n                graph: action.graph\n            };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    graphReducer: reducer,\n    dialogReducer: dialog,\n    algorithmReducer: algorithm,\n    matrixDialogReducer: matrixDialog\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2at_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plain_graph\":\"PlainGraph_plain_graph__132cd\",\"drawing_area\":\"PlainGraph_drawing_area__poiJd\",\"cell\":\"PlainGraph_cell__2tDfs\",\"cell-blocked\":\"PlainGraph_cell-blocked__13I9p\",\"cell-path\":\"PlainGraph_cell-path__1JSUa\",\"cell-start\":\"PlainGraph_cell-start__2FTb6\",\"cell-finish\":\"PlainGraph_cell-finish__2icJo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2xbQm\",\"menu-sub\":\"Menu_menu-sub__2jhA1\",\"graph-control-buttons\":\"Menu_graph-control-buttons__2CY62\",\"switch\":\"Menu_switch__3Y97k\",\"visualization-control-buttons\":\"Menu_visualization-control-buttons__1OTXW\",\"file-control-buttons\":\"Menu_file-control-buttons__3PmTU\",\"algorithms-list\":\"Menu_algorithms-list__2mwx1\",\"slider\":\"Menu_slider__RA1Ez\",\"matrix-control-buttons\":\"Menu_matrix-control-buttons__26fCf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__1L6GG\",\"activated\":\"Buttons_activated__EZOmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider-wrapper\":\"Sliders_slider-wrapper__GIw-8\",\"slider-label\":\"Sliders_slider-label__1w08l\",\"slider\":\"Sliders_slider__1gqJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drop-down-list\":\"DropDownLists_drop-down-list__ix94o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch-round-wrapper\":\"ToggleSwitches_switch-round-wrapper__g2bxh\",\"switch-round\":\"ToggleSwitches_switch-round__1bQ1T\",\"slider\":\"ToggleSwitches_slider__Q-bUA\",\"text\":\"ToggleSwitches_text__1sKta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message-box\":\"MessageBox_message-box__2uEgD\",\"invisible\":\"MessageBox_invisible__10Wwp\",\"alert\":\"MessageBox_alert__14QTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-dialog\":\"InputDialog_input-dialog__2SLyF\",\"text-input\":\"InputDialog_text-input__2zjdU\",\"button\":\"InputDialog_button__1ZFHJ\",\"hint\":\"InputDialog_hint__1ftkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"TextInputs_text-input__3mPdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info-box\":\"InfoBox_info-box__3t_A2\",\"text\":\"InfoBox_text__sgPCj\",\"invisible\":\"InfoBox_invisible__1un1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix-dialog\":\"MatrixDialog_matrix-dialog__2YGd3\",\"button\":\"MatrixDialog_button__3KxWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"AdjacencyMatrix_matrix__3b96v\",\"matrix-row\":\"AdjacencyMatrix_matrix-row__3vHpl\",\"top-left-cell\":\"AdjacencyMatrix_top-left-cell__1-lFt\",\"top-right-cell\":\"AdjacencyMatrix_top-right-cell__1RYRb\",\"bottom-left-cell\":\"AdjacencyMatrix_bottom-left-cell__23nQC\",\"bottom-right-cell\":\"AdjacencyMatrix_bottom-right-cell__2r29f\",\"matrix-cell\":\"AdjacencyMatrix_matrix-cell__2Z91s\",\"label-cell\":\"AdjacencyMatrix_label-cell__3YJYr\",\"empty\":\"AdjacencyMatrix_empty__3-1PZ\"};"],"sourceRoot":""}