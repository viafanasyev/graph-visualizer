{"version":3,"sources":["algorithms/plain/breadth-first-search.js","components/PlainGraph/PlainGraph.jsx","components/Graph/Vertex/Vertex.jsx","components/Graph/Edge/Edge.jsx","utils/sleep.js","actions/index.js","actions/dialog.js","algorithms/graph/index.js","actions/algorithm.js","components/Graph/VisualizationEdge/VisualizationEdge.jsx","components/Graph/Graph.jsx","components/Buttons/Buttons.jsx","components/Sliders/Sliders.jsx","components/DropDownLists/DropDownLists.jsx","components/ToggleSwitches/ToggleSwitches.jsx","utils/graphConverter.js","algorithms/graph/dfs.js","utils/queue.js","algorithms/graph/bfs.js","components/Menu/Menu.jsx","components/MessageBox/MessageBox.jsx","components/TextInputs/TextInputs.jsx","components/Dialogs/InputDialog/InputDialog.jsx","components/InfoBox/InfoBox.jsx","components/App.jsx","serviceWorker.js","reducers/dialog.js","reducers/algorithm.js","reducers/index.js","index.js","components/App.module.scss","components/PlainGraph/PlainGraph.module.scss","components/Menu/Menu.module.scss","components/Buttons/Buttons.module.scss","components/Sliders/Sliders.module.scss","components/DropDownLists/DropDownLists.module.scss","components/ToggleSwitches/ToggleSwitches.module.scss","components/MessageBox/MessageBox.module.scss","components/Dialogs/InputDialog/InputDialog.module.scss","components/TextInputs/TextInputs.module.scss","components/InfoBox/InfoBox.module.scss"],"names":["algorithm","cells","cellStart","cellFinish","pathStatus","queue","x","y","parent","current","shift","console","log","next","node","minX","minY","maxX","maxY","res","push","neighbours","length","i","findIndex","n","cx","classnames","bind","styles","CellState","Object","freeze","EMPTY","BLOCKED","START","FINISH","PATH","Cell","status","onMouseEnter","onMouseLeave","className","React","Component","Vertex","radius","name","this","state","VertexState","DEFAULT","HIGHLIGHTED","PRE_COMPLETED","COMPLETED","VertexComponent","vertex","draggable","onDragStart","onDragEnd","onDragMove","onClick","e","call","target","getChildren","setAttrs","scaleX","scaleY","shadowColor","shadowBlur","shadowOffset","shadowOpacity","moveToTop","handleDragStart","to","duration","shadowOffsetX","shadowOffsetY","handleDragEnd","fill","color","stroke","strokeWidth","vertexBorderWidth","text","fontSize","textColor","width","height","align","verticalAlign","Edge","vertexFrom","vertexTo","oriented","weight","_from","_to","EdgeState","_oriented","undefined","WALKED","ERASED","EdgeComponent","edgeComponent","edge","edgeType","points","getEdgePointsForType","EdgeType","NOT_ORIENTED","linePoints","hitStrokeWidth","tension","isWeighted","labelPoints","EdgeLabel","labelRadius","labelBorderWidth","ONE_SIDE_ORIENTED","TWO_SIDE_ORIENTED","LOOP","from","dx","dy","angle","Math","atan2","vertexFromOffset","vertexToOffset","xFrom","cos","yFrom","sin","xTo","yTo","xMiddle","yMiddle","anchorDx","sqrt","anchorDy","xMiddleFirst","sleep","ms","Promise","resolve","setTimeout","ActionType","ADD_VERTEX","ADD_EDGE","REMOVE_VERTEX","REMOVE_EDGE","CHANGE_GRAPH_MODE","SELECT_VERTEX","UNSELECT_VERTEX","SHOW_MESSAGE","CLOSE_MESSAGE","UPDATE_VERTEX_POSITION","INVERT_ORIENTATION","ALGORITHM_STEP","CLEAN_GRAPH_SELECTIONS","changeGraphMode","graphMode","type","currentMessageId","showMessage","message","dispatch","a","messageId","showMessageConnector","closeMessage","algorithmStep","step","START_DIALOG_FOR_RESULT","CLOSE_DIALOG","closeDialog","VertexAction","SELECT","UNSELECT","ENTER","EXIT","EdgeAction","WALK","HIGHLIGHT","AlgorithmActionType","VERTEX_ACTION","EDGE_ACTION","PreCallAction","NOTHING","SELECT_EDGE","PRE_CALL","CALL","PAUSE","POP_TRACE_STEP","SET_ALGORITHM","SET_SPEED","SET_IS_ONE_STEP","CLEAR_TRACE","setIsOneStep","isOneStep","getState","GraphMode","graph","graphReducer","callConnector","algorithmReducer","pause","start","callSuccess","currentVisualizationId","trace","popTraceStep","visualizationId","isActive","speed","VisualizationEdgeComponent","REMOVE_VERTEX_OR_EDGE","ALGORITHM_PRE_CALL_SELECT_VERTEX","ALGORITHM_PRE_CALL_SELECT_EDGE","Graph","_vertices","_edges","_visualizationEdges","_currentName","index","v","splice","filter","findEdge","forEach","invertOrientation","newEdges","findVisualizationEdge","edges","GraphComponent","draggedVertex","windowWidth","windowHeight","findIndexOfVertex","props","vertices","handleVertexDragStart","setState","updateDraggedVertex","updateVertexPosition","handleVertexDragMove","handleVertexDragEnd","getEdgeType","isOriented","handleCanvasClick","evt","clientX","clientY","addVertex","selectedVertex","unselectVertex","handleVertexClick","cancelBubble","removeVertex","selectVertex","startDialogForResult","value","addEdge","callAlgorithm","handleEdgeClick","removeEdge","handleResize","window","innerWidth","innerHeight","onresize","map","key","visualizationEdges","connect","vertexIndex","title","hint","inputPlaceholder","onSubmit","onClose","pattern","onCancel","ButtonComponent","activated","SliderComponent","label","min","max","onChange","DropDownList","items","item","RoundedToggleSwitch","isChecked","defaultChecked","edgesListToAdjacencyList","adjacencyList","entries","verticesList","sort","b","used","preCall","dfs","action","actionType","Queue","_queue","isEmpty","pop","bfs","MenuComponent","algorithms","DFS","BFS","algorithmPaused","handleAlgorithmChange","clearVisualization","setAlgorithm","startVisualization","remainingAlgorithmSteps","cleanGraphSelections","isVisualizationActive","continue","stepVisualization","stopVisualization","handleAlgorithmSpeedChange","setSpeed","askForAction","clearTrace","grid","bounds","cancel","visualizationSpeed","selectedAlgorithm","continueCall","TextInputComponent","placeholder","autoFocus","customStyles","overlay","zIndex","InputDialog","handleChange","validity","valid","submit","preventDefault","submitDialog","cancelDialog","isOpen","onRequestClose","ariaHideApp","style","result","lines","Array","isArray","line","inputDialogProps","dialogReducer","Menu","Boolean","location","hostname","match","defaultState","dialog","newState","clone","object","assign","create","getPrototypeOf","unselectSelectedVertex","updateVertexByAction","updateEdgeByAction","combineReducers","find","addVisualizationEdge","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.75e495d2.chunk.js","sourcesContent":["export const algorithm = {\n    name: \"Breadth First Search\",\n    run: function (cells, cellStart, cellFinish, pathStatus) {\n        let node = { x: cellStart.x, y: cellStart.y, parent: null };\n\n        const queue = [node];\n        while (queue.length) {\n            let current = queue.shift();\n            if ((current.x !== cellStart.x) || (current.y !== cellStart.y))\n                cells[current.y][current.x] = pathStatus;\n            if ((current.x === cellFinish.x) && (current.y === cellFinish.y)) {\n                // const path = backtrace(current);\n                // TODO: something\n                return;\n            }\n            console.log(current);\n            const next = neighbours(current, 0, 0, cells[0].length - 1, cells.length - 1);\n            for (let i = 0; i < next.length; ++i)\n                if ((cells[next[i].y][next[i].x] !== pathStatus) && !((next[i].x === cellStart.x) && (next[i].y === cellStart.y)) && (queue.findIndex(n => (n.x === next[i].x) && (n.y === next[i].y)) === -1))\n                    queue.push(next[i]);\n        }\n    }\n};\n\nfunction backtrace(node) {\n    const path = [{x: node.x, y: node.y}];\n    while (node.parent !== null) {\n        node = node.parent;\n        path.push({x: node.x, y: node.y});\n    }\n    return path;\n}\n\nfunction neighbours(node, minX, minY, maxX, maxY) {\n    const res = [];\n    if (node.x < maxX)\n        res.push({ x: node.x + 1, y: node.y, parent: node });\n    if (node.x > minX)\n        res.push({ x: node.x - 1, y: node.y, parent: node });\n    if (node.y < maxY)\n        res.push({ x: node.x, y: node.y + 1, parent: node });\n    if (node.y > minY)\n        res.push({ x: node.x, y: node.y - 1, parent: node });\n    return res;\n}","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./PlainGraph.module.scss\";\nimport { algorithm } from \"../../algorithms/plain/breadth-first-search\";\n\nconst cx = classnames.bind(styles);\n\nconst CellState = Object.freeze({ EMPTY: 0, BLOCKED: 1, START: 2, FINISH: 3, PATH: 4});\n\nconst Cell = ({x, y, status, onMouseEnter, onMouseLeave}) => (\n    <rect x={x} y={y} className={cx(\"cell\", {\n            [`cell-blocked`]: status === CellState.BLOCKED,\n            [`cell-path`]: status === CellState.PATH,\n            [`cell-start`]: status === CellState.START,\n            [`cell-finish`]: status === CellState.FINISH\n          })}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}/>\n);\n\nclass PlainGraph extends React.Component {\n    state = {\n        cells: [],\n        cellSize: 40,\n        rows: 1000 / 40 + 10,\n        columns: 2000 / 40 + 10,\n        isMouseDown: false,\n        previousMouseRow: -1,\n        previousMouseColumn: -1,\n        mouseCellState: -1\n    };\n\n    componentDidMount() {\n        const cellSize = 40;\n        const rows = 1000 / cellSize + 10;\n        const columns = 2000 / cellSize + 10;\n        const cells = [];\n        // const rows = window.innerHeight / cellSize + 10, columns = window.innerWidth / cellSize + 10; // TODO: change on resize\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < columns; ++j) {\n                row.push(CellState.EMPTY);\n            }\n            cells.push(row);\n        }\n        cells[2][2] = CellState.START;\n        cells[2][40] = CellState.FINISH;\n        this.setState({ cells: cells, cellSize: cellSize, rows: rows, columns: columns});\n    }\n\n    invertCellUnderMouse = (event) => {\n        this.setState(oldState => {\n            const x = Math.floor(event.x / this.state.cellSize);\n            const y = Math.floor(event.y / this.state.cellSize);\n            if ((x === oldState.previousMouseColumn) && (y === oldState.previousMouseRow))\n                return oldState;\n            const state = {...oldState};\n\n            const currentCellState = state.cells[y][x];\n            if (currentCellState === state.mouseCellState) {\n                if ((currentCellState === CellState.EMPTY) || (currentCellState === CellState.PATH))\n                    state.cells[y][x] = CellState.BLOCKED;\n                else if (currentCellState === CellState.BLOCKED)\n                    state.cells[y][x] = CellState.EMPTY;\n            }\n            state.previousMouseRow = y;\n            state.previousMouseColumn = x;\n\n            return state;\n        });\n    };\n\n    handleMouseDown = (event) => {\n        algorithm.run(this.state.cells, {x:2,y:2},{x:40,y:2}, CellState.PATH);\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.setState({\n            isMouseDown: true,\n            mouseCellState: this.state.cells\n                [Math.floor(reducedEvent.y / this.state.cellSize)]\n                [Math.floor(reducedEvent.x / this.state.cellSize)]\n        });\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    handleMouseUp = (event) => {\n        this.invertCellUnderMouse({ x: event.clientX, y: event.clientY });\n        this.setState({ isMouseDown: false, previousMouseRow: -1, previousMouseColumn: -1 });\n    };\n\n    handleCellMouseEnter = (event) => {\n        if (!this.state.isMouseDown)\n            return;\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    render() {\n        return (\n            <div className={cx(\"plain_graph\")}>\n                <svg className={cx(\"drawing_area\")}\n                     onMouseDown={e => this.handleMouseDown(e)}\n                     onMouseUp={e => this.handleMouseUp(e)}>\n                    {this.state.cells.map((row, y) =>\n                        row.map((cell, x) =>\n                            <Cell\n                                x={x * this.state.cellSize}\n                                y={y * this.state.cellSize}\n                                status={cell}\n                                key={this.state.columns * y + x}\n                                onMouseEnter={e => this.handleCellMouseEnter(e)}/>\n                            )\n                        )\n                    }\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default PlainGraph;","import { Circle, Group, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Vertex {\n    constructor(x, y, radius, name) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.state = VertexState.DEFAULT;\n        this.name = name;\n    }\n\n    get color() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'white';\n            case VertexState.HIGHLIGHTED:\n                return 'yellow';\n            case VertexState.PRE_COMPLETED:\n                return '#CCCCCC';\n            case VertexState.COMPLETED:\n                return '#444444';\n            default:\n                return 'white';\n        }\n    }\n\n    get textColor() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'black';\n            case VertexState.HIGHLIGHTED:\n                return 'black';\n            case VertexState.PRE_COMPLETED:\n                return 'black';\n            case VertexState.COMPLETED:\n                return 'white';\n            default:\n                return 'black';\n        }\n    }\n}\n\nconst handleDragStart = (e, call) => {\n    e.target.getChildren()[0].setAttrs({\n        scaleX: 1.1,\n        scaleY: 1.1,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: { x: 10, y: 10 },\n        shadowOpacity: 0.5\n    });\n    e.target.moveToTop();\n\n    call(e);\n};\n\nconst handleDragEnd = (e, call) => {\n    e.target.getChildren()[0].to({\n        duration: 0.25,\n        scaleX: 1,\n        scaleY: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0\n    });\n\n    call(e);\n};\n\nexport const VertexComponent = ({ vertex, draggable, onDragStart, onDragEnd, onDragMove, onClick }) => {\n    const labelWidth = 40, labelHeight = 20;\n    return (\n        <Group\n            draggable={draggable}\n            onDragStart={e => handleDragStart(e, onDragStart)}\n            onDragEnd={e => handleDragEnd(e, onDragEnd)}\n            onDragMove={onDragMove}\n            onClick={onClick}\n            x={vertex.x}\n            y={vertex.y}>\n            <Circle\n                x={0}\n                y={0}\n                radius={vertex.radius}\n                fill={vertex.color}\n                stroke={'black'}\n                shadowBlur={0}\n                strokeWidth={vertexBorderWidth}\n                shadowOpacity={0.5}/>\n            <Text\n                text={vertex.name}\n                x={-labelWidth / 2.}\n                y={-labelHeight / 2.}\n                fontSize={20}\n                fill={vertex.textColor}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>);\n};\n\nexport const vertexBorderWidth = 2;\n\nexport const VertexState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, PRE_COMPLETED: 2, COMPLETED: 3 });","import { vertexBorderWidth } from \"../Vertex/Vertex\";\nimport { Arrow, Circle, Group, Line, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Edge {\n    constructor(vertexFrom, vertexTo, oriented, weight) {\n        this._from = vertexFrom;\n        this._to = vertexTo;\n        this.weight = weight;\n        this.state = EdgeState.DEFAULT;\n        this._oriented = oriented;\n    }\n\n    get from() {\n        return this._from;\n    }\n\n    get to() {\n        return this._to;\n    }\n\n    get color() {\n        switch (this.state) {\n            case EdgeState.DEFAULT:\n                return 'black';\n            case EdgeState.HIGHLIGHTED:\n                return '#f7ff00';\n            case EdgeState.WALKED:\n                return '#ff5f3c';\n            case EdgeState.ERASED:\n                return '#ffffff00';\n            default:\n                return 'black';\n        }\n    }\n\n    isWeighted() {\n        return (this.weight !== undefined) && (this.weight !== null);\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n    }\n}\n\nexport const EdgeComponent = ({ edge, edgeType, onClick }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group onClick={onClick}>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeLabel = ({ x, y, text }) => {\n    const labelRadius = 15;\n    const labelHorizontalPadding = 1, labelVerticalPadding = 5;\n    const labelBorderWidth = 0;\n    return (\n        <Group\n            x={x - labelRadius - labelHorizontalPadding - labelBorderWidth}\n            y={y - labelRadius - labelVerticalPadding - labelBorderWidth}\n            width={labelRadius * 2. + 2. * (labelHorizontalPadding + labelBorderWidth)}\n            height={labelRadius * 2. + 2. * (labelVerticalPadding + labelBorderWidth)}>\n            <Circle\n                x={labelRadius + labelHorizontalPadding + labelBorderWidth}\n                y={labelRadius + labelVerticalPadding + labelBorderWidth}\n                radius={labelRadius}\n                fill={'white'}\n                stroke={'black'}\n                strokeWidth={labelBorderWidth}/>\n            <Text\n                x={labelBorderWidth + labelHorizontalPadding}\n                y={labelBorderWidth + labelVerticalPadding}\n                text={text}\n                fontSize={20}\n                width={labelRadius * 2.}\n                height={labelRadius * 2.}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>\n    );\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });\nexport const EdgeState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, ERASED: 2, WALKED: 3 });\n\nexport const getEdgePointsForType = (edge, edgeType) => {\n    const vertexFrom = edge.from;\n    const vertexTo = edge.to;\n    const dx = vertexTo.x - vertexFrom.x;\n    const dy = vertexFrom.y - vertexTo.y;\n    const angle = Math.atan2(dy, dx);\n    const vertexFromOffset = vertexFrom.radius + vertexBorderWidth / 2.;\n    const vertexToOffset = vertexTo.radius + vertexBorderWidth / 2.;\n\n    if ((edgeType === EdgeType.ONE_SIDE_ORIENTED) || (edgeType === EdgeType.NOT_ORIENTED)) {\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle);\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xTo, yTo\n            ],\n            labelPoints: [\n                (xFrom + xTo) / 2.,\n                (yFrom + yTo) / 2.\n            ]\n        };\n    } else if (edgeType === EdgeType.TWO_SIDE_ORIENTED) {\n        const angleOffset = 0.25;\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle + angleOffset);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle + angleOffset);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle - angleOffset);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle - angleOffset);\n\n        const middlePointHeightCoefficient = 1. / 15.;\n        const xMiddle = (xFrom + xTo) / 2. - (yFrom - yTo) * middlePointHeightCoefficient;\n        const yMiddle = (yFrom + yTo) / 2. + (xFrom - xTo) * middlePointHeightCoefficient;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddle, yMiddle,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle,\n                yMiddle\n            ]\n        };\n    } else if (edgeType === EdgeType.LOOP) {\n        const xFrom = vertexFrom.x - vertexFromOffset;\n        const yFrom = vertexFrom.y;\n        const xTo = vertexFrom.x - vertexFromOffset;\n        const yTo = vertexFrom.y;\n\n        const anchorDx = 3. * vertexFromOffset / Math.sqrt(2.);\n        const anchorDy = 1.5 * vertexFromOffset / Math.sqrt(2.);\n        const xMiddleFirst = xFrom - anchorDx;\n        const yMiddleFirst = yFrom - anchorDy;\n        const xMiddle = xMiddleFirst - vertexFromOffset;\n        const yMiddle = yFrom;\n        const xMiddleSecond = xTo - anchorDx;\n        const yMiddleSecond = yTo + anchorDy;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddleFirst, yMiddleFirst,\n                xMiddle, yMiddle,\n                xMiddleSecond, yMiddleSecond,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle, yMiddle\n            ]\n        };\n    }\n};","export function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    ADD_VERTEX: 'ADD_VERTEX',\n    ADD_EDGE: 'ADD_EDGE',\n    REMOVE_VERTEX: 'REMOVE_VERTEX',\n    REMOVE_EDGE: 'REMOVE_EDGE',\n    CHANGE_GRAPH_MODE: 'CHANGE_GRAPH_MODE',\n    SELECT_VERTEX: 'SELECT_VERTEX',\n    UNSELECT_VERTEX: 'UNSELECT_VERTEX',\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    CLOSE_MESSAGE: 'CLOSE_MESSAGE',\n    UPDATE_VERTEX_POSITION: 'UPDATE_VERTEX_POSITION',\n    INVERT_ORIENTATION: 'INVERT_ORIENTATION',\n    ALGORITHM_STEP: 'ALGORITHM_STEP',\n    CLEAN_GRAPH_SELECTIONS: 'CLEAN_GRAPH_SELECTIONS'\n});\n\nexport const addVertex = (x, y, radius) => ({\n    type: ActionType.ADD_VERTEX,\n    x,\n    y,\n    radius\n});\n\nexport const addEdge = (vertexFrom, vertexTo, weight) => ({\n    type: ActionType.ADD_EDGE,\n    vertexFrom,\n    vertexTo,\n    weight\n});\n\nexport const removeVertex = (vertex) => ({\n    type: ActionType.REMOVE_VERTEX,\n    vertex\n});\n\nexport const removeEdge = (edge) => ({\n    type: ActionType.REMOVE_EDGE,\n    edge\n});\n\nexport const changeGraphMode = (graphMode) => ({\n    type: ActionType.CHANGE_GRAPH_MODE,\n    graphMode\n});\n\nexport const selectVertex = (vertex) => ({\n   type: ActionType.SELECT_VERTEX,\n   vertex\n});\n\nexport const unselectVertex = (vertex) => ({\n   type: ActionType.UNSELECT_VERTEX,\n   vertex\n});\n\nlet currentMessageId = 0;\n\nexport const showMessage = (message) => async (dispatch) => {\n    const messageId = ++currentMessageId;\n    dispatch(showMessageConnector(message));\n    await sleep(2000);\n    if (messageId === currentMessageId)\n        dispatch(closeMessage());\n};\n\nconst showMessageConnector = (message) => ({\n    type: ActionType.SHOW_MESSAGE,\n    message\n});\n\nexport const closeMessage = () => ({\n    type: ActionType.CLOSE_MESSAGE\n});\n\nexport const updateVertexPosition = (vertexIndex, x, y) => ({\n    type: ActionType.UPDATE_VERTEX_POSITION,\n    vertexIndex,\n    x,\n    y\n});\n\nexport const invertOrientation = () => ({\n   type: ActionType.INVERT_ORIENTATION\n});\n\nexport const algorithmStep = (step) => ({\n   type: ActionType.ALGORITHM_STEP,\n   step\n});\n\nexport const cleanGraphSelections = () => ({\n   type: ActionType.CLEAN_GRAPH_SELECTIONS\n});","export const ActionType = Object.freeze({\n    START_DIALOG_FOR_RESULT: 'START_DIALOG_FOR_RESULT',\n    CLOSE_DIALOG: 'CLOSE_DIALOG'\n});\n\nexport const startDialogForResult = (title, text, hint, inputPlaceholder, onSubmit, onCancel, pattern = \".*\") => ({\n    type: ActionType.START_DIALOG_FOR_RESULT,\n    title,\n    text,\n    hint,\n    inputPlaceholder,\n    onSubmit,\n    onCancel,\n    pattern\n});\n\nconst closeDialog = () => ({\n   type: ActionType.CLOSE_DIALOG\n});\n\nexport const cancelDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeDialog());\n};\n\nexport const submitDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeDialog());\n};","export const VertexAction = Object.freeze({\n    SELECT: 0,\n    UNSELECT: 1,\n    ENTER: 2,\n    EXIT: 3,\n});\n\nexport const EdgeAction = Object.freeze({\n    WALK: 0,\n    HIGHLIGHT: 1\n});\n\nexport const AlgorithmActionType = Object.freeze({\n    VERTEX_ACTION: 0,\n    EDGE_ACTION: 1\n});\n\nexport const PreCallAction = Object.freeze({\n    NOTHING: 0,\n    SELECT_VERTEX: 1,\n    SELECT_EDGE: 2\n});","import { algorithmStep, changeGraphMode, closeMessage, showMessage } from \"./index\";\nimport { GraphMode } from \"../components/Graph/Graph\";\nimport { PreCallAction } from \"../algorithms/graph\";\nimport { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    PRE_CALL: 'PRE_CALL',\n    CALL: 'CALL',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    POP_TRACE_STEP: 'POP_TRACE_STEP',\n    SET_ALGORITHM: 'SET_ALGORITHM',\n    SET_SPEED: 'SET_SPEED',\n    SET_IS_ONE_STEP: 'SET_IS_ONE_STEP',\n    CLEAR_TRACE: 'CLEAR_TRACE'\n});\n\nexport const preCall = (isOneStep = false) => (dispatch, getState) => {\n    dispatch(setIsOneStep(isOneStep));\n\n    const preCall = getState().algorithmReducer.algorithm.preCall;\n    if (preCall === PreCallAction.SELECT_VERTEX) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX));\n        dispatch(showMessage(\"Выберите вершину\"));\n    } else if (preCall === PreCallAction.SELECT_EDGE) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE));\n        dispatch(showMessage(\"Выберите ребро\"));\n    } else if (preCall === PreCallAction.NOTHING) {\n        dispatch(call());\n    }\n};\n\nexport const setSpeed = (speed) => ({\n    type: ActionType.SET_SPEED,\n    speed\n});\n\nexport const setAlgorithm = (algorithm) => ({\n    type: ActionType.SET_ALGORITHM,\n    algorithm\n});\n\nconst setIsOneStep = (isOneStep) => ({\n    type: ActionType.SET_IS_ONE_STEP,\n    isOneStep\n});\n\nexport const call = (vertex, edge) => (dispatch, getState) => {\n    dispatch(closeMessage());\n    dispatch(changeGraphMode(GraphMode.DEFAULT));\n    const graph = getState().graphReducer.graph;\n    dispatch(callConnector(graph, vertex, edge));\n\n    const isOneStep = getState().algorithmReducer.isOneStep;\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nexport const continueCall = (isOneStep = false) => (dispatch) => {\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nconst start = () => ({\n    type: ActionType.START\n});\n\nexport const pause = () => ({\n    type: ActionType.PAUSE\n});\n\nconst callConnector = (graph, vertex, edge) => ({\n    type: ActionType.CALL,\n    graph,\n    vertex,\n    edge\n});\n\nlet currentVisualizationId = 0; // To prevent several visualization 'threads'\n\nconst callSuccess = (isOneStep = false) => async (dispatch, getState) => {\n    if (isOneStep) {\n        if (getState().algorithmReducer.trace.length > 0) {\n            dispatch(algorithmStep(getState().algorithmReducer.trace[0]));\n            dispatch(popTraceStep());\n        }\n        return;\n    }\n\n    const visualizationId = ++currentVisualizationId;\n    while ((getState().algorithmReducer.trace.length > 0) && getState().algorithmReducer.isActive) {\n        dispatch(algorithmStep(getState().algorithmReducer.trace[0]));\n        dispatch(popTraceStep());\n        if (getState().algorithmReducer.trace.length > 0) {\n            await sleep(getState().algorithmReducer.speed);\n            if (currentVisualizationId !== visualizationId)\n                return;\n        }\n    }\n    if (getState().algorithmReducer.isActive) {\n        dispatch(pause());\n    }\n};\n\nconst popTraceStep = () => ({\n    type: ActionType.POP_TRACE_STEP\n});\n\nexport const clearTrace = () => ({\n    type: ActionType.CLEAR_TRACE\n});","import { Arrow, Group, Line } from \"react-konva\";\nimport React from \"react\";\nimport { EdgeLabel, getEdgePointsForType } from \"../Edge/Edge\";\n\nexport const VisualizationEdgeComponent = ({ edge, edgeType }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Graph.module.scss\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Vertex, VertexComponent } from \"./Vertex/Vertex\";\nimport { Edge, EdgeComponent, EdgeType } from \"./Edge/Edge\";\nimport { connect } from \"react-redux\";\nimport {\n    addEdge,\n    addVertex,\n    removeEdge,\n    removeVertex,\n    selectVertex,\n    unselectVertex,\n    updateVertexPosition\n} from \"../../actions\";\nimport { startDialogForResult } from \"../../actions/dialog\";\nimport { call } from \"../../actions/algorithm\";\nimport { VisualizationEdgeComponent } from \"./VisualizationEdge/VisualizationEdge\";\n\nconst cx = classnames.bind(styles);\n\nconst vertexRadius = 20;\n\nconst mapStateToProps = state => ({\n    graph: state.graphReducer.graph,\n    graphMode: state.graphReducer.graphMode,\n    selectedVertex: state.graphReducer.selectedVertex\n});\n\nexport const GraphMode = Object.freeze({\n    DEFAULT: 0,\n    ADD_VERTEX: 1,\n    ADD_EDGE: 2,\n    REMOVE_VERTEX_OR_EDGE: 3,\n    ALGORITHM_PRE_CALL_SELECT_VERTEX: 4,\n    ALGORITHM_PRE_CALL_SELECT_EDGE: 5\n});\n\nexport class Graph {\n    constructor(oriented) {\n        this._vertices = [];\n        this._edges = [];\n        this._visualizationEdges = [];\n        this._oriented = oriented;\n        this._currentName = 0;\n    }\n\n    addVertex(x, y, radius) {\n        const vertex = new Vertex(x, y, radius, this._currentName++);\n        this._vertices.push(vertex);\n        return vertex;\n    }\n\n    removeVertex(vertex) {\n        const index = this._vertices.findIndex(v => v === vertex);\n        if (index !== -1) {\n            this._vertices.splice(index, 1);\n            this._edges = this._edges.filter(edge => (edge.from.name !== vertex.name) && (edge.to.name !== vertex.name));\n        }\n    }\n\n    findEdge(vertexFrom, vertexTo) {\n        if (this._oriented)\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addEdge(vertexFrom, vertexTo, weight) {\n        const i = this.findEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, this._oriented, weight);\n            this._edges.push(edge);\n            return edge;\n        }\n        else {\n            this._edges[i].weight = weight;\n        }\n    }\n\n    removeEdge(edge) {\n        this._edges = this._edges.filter(e => e !== edge);\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n        if (this._oriented)\n            this._edges.forEach(edge => edge.invertOrientation());\n        else {\n            const newEdges = [];\n            this._edges.forEach(edge => {\n                if (newEdges.findIndex(e => (e.from === edge.from) && (e.to === edge.to)\n                    || (e.to === edge.from) && (e.from === edge.to)) === -1) {\n\n                    edge.invertOrientation();\n                    newEdges.push(edge);\n                }\n            });\n            this._edges = newEdges;\n        }\n    }\n\n    findVisualizationEdge(vertexFrom, vertexTo) {\n        return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n    }\n\n    addVisualizationEdge(vertexFrom, vertexTo, oriented, weight) {\n        const i = this.findVisualizationEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, oriented, weight);\n            this._visualizationEdges.push(edge);\n            return edge;\n        }\n        else {\n            this._visualizationEdges[i].weight = weight;\n            return this._visualizationEdges[i];\n        }\n    }\n\n    removeVisualizationEdge(edge) {\n        this._visualizationEdges = this._visualizationEdges.filter(e => e !== edge);\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    get visualizationEdges() {\n        return this._visualizationEdges;\n    }\n\n    set visualizationEdges(edges) {\n        this._visualizationEdges = edges;\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n}\n\nclass GraphComponent extends React.Component {\n    state = {\n        draggedVertex: undefined,\n        windowWidth: 700,\n        windowHeight: 700\n    };\n\n    componentDidMount() {\n        const handleResize = () => {\n            this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n        };\n        window.onresize = handleResize;\n        handleResize();\n    }\n\n    findIndexOfVertex = (vertex) => {\n        return this.props.graph.vertices.findIndex(v => v === vertex);\n    };\n\n    handleVertexDragStart = (e, vertex) => {\n        const i = this.findIndexOfVertex(vertex);\n        this.setState({ draggedVertex: (i !== -1 ? i : undefined) });\n    };\n\n    updateDraggedVertex = (x, y) => {\n        const vertex = this.state.draggedVertex;\n        if (vertex !== undefined)\n            this.props.updateVertexPosition(vertex, x, y);\n    };\n\n    handleVertexDragMove = e => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n    };\n\n    handleVertexDragEnd = (e, vertex) => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n        this.setState({ draggedVertex: undefined });\n    };\n\n    getEdgeType = edge => {\n        const vertexFrom = edge.from, vertexTo = edge.to;\n\n        if (vertexTo === vertexFrom)\n            return EdgeType.LOOP;\n        else if (!edge.isOriented())\n            return EdgeType.NOT_ORIENTED;\n        else if ((this.props.graph.edges.findIndex(e => (e.from === vertexTo) && (e.to === vertexFrom)) !== -1)\n                && (this.props.graph.edges.findIndex(e => (e.to === vertexTo) && (e.from === vertexFrom)) !== -1))\n            return EdgeType.TWO_SIDE_ORIENTED;\n        else\n            return EdgeType.ONE_SIDE_ORIENTED;\n    };\n\n    handleCanvasClick = e => {\n        const x = e.evt.clientX, y = e.evt.clientY;\n\n        if (this.props.graphMode === GraphMode.ADD_VERTEX)\n            this.props.addVertex(x, y, vertexRadius);\n        else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            if (this.props.selectedVertex !== undefined) {\n                this.props.unselectVertex();\n            }\n        }\n    };\n\n    handleVertexClick = (e, vertex) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeVertex(vertex);\n        } else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            e.cancelBubble = true;\n\n            if (this.props.selectedVertex === undefined) {\n                this.props.selectVertex(vertex);\n            }\n            else {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    \"\",\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        this.props.addEdge(this.props.selectedVertex, vertex, value);\n                        this.props.unselectVertex();\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX) {\n            e.cancelBubble = true;\n\n            this.props.callAlgorithm(vertex, null);\n        }\n    };\n\n    handleEdgeClick = (e, edge) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeEdge(edge);\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE) {\n            e.cancelBubble = true;\n            this.props.callAlgorithm(null, edge);\n        }\n    };\n\n    render() {\n        return (\n            <Stage onClick={this.handleCanvasClick} width={this.state.windowWidth} height={this.state.windowHeight}>\n                <Layer>\n                    <Rect fill={'white'} x={0} y={0} width={this.state.windowWidth} height={this.state.windowHeight}/>\n                    {\n                        this.props.graph.edges.map((edge, index) =>\n                            <EdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}\n                                onClick={(e) => this.handleEdgeClick(e, edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.visualizationEdges.map((edge, index) =>\n                            <VisualizationEdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.vertices.map((vertex, index) =>\n                            <VertexComponent\n                                key={index}\n                                vertex={vertex}\n                                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                                onClick={(e) => this.handleVertexClick(e, vertex)}\n                                onDragStart={e => this.handleVertexDragStart(e, vertex)}\n                                onDragEnd={e => this.handleVertexDragEnd(e, vertex)}\n                                onDragMove={e => this.handleVertexDragMove(e, vertex)}/>\n                        )\n                    }\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    addVertex: (x, y, radius) => dispatch(addVertex(x, y, radius)),\n    addEdge: (vertexFrom, vertexTo, radius) => dispatch(addEdge(vertexFrom, vertexTo, radius)),\n    removeVertex: (vertex) => dispatch(removeVertex(vertex)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    updateVertexPosition: (vertexIndex, x, y) => dispatch(updateVertexPosition(vertexIndex, x, y)),\n    selectVertex: (vertex) => dispatch(selectVertex(vertex)),\n    unselectVertex: (vertex) => dispatch(unselectVertex(vertex)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern)),\n    callAlgorithm: (vertex, edge) => dispatch(call(vertex, edge))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Buttons.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const ButtonComponent = ({ text, type = \"button\", onClick, activated, className }) => {\n    return (\n        <button type={type} className={cx(\"button\", className, {[`activated`]: activated})} onClick={onClick}>\n            {text}\n        </button>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Sliders.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const SliderComponent = ({ label, value, min, max, onChange }) => {\n    return (\n        <div className={cx(\"slider-wrapper\")}>\n            <div className={cx(\"slider-label\")}>{label}</div>\n            <input\n                type={\"range\"}\n                className={cx(\"slider\")}\n                value={value}\n                min={min}\n                max={max}\n                onChange={onChange}/>\n        </div>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./DropDownLists.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const DropDownList = ({ items, onChange }) => {\n    return (\n        <select className={cx(\"drop-down-list\")} onChange={onChange}>\n            {items.map((item, index) => <option key={index} value={index}>{item}</option>)}\n        </select>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./ToggleSwitches.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const RoundedToggleSwitch = ({ text, onChange, className, isChecked }) => {\n    return (\n        <div className={cx(\"switch-round-wrapper\", className)}>\n            <label className={cx(\"switch-round\")}>\n                <input type={\"checkbox\"} onChange={onChange} defaultChecked={isChecked}/>\n                <span className={cx(\"slider\")}></span>\n            </label>\n            <span className={cx(\"text\")}>{text}</span>\n        </div>\n    );\n};","export const edgesListToAdjacencyList = (vertices, edges) => {\n    const adjacencyList = {};\n    vertices.forEach(vertex => adjacencyList[vertex.name] = []);\n    edges.forEach(edge => {\n        adjacencyList[edge.from.name].push(edge.to.name);\n        if (!edge.isOriented() && (edge.from !== edge.to))\n            adjacencyList[edge.to.name].push(edge.from.name);\n    });\n    for (let [, verticesList] of Object.entries(adjacencyList))\n        verticesList = verticesList.sort((a, b) => a - b);\n    return adjacencyList;\n};","import { AlgorithmActionType, EdgeAction, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    adjacencyList[vertex].forEach(to => {\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList);\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nexport default {\n    name: \"Поиск в глубину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        trace = [];\n        dfs(start.name, adjacencyList);\n        return trace;\n    }\n};","export class Queue {\n    constructor() {\n        this._queue = [];\n    }\n\n    get length() {\n        return this._queue.length;\n    }\n\n    isEmpty() {\n        return this._queue.length === 0;\n    }\n\n    push(value) {\n        this._queue.push(value);\n    }\n\n    pop() {\n        // TODO: O(N) -> O(1)\n        return this._queue.shift();\n    }\n\n    peek() {\n        return this._queue[0];\n    }\n}","import { AlgorithmActionType, EdgeAction, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(to => {\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Поиск в ширину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n        bfs(start.name, adjacencyList, used, trace);\n        return trace;\n    }\n};","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Menu.module.scss\";\nimport Draggable from 'react-draggable';\nimport { ButtonComponent } from \"../Buttons/Buttons\";\nimport { SliderComponent } from \"../Sliders/Sliders\";\nimport { DropDownList } from \"../DropDownLists/DropDownLists\";\nimport { changeGraphMode, cleanGraphSelections, closeMessage, invertOrientation, showMessage } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { GraphMode } from \"../Graph/Graph\";\nimport { RoundedToggleSwitch } from \"../ToggleSwitches/ToggleSwitches\";\nimport { call, clearTrace, continueCall, pause, preCall, setAlgorithm, setSpeed } from \"../../actions/algorithm\";\nimport DFS from \"../../algorithms/graph/dfs\"\nimport BFS from \"../../algorithms/graph/bfs\"\n\nconst cx = classnames.bind(styles);\n\nconst minAlgorithmSpeed = 0;\nconst maxAlgorithmSpeed = 1000;\n\nconst mapStateToProps = state => ({\n    graphMode: state.graphReducer.graphMode,\n    isOriented: state.graphReducer.graph.isOriented(),\n    isVisualizationActive: state.algorithmReducer.isActive,\n    visualizationSpeed: state.algorithmReducer.speed,\n    selectedAlgorithm: state.algorithmReducer.algorithm,\n    remainingAlgorithmSteps: state.algorithmReducer.trace.length\n});\n\nclass MenuComponent extends React.Component {\n    state = {\n        algorithms: [DFS, BFS],\n        algorithmPaused: false\n    };\n\n    componentDidMount() {\n        this.props.setAlgorithm(this.state.algorithms[0]);\n        this.props.setSpeed((minAlgorithmSpeed + maxAlgorithmSpeed) / 2);\n    }\n\n    handleAlgorithmChange = e => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n\n        this.props.setAlgorithm(this.state.algorithms[e.target.value]);\n    };\n\n    startVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.cleanGraphSelections();\n            this.props.preCall();\n        } else if (this.props.isVisualizationActive) {\n            this.props.pause();\n            this.setState({ algorithmPaused: true });\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue();\n        }\n    };\n\n    stepVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.props.cleanGraphSelections();\n            this.props.preCall(true);\n        } else {\n            this.setState({ algorithmPaused: false });\n            this.props.continue(true);\n        }\n    };\n\n    stopVisualization = () => {\n        this.clearVisualization();\n        this.props.closeMessage();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n    };\n\n    handleAlgorithmSpeedChange = e => {\n        this.props.setSpeed(maxAlgorithmSpeed - e.target.value);\n    };\n\n    askForAction = (message, graphMode) => {\n        this.clearVisualization();\n\n        this.props.showMessage(message);\n        this.props.changeGraphMode(graphMode);\n    };\n\n    closeMessage = () => {\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n    };\n\n    invertOrientation = () => {\n        this.clearVisualization();\n\n        this.props.invertOrientation();\n    };\n\n    clearVisualization = () => {\n        this.props.pause();\n        this.setState({ algorithmPaused: false });\n        this.props.cleanGraphSelections();\n        this.props.clearTrace();\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"} cancel={[\"button\", \"input\", \"select\"]}>\n                <div className={cx(\"menu\")}>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"graph-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Режим просмотра\"} // TODO: Find proper name\n                                onClick={() => this.closeMessage()}\n                                activated={this.props.graphMode === GraphMode.DEFAULT}/>\n                            <ButtonComponent\n                                text={\"Добавить вершину\"}\n                                onClick={() => this.askForAction(\"Выберите точку для добавления вершины\", GraphMode.ADD_VERTEX)}\n                                activated={this.props.graphMode === GraphMode.ADD_VERTEX}/>\n                            <ButtonComponent\n                                text={\"Добавить ребро\"}\n                                onClick={() => this.askForAction(\"Выберите вершины, которые нужно соединить ребром\", GraphMode.ADD_EDGE)}\n                                activated={this.props.graphMode === GraphMode.ADD_EDGE}/>\n                            <ButtonComponent\n                                text={\"Удалить вершину/ребро\"}\n                                onClick={() => this.askForAction(\"Выберите объект для удаления\", GraphMode.REMOVE_VERTEX_OR_EDGE)}\n                                activated={this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE}/>\n                        </div>\n                        <RoundedToggleSwitch\n                            className={cx(\"switch\")}\n                            text={\"Ориентированный?\"}\n                            onChange={() => this.invertOrientation()}\n                            isChecked={this.props.isOriented}/>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"algorithms-list\")}>\n                            <DropDownList\n                                items={this.state.algorithms.map(a => a.name)}\n                                onChange={this.handleAlgorithmChange}/>\n                        </div>\n                        <div className={cx(\"slider\")}>\n                            <SliderComponent\n                                label={\"Скорость анимации\"}\n                                value={maxAlgorithmSpeed - this.props.visualizationSpeed}\n                                min={minAlgorithmSpeed}\n                                max={maxAlgorithmSpeed}\n                                onChange={this.handleAlgorithmSpeedChange}/>\n                        </div>\n                        <div className={cx(\"visualization-control-buttons\")}>\n                            <ButtonComponent\n                                text={this.state.algorithmPaused ? \"Далее\" : (this.props.isVisualizationActive ? \"Пауза\" : \"Старт\")}\n                                onClick={this.startVisualization}/>\n                            <ButtonComponent text={\"Шаг\"} onClick={this.stepVisualization}/>\n                            <ButtonComponent text={\"Стоп\"} onClick={this.stopVisualization}/>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeGraphMode: (graphMode) => dispatch(changeGraphMode(graphMode)),\n    showMessage: (message) => dispatch(showMessage(message)),\n    closeMessage: () => dispatch(closeMessage()),\n    invertOrientation: () => dispatch(invertOrientation()),\n    setAlgorithm: (algorithm) => dispatch(setAlgorithm(algorithm)),\n    setSpeed: (speed) => dispatch(setSpeed(speed)),\n    preCall: (isOneStep) => dispatch(preCall(isOneStep)),\n    call: () => dispatch(call()),\n    pause: () => dispatch(pause()),\n    continue: (isOneStep) => dispatch(continueCall(isOneStep)),\n    cleanGraphSelections: () => dispatch(cleanGraphSelections()),\n    clearTrace: () => dispatch(clearTrace())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MessageBox.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message\n});\n\nconst MessageBox = ({ message }) => {\n    return (\n        <div className={cx(\"message-box\", {[`invisible`]: message === undefined})}>\n            {message}\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(MessageBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./TextInputs.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const TextInputComponent = ({ value, placeholder, onChange, pattern, className, autoFocus = false }) => {\n    return (\n        <input\n            className={cx(\"text-input\", className)}\n            type=\"text\"\n            pattern={pattern}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}\n            autoFocus={autoFocus}/>\n    );\n};","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InputDialog.module.scss\";\nimport { cancelDialog, submitDialog } from \"../../../actions/dialog\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { TextInputComponent } from \"../../TextInputs/TextInputs\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nclass InputDialog extends React.Component {\n    state = {\n        value: \"\"\n    };\n\n    handleChange = (e) => {\n        if (e.target.validity.valid)\n            this.setState({ value: e.target.value });\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n        this.setState({ value: \"\" });\n        this.props.submitDialog(this.props.onSubmit, this.state.value);\n    };\n\n    cancel = () => {\n        this.setState({ value: \"\" });\n        this.props.cancelDialog(this.props.onCancel);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => {\n                    this.setState({ value: \"\" });\n                    this.props.cancelDialog(this.props.onCancel);\n                }}\n                ariaHideApp={false}\n                className={cx(\"input-dialog\")}\n                style={customStyles}>\n\n                <h2>{this.props.title}</h2>\n                <div>{this.props.text}</div>\n                <form onSubmit={(e) => this.submit(e)}>\n                    <TextInputComponent\n                        autoFocus={true}\n                        className={cx(\"text-input\")}\n                        placeholder={this.props.inputPlaceholder}\n                        pattern={this.props.pattern}\n                        onChange={this.handleChange}\n                        value={this.state.value}/>\n\n                    <ButtonComponent\n                        type={\"submit\"}\n                        className={cx(\"button\")}\n                        text={\"Ок\"}\n                        onClick={(e) => this.submit(e)}/>\n                    <ButtonComponent\n                        className={cx(\"button\")}\n                        text={\"Отмена\"}\n                        onClick={() => this.cancel()}/>\n                </form>\n\n                <div className={cx(\"hint\")}>{this.props.hint}</div>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelDialog(onCancel))\n});\n\nexport default connect(null, mapDispatchToProps)(InputDialog);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InfoBox.module.scss\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message\n});\n\nconst InfoBox = ({ lines }) => {\n    return (\n        <div className={cx(\"info-box\", {[`invisible`]: !(Array.isArray(lines) && lines.length)})}>\n            {lines.map((line, index) => <div className={cx(\"text\")} key={index}>{line}</div>)}\n        </div>\n    );\n};\n\nInfoBox.propTypes = {\n    lines: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.symbol,\n        PropTypes.bool\n    ]))\n};\n\nexport default connect(mapStateToProps)(InfoBox);","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./App.module.scss\";\nimport PlainGraph from \"./PlainGraph/PlainGraph\";\nimport GraphComponent from \"./Graph/Graph\";\nimport MenuComponent from \"./Menu/Menu\";\nimport MessageBox from \"./MessageBox/MessageBox\";\nimport InputDialog from \"./Dialogs/InputDialog/InputDialog\";\nimport { connect } from \"react-redux\";\nimport InfoBox from \"./InfoBox/InfoBox\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    inputDialogProps: state.dialogReducer,\n});\n\nconst App = ({ inputDialogProps }) => (\n    <div className={cx(\"app\")}>\n        <MenuComponent/>\n        <GraphComponent/>\n        <MessageBox/>\n        <InfoBox lines={[\"1: abc\", \"2: dbe\", \"3: aavavava\", \"4: 5\"]}/>\n        <InputDialog\n            isOpen={inputDialogProps.isOpen}\n            title={inputDialogProps.title}\n            text={inputDialogProps.text}\n            hint={inputDialogProps.hint}\n            inputPlaceholder={inputDialogProps.inputPlaceholder}\n            pattern={inputDialogProps.pattern}\n            onSubmit={inputDialogProps.onSubmit}\n            onCancel={inputDialogProps.onCancel}/>\n    </div>\n);\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionType } from \"../actions/dialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false,\n    title: \"\",\n    text: \"\",\n    hint: \"\",\n    inputPlaceholder: \"\",\n    onSubmit: null,\n    onClose: null,\n    pattern: \".*\"\n};\n\nconst dialog = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.START_DIALOG_FOR_RESULT:\n            newState = {\n                ...state,\n                isOpen: true,\n                title: action.title,\n                text: action.text,\n                hint: action.hint,\n                inputPlaceholder: action.inputPlaceholder,\n                pattern: action.pattern\n            };\n\n            newState.onSubmit = (value) => {\n                const onSubmit = action.onSubmit;\n                if (onSubmit)\n                    onSubmit(value);\n            };\n            newState.onCancel = () => {\n                const onCancel = action.onCancel;\n                if (onCancel)\n                    onCancel();\n            };\n\n            return newState;\n        case ActionType.CLOSE_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default dialog;","import { ActionType } from \"../actions/algorithm\";\nimport React from \"react\";\nimport { PreCallAction } from \"../algorithms/graph/index\";\n\nconst defaultState = {\n    trace: [],\n    isActive: false,\n    algorithm: null,\n    speed: 1000,\n    isOneStep: false\n};\n\nconst algorithm = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.CALL:\n            newState = {\n                ...state\n            };\n\n            const preCall = state.algorithm.preCall;\n            const vertices = action.graph.vertices;\n            const edges = action.graph.edges;\n            let trace = [];\n            if (preCall === PreCallAction.SELECT_VERTEX) {\n                trace = state.algorithm.call(vertices, edges, action.vertex);\n            } else if (preCall === PreCallAction.SELECT_EDGE) {\n                trace = state.algorithm.call(vertices, edges, action.edge);\n            }\n            newState.trace = trace;\n\n            return newState;\n        case ActionType.POP_TRACE_STEP:\n            newState = {\n                ...state,\n                trace: [...state.trace]\n            };\n\n            newState.trace.shift();\n\n            return newState;\n        case ActionType.START:\n            return {\n                ...state,\n                isActive: true\n            };\n        case ActionType.PAUSE:\n            return {\n                ...state,\n                isActive: false\n            };\n        case ActionType.SET_ALGORITHM:\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        case ActionType.SET_SPEED:\n            return {\n                ...state,\n                speed: action.speed\n            };\n        case ActionType.SET_IS_ONE_STEP:\n            return {\n                ...state,\n                isOneStep: action.isOneStep\n            };\n        case ActionType.CLEAR_TRACE:\n            return {\n                ...state,\n                trace: []\n            };\n        default:\n            return state;\n    }\n};\n\nexport default algorithm;","import { Graph, GraphMode } from \"../components/Graph/Graph\";\nimport { ActionType } from \"../actions\";\nimport { VertexState } from \"../components/Graph/Vertex/Vertex\";\nimport { combineReducers } from \"redux\";\nimport dialog from \"./dialog\";\nimport algorithm from \"./algorithm\";\nimport { AlgorithmActionType, EdgeAction, VertexAction } from \"../algorithms/graph\";\nimport { EdgeState } from \"../components/Graph/Edge/Edge\";\n\nconst defaultState = {\n    graph: new Graph(false),\n    message: undefined,\n    graphMode: GraphMode.DEFAULT,\n    selectedVertex: undefined // For 'ADD_EDGE' // TODO: Do 'ADD_EDGE' in a cleaner way\n};\n\nconst clone = object => {\n    return Object.assign( Object.create( Object.getPrototypeOf(object)), object);\n};\n\nconst unselectSelectedVertex = (state) => {\n    if (state.selectedVertex !== undefined) {\n        const i = state.graph.vertices.findIndex(v => v === state.selectedVertex);\n        if (i !== -1)\n            state.graph.vertices[i].state = VertexState.DEFAULT;\n        state.selectedVertex = undefined;\n    }\n};\n\nconst updateVertexByAction = (vertex, action) => {\n    switch (action) {\n        case VertexAction.SELECT:\n            vertex.state = VertexState.HIGHLIGHTED;\n            break;\n        case VertexAction.ENTER:\n            vertex.state = VertexState.PRE_COMPLETED;\n            break;\n        case VertexAction.EXIT:\n            vertex.state = VertexState.COMPLETED;\n            break;\n        default:\n    }\n};\n\nconst updateEdgeByAction = (edge, action) => {\n    switch (action) {\n        case EdgeAction.WALK:\n            edge.state = EdgeState.WALKED;\n            break;\n        case EdgeAction.HIGHLIGHT:\n            edge.state = EdgeState.HIGHLIGHTED;\n            break;\n        default:\n    }\n};\n\nconst cleanGraphSelections = (state) => {\n    state.graph.vertices.forEach(v => v.state = VertexState.DEFAULT);\n    state.graph.edges.forEach(e => e.state = EdgeState.DEFAULT);\n    state.graph.visualizationEdges = [];\n    state.selectedVertex = undefined;\n};\n\nconst reducer = (state = defaultState, action) => {\n    let newState;\n    let i;\n    switch (action.type) {\n        case ActionType.ADD_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addVertex(action.x, action.y, action.radius);\n\n            return newState;\n        case ActionType.ADD_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addEdge(action.vertexFrom, action.vertexTo, action.weight);\n\n            return newState;\n        case ActionType.REMOVE_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeVertex(action.vertex);\n\n            return newState;\n        case ActionType.REMOVE_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeEdge(action.edge);\n\n            return newState;\n        case ActionType.UPDATE_VERTEX_POSITION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.vertices[action.vertexIndex].x = action.x;\n            newState.graph.vertices[action.vertexIndex].y = action.y;\n\n            return newState;\n        case ActionType.CHANGE_GRAPH_MODE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            if (action.graphMode !== newState.graphMode) {\n                newState.graphMode = action.graphMode;\n\n                unselectSelectedVertex(newState);\n            }\n\n            return newState;\n        case ActionType.SELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            i = newState.graph.vertices.findIndex(v => v === action.vertex);\n            if (i !== -1) {\n                newState.graph.vertices[i].state = VertexState.HIGHLIGHTED;\n                newState.selectedVertex = action.vertex;\n            }\n\n            return newState;\n        case ActionType.UNSELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            return newState;\n        case ActionType.SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message\n            };\n        case ActionType.CLOSE_MESSAGE:\n            return {\n                ...state,\n                message: undefined\n            };\n        case ActionType.INVERT_ORIENTATION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.invertOrientation();\n\n            return newState;\n        case ActionType.ALGORITHM_STEP:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            const step = action.step;\n            if (step.actionType === AlgorithmActionType.VERTEX_ACTION) {\n                const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                if (vertex)\n                    updateVertexByAction(vertex, step.action);\n            } else if (step.actionType === AlgorithmActionType.EDGE_ACTION) {\n                const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                const edge = newState.graph.addVisualizationEdge(vertexFrom, vertexTo, step.oriented, step.weight);\n                updateEdgeByAction(edge, step.action);\n            }\n\n            return newState;\n        case ActionType.CLEAN_GRAPH_SELECTIONS:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            cleanGraphSelections(newState);\n\n            return newState;\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    graphReducer: reducer,\n    dialogReducer: dialog,\n    algorithmReducer: algorithm\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2at_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plain_graph\":\"PlainGraph_plain_graph__132cd\",\"drawing_area\":\"PlainGraph_drawing_area__poiJd\",\"cell\":\"PlainGraph_cell__2tDfs\",\"cell-blocked\":\"PlainGraph_cell-blocked__13I9p\",\"cell-path\":\"PlainGraph_cell-path__1JSUa\",\"cell-start\":\"PlainGraph_cell-start__2FTb6\",\"cell-finish\":\"PlainGraph_cell-finish__2icJo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2xbQm\",\"menu-sub\":\"Menu_menu-sub__2jhA1\",\"graph-control-buttons\":\"Menu_graph-control-buttons__2CY62\",\"switch\":\"Menu_switch__3Y97k\",\"visualization-control-buttons\":\"Menu_visualization-control-buttons__1OTXW\",\"algorithms-list\":\"Menu_algorithms-list__2mwx1\",\"slider\":\"Menu_slider__RA1Ez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__1L6GG\",\"activated\":\"Buttons_activated__EZOmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider-wrapper\":\"Sliders_slider-wrapper__GIw-8\",\"slider-label\":\"Sliders_slider-label__1w08l\",\"slider\":\"Sliders_slider__1gqJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drop-down-list\":\"DropDownLists_drop-down-list__ix94o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch-round-wrapper\":\"ToggleSwitches_switch-round-wrapper__g2bxh\",\"switch-round\":\"ToggleSwitches_switch-round__1bQ1T\",\"slider\":\"ToggleSwitches_slider__Q-bUA\",\"text\":\"ToggleSwitches_text__1sKta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message-box\":\"MessageBox_message-box__2uEgD\",\"invisible\":\"MessageBox_invisible__10Wwp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-dialog\":\"InputDialog_input-dialog__2SLyF\",\"text-input\":\"InputDialog_text-input__2zjdU\",\"button\":\"InputDialog_button__1ZFHJ\",\"hint\":\"InputDialog_hint__1ftkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"TextInputs_text-input__3mPdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info-box\":\"InfoBox_info-box__3t_A2\",\"text\":\"InfoBox_text__sgPCj\",\"invisible\":\"InfoBox_invisible__1un1A\"};"],"sourceRoot":""}