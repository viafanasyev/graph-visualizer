{"version":3,"sources":["algorithms/plain/breadth-first-search.js","components/PlainGraph/PlainGraph.jsx","components/Graph/Vertex/Vertex.jsx","components/Graph/Edge/Edge.jsx","utils/sleep.js","actions/index.js","actions/dialog.js","algorithms/graph/index.js","actions/algorithm.js","components/Graph/Graph.jsx","components/Buttons/Buttons.jsx","components/Sliders/Sliders.jsx","components/DropDownLists/DropDownLists.jsx","components/ToggleSwitches/ToggleSwitches.jsx","utils/graphConverter.js","algorithms/graph/dfs.js","utils/queue.js","algorithms/graph/bfs.js","components/Menu/Menu.jsx","components/MessageBox/MessageBox.jsx","components/TextInputs/TextInputs.jsx","components/Dialogs/InputDialog/InputDialog.jsx","components/App.jsx","serviceWorker.js","reducers/dialog.js","reducers/algorithm.js","reducers/index.js","index.js","components/App.module.scss","components/PlainGraph/PlainGraph.module.scss","components/Menu/Menu.module.scss","components/Buttons/Buttons.module.scss","components/Sliders/Sliders.module.scss","components/DropDownLists/DropDownLists.module.scss","components/ToggleSwitches/ToggleSwitches.module.scss","components/MessageBox/MessageBox.module.scss","components/Dialogs/InputDialog/InputDialog.module.scss","components/TextInputs/TextInputs.module.scss"],"names":["algorithm","cells","cellStart","cellFinish","pathStatus","queue","x","y","parent","current","shift","console","log","next","node","minX","minY","maxX","maxY","res","push","neighbours","length","i","findIndex","n","cx","classnames","bind","styles","CellState","Object","freeze","EMPTY","BLOCKED","START","FINISH","PATH","Cell","status","onMouseEnter","onMouseLeave","className","React","Component","Vertex","radius","name","this","state","VertexState","HIGHLIGHTED","PRE_COMPLETED","COMPLETED","VertexComponent","vertex","draggable","onDragStart","onDragEnd","onDragMove","onClick","e","call","target","getChildren","setAttrs","scaleX","scaleY","shadowColor","shadowBlur","shadowOffset","shadowOpacity","moveToTop","handleDragStart","to","duration","easing","Konva","Easings","EaseOut","shadowOffsetX","shadowOffsetY","handleDragEnd","fill","color","stroke","strokeWidth","vertexBorderWidth","text","fontSize","width","height","align","verticalAlign","Edge","vertexFrom","vertexTo","oriented","weight","_from","_to","EdgeState","NORMAL","_oriented","undefined","ERASED","EdgeComponent","edgeComponent","edge","edgeType","points","getEdgePointsForType","EdgeType","NOT_ORIENTED","linePoints","hitStrokeWidth","tension","isWeighted","labelPoints","EdgeLabel","labelRadius","labelBorderWidth","ONE_SIDE_ORIENTED","TWO_SIDE_ORIENTED","LOOP","from","dx","dy","angle","Math","atan2","vertexFromOffset","vertexToOffset","xFrom","cos","yFrom","sin","xTo","yTo","xMiddle","yMiddle","anchorDx","sqrt","anchorDy","xMiddleFirst","sleep","ms","Promise","resolve","setTimeout","actionName","ADD_VERTEX","ADD_EDGE","REMOVE_VERTEX","REMOVE_EDGE","CHANGE_GRAPH_MODE","SELECT_VERTEX","UNSELECT_VERTEX","SHOW_MESSAGE","CLOSE_MESSAGE","UPDATE_VERTEX_POSITION","INVERT_ORIENTATION","ALGORITHM_STEP","CLEAN_GRAPH_SELECTIONS","changeGraphMode","graphMode","type","currentMessageId","showMessage","message","dispatch","a","messageId","showMessageConnector","closeMessage","START_DIALOG_FOR_RESULT","CLOSE_DIALOG","closeDialog","vertexAction","SELECT","UNSELECT","ENTER","EXIT","algorithmActionType","VERTEX_ACTION","EDGE_ACTION","preCallAction","NOTHING","SELECT_EDGE","PRE_CALL","CALL","PAUSE","POP_TRACE_STEP","SET_ALGORITHM","SET_SPEED","getState","DEFAULT","graph","graphReducer","callConnector","start","callSuccess","pause","currentVisualizationId","visualizationId","algorithmReducer","trace","isActive","step","popTraceStep","speed","REMOVE_VERTEX_OR_EDGE","ALGORITHM_PRE_CALL_SELECT_VERTEX","ALGORITHM_PRE_CALL_SELECT_EDGE","Graph","_vertices","_edges","_currentName","index","v","splice","filter","findEdge","forEach","invertOrientation","newEdges","GraphComponent","draggedVertex","windowWidth","windowHeight","findIndexOfVertex","props","vertices","handleVertexDragStart","setState","updateDraggedVertex","updateVertexPosition","handleVertexDragMove","handleVertexDragEnd","getEdgeType","isOriented","edges","handleCanvasClick","evt","clientX","clientY","addVertex","selectedVertex","unselectVertex","handleVertexClick","cancelBubble","removeVertex","selectVertex","startDialogForResult","value","addEdge","callAlgorithm","handleEdgeClick","removeEdge","handleResize","window","innerWidth","innerHeight","onresize","map","key","connect","vertexIndex","title","hint","inputPlaceholder","onSubmit","onClose","pattern","onCancel","ButtonComponent","activated","SliderComponent","label","min","max","onChange","DropDownList","items","item","RoundedToggleSwitch","isChecked","defaultChecked","edgesListToAdjacencyList","adjacencyList","entries","verticesList","sort","b","used","preCall","dfs","action","actionType","Queue","_queue","isEmpty","pop","bfs","MenuComponent","algorithms","DFS","BFS","algorithmPaused","handleAlgorithmChange","clearVisualization","setAlgorithm","startVisualization","continue","isVisualizationActive","cleanGraphSelections","stepVisualization","stopVisualization","handleAlgorithmSpeedChange","setSpeed","askForAction","grid","bounds","cancel","visualizationSpeed","selectedAlgorithm","TextInputComponent","placeholder","customStyles","overlay","zIndex","InputDialog","handleChange","validity","valid","isOpen","onRequestClose","cancelDialog","ariaHideApp","style","submitDialog","result","inputDialogProps","dialogReducer","Menu","Boolean","location","hostname","match","defaultState","dialog","newState","clone","object","assign","create","getPrototypeOf","unselectSelectedVertex","updateVertexByAction","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.955ae364.chunk.js","sourcesContent":["export const algorithm = {\n    name: \"Breadth First Search\",\n    run: function (cells, cellStart, cellFinish, pathStatus) {\n        let node = { x: cellStart.x, y: cellStart.y, parent: null };\n\n        const queue = [node];\n        while (queue.length) {\n            let current = queue.shift();\n            if ((current.x !== cellStart.x) || (current.y !== cellStart.y))\n                cells[current.y][current.x] = pathStatus;\n            if ((current.x === cellFinish.x) && (current.y === cellFinish.y)) {\n                // const path = backtrace(current);\n                // TODO: something\n                return;\n            }\n            console.log(current);\n            const next = neighbours(current, 0, 0, cells[0].length - 1, cells.length - 1);\n            for (let i = 0; i < next.length; ++i)\n                if ((cells[next[i].y][next[i].x] !== pathStatus) && !((next[i].x === cellStart.x) && (next[i].y === cellStart.y)) && (queue.findIndex(n => (n.x === next[i].x) && (n.y === next[i].y)) === -1))\n                    queue.push(next[i]);\n        }\n    }\n};\n\nfunction backtrace(node) {\n    const path = [{x: node.x, y: node.y}];\n    while (node.parent !== null) {\n        node = node.parent;\n        path.push({x: node.x, y: node.y});\n    }\n    return path;\n}\n\nfunction neighbours(node, minX, minY, maxX, maxY) {\n    const res = [];\n    if (node.x < maxX)\n        res.push({ x: node.x + 1, y: node.y, parent: node });\n    if (node.x > minX)\n        res.push({ x: node.x - 1, y: node.y, parent: node });\n    if (node.y < maxY)\n        res.push({ x: node.x, y: node.y + 1, parent: node });\n    if (node.y > minY)\n        res.push({ x: node.x, y: node.y - 1, parent: node });\n    return res;\n}","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./PlainGraph.module.scss\";\nimport { algorithm } from \"../../algorithms/plain/breadth-first-search\";\n\nconst cx = classnames.bind(styles);\n\nconst CellState = Object.freeze({ EMPTY: 0, BLOCKED: 1, START: 2, FINISH: 3, PATH: 4});\n\nconst Cell = ({x, y, status, onMouseEnter, onMouseLeave}) => (\n    <rect x={x} y={y} className={cx(\"cell\", {\n            [`cell-blocked`]: status === CellState.BLOCKED,\n            [`cell-path`]: status === CellState.PATH,\n            [`cell-start`]: status === CellState.START,\n            [`cell-finish`]: status === CellState.FINISH\n          })}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}/>\n);\n\nclass PlainGraph extends React.Component {\n    state = {\n        cells: [],\n        cellSize: 40,\n        rows: 1000 / 40 + 10,\n        columns: 2000 / 40 + 10,\n        isMouseDown: false,\n        previousMouseRow: -1,\n        previousMouseColumn: -1,\n        mouseCellState: -1\n    };\n\n    componentDidMount() {\n        const cellSize = 40;\n        const rows = 1000 / cellSize + 10;\n        const columns = 2000 / cellSize + 10;\n        const cells = [];\n        // const rows = window.innerHeight / cellSize + 10, columns = window.innerWidth / cellSize + 10; // TODO: change on resize\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < columns; ++j) {\n                row.push(CellState.EMPTY);\n            }\n            cells.push(row);\n        }\n        cells[2][2] = CellState.START;\n        cells[2][40] = CellState.FINISH;\n        this.setState({ cells: cells, cellSize: cellSize, rows: rows, columns: columns});\n    }\n\n    invertCellUnderMouse = (event) => {\n        this.setState(oldState => {\n            const x = Math.floor(event.x / this.state.cellSize);\n            const y = Math.floor(event.y / this.state.cellSize);\n            if ((x === oldState.previousMouseColumn) && (y === oldState.previousMouseRow))\n                return oldState;\n            const state = {...oldState};\n\n            const currentCellState = state.cells[y][x];\n            if (currentCellState === state.mouseCellState) {\n                if ((currentCellState === CellState.EMPTY) || (currentCellState === CellState.PATH))\n                    state.cells[y][x] = CellState.BLOCKED;\n                else if (currentCellState === CellState.BLOCKED)\n                    state.cells[y][x] = CellState.EMPTY;\n            }\n            state.previousMouseRow = y;\n            state.previousMouseColumn = x;\n\n            return state;\n        });\n    };\n\n    handleMouseDown = (event) => {\n        algorithm.run(this.state.cells, {x:2,y:2},{x:40,y:2}, CellState.PATH);\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.setState({\n            isMouseDown: true,\n            mouseCellState: this.state.cells\n                [Math.floor(reducedEvent.y / this.state.cellSize)]\n                [Math.floor(reducedEvent.x / this.state.cellSize)]\n        });\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    handleMouseUp = (event) => {\n        this.invertCellUnderMouse({ x: event.clientX, y: event.clientY });\n        this.setState({ isMouseDown: false, previousMouseRow: -1, previousMouseColumn: -1 });\n    };\n\n    handleCellMouseEnter = (event) => {\n        if (!this.state.isMouseDown)\n            return;\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    render() {\n        return (\n            <div className={cx(\"plain_graph\")}>\n                <svg className={cx(\"drawing_area\")}\n                     onMouseDown={e => this.handleMouseDown(e)}\n                     onMouseUp={e => this.handleMouseUp(e)}>\n                    {this.state.cells.map((row, y) =>\n                        row.map((cell, x) =>\n                            <Cell\n                                x={x * this.state.cellSize}\n                                y={y * this.state.cellSize}\n                                status={cell}\n                                key={this.state.columns * y + x}\n                                onMouseEnter={e => this.handleCellMouseEnter(e)}/>\n                            )\n                        )\n                    }\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default PlainGraph;","import { Circle, Group, Text } from \"react-konva\";\nimport React from \"react\";\nimport Konva from \"konva\";\n\nexport class Vertex {\n    constructor(x, y, radius, name) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.state = VertexState.EMPTY;\n        this.name = name;\n    }\n\n    get color() {\n        switch (this.state) {\n            case VertexState.EMPTY:\n                return 'white';\n            case VertexState.HIGHLIGHTED:\n                return 'yellow';\n            case VertexState.PRE_COMPLETED:\n                return '#CCCCCC';\n            case VertexState.COMPLETED:\n                return '#444444';\n            default:\n                return 'white';\n        }\n    }\n}\n\nconst handleDragStart = (e, call) => {\n    e.target.getChildren()[0].setAttrs({\n        scaleX: 1.1,\n        scaleY: 1.1,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: { x: 10, y: 10 },\n        shadowOpacity: 0.5\n    });\n    e.target.moveToTop();\n\n    call(e);\n};\n\nconst handleDragEnd = (e, call) => {\n    e.target.getChildren()[0].to({\n        duration: 0.25,\n        easing: Konva.Easings.EaseOut,\n        scaleX: 1,\n        scaleY: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0\n    });\n\n    call(e);\n};\n\nexport const VertexComponent = ({ vertex, draggable, onDragStart, onDragEnd, onDragMove, onClick }) => {\n    const labelWidth = 40, labelHeight = 20;\n    return (\n        <Group\n            draggable={draggable}\n            onDragStart={e => handleDragStart(e, onDragStart)}\n            onDragEnd={e => handleDragEnd(e, onDragEnd)}\n            onDragMove={onDragMove}\n            onClick={onClick}\n            x={vertex.x}\n            y={vertex.y}>\n            <Circle\n                x={0}\n                y={0}\n                radius={vertex.radius}\n                fill={vertex.color}\n                stroke={'black'}\n                shadowBlur={0}\n                strokeWidth={vertexBorderWidth}\n                shadowOpacity={0.5}/>\n            <Text\n                text={vertex.name}\n                x={-labelWidth / 2.}\n                y={-labelHeight / 2.}\n                fontSize={20}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>);\n};\n\nexport const vertexBorderWidth = 2;\n\nexport const VertexState = Object.freeze({ EMPTY: 0, HIGHLIGHTED: 1, PRE_COMPLETED: 2, COMPLETED: 3 });","import { vertexBorderWidth } from \"../Vertex/Vertex\";\nimport { Arrow, Circle, Group, Line, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Edge {\n    constructor(vertexFrom, vertexTo, oriented, weight) {\n        this._from = vertexFrom;\n        this._to = vertexTo;\n        this.weight = weight;\n        this.state = EdgeState.NORMAL;\n        this._oriented = oriented;\n    }\n\n    get from() {\n        return this._from;\n    }\n\n    get to() {\n        return this._to;\n    }\n\n    get color() {\n        switch (this.state) {\n            case EdgeState.NORMAL:\n                return 'black';\n            case EdgeState.HIGHLIGHTED:\n                return '#f7ff00';\n            case EdgeState.ERASED:\n                return '#ffffff00';\n            default:\n                return 'black';\n        }\n    }\n\n    isWeighted() {\n        return (this.weight !== undefined) && (this.weight !== null);\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n    }\n}\n\nexport const EdgeComponent = ({ edge, edgeType, onClick }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group onClick={onClick}>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nconst EdgeLabel = ({ x, y, text }) => {\n    const labelRadius = 15;\n    const labelHorizontalPadding = 1, labelVerticalPadding = 5;\n    const labelBorderWidth = 0;\n    return (\n        <Group\n            x={x - labelRadius - labelHorizontalPadding - labelBorderWidth}\n            y={y - labelRadius - labelVerticalPadding - labelBorderWidth}\n            width={labelRadius * 2. + 2. * (labelHorizontalPadding + labelBorderWidth)}\n            height={labelRadius * 2. + 2. * (labelVerticalPadding + labelBorderWidth)}>\n            <Circle\n                x={labelRadius + labelHorizontalPadding + labelBorderWidth}\n                y={labelRadius + labelVerticalPadding + labelBorderWidth}\n                radius={labelRadius}\n                fill={'white'}\n                stroke={'black'}\n                strokeWidth={labelBorderWidth}/>\n            <Text\n                x={labelBorderWidth + labelHorizontalPadding}\n                y={labelBorderWidth + labelVerticalPadding}\n                text={text}\n                fontSize={20}\n                width={labelRadius * 2.}\n                height={labelRadius * 2.}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>\n    );\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });\nexport const EdgeState = Object.freeze({ NORMAL: 0, HIGHLIGHTED: 1, ERASED: 2 });\n\nexport const getEdgePointsForType = (edge, edgeType) => {\n    const vertexFrom = edge.from;\n    const vertexTo = edge.to;\n    const dx = vertexTo.x - vertexFrom.x;\n    const dy = vertexFrom.y - vertexTo.y;\n    const angle = Math.atan2(dy, dx);\n    const vertexFromOffset = vertexFrom.radius + vertexBorderWidth / 2.;\n    const vertexToOffset = vertexTo.radius + vertexBorderWidth / 2.;\n\n    if ((edgeType === EdgeType.ONE_SIDE_ORIENTED) || (edgeType === EdgeType.NOT_ORIENTED)) {\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle);\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xTo, yTo\n            ],\n            labelPoints: [\n                (xFrom + xTo) / 2.,\n                (yFrom + yTo) / 2.\n            ]\n        };\n    } else if (edgeType === EdgeType.TWO_SIDE_ORIENTED) {\n        const angleOffset = 0.25;\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle + angleOffset);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle + angleOffset);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle - angleOffset);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle - angleOffset);\n\n        const middlePointHeightCoefficient = 1. / 15.;\n        const xMiddle = (xFrom + xTo) / 2. - (yFrom - yTo) * middlePointHeightCoefficient;\n        const yMiddle = (yFrom + yTo) / 2. + (xFrom - xTo) * middlePointHeightCoefficient;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddle, yMiddle,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle,\n                yMiddle\n            ]\n        };\n    } else if (edgeType === EdgeType.LOOP) {\n        const xFrom = vertexFrom.x - vertexFromOffset;\n        const yFrom = vertexFrom.y;\n        const xTo = vertexFrom.x - vertexFromOffset;\n        const yTo = vertexFrom.y;\n\n        const anchorDx = 3. * vertexFromOffset / Math.sqrt(2.);\n        const anchorDy = 1.5 * vertexFromOffset / Math.sqrt(2.);\n        const xMiddleFirst = xFrom - anchorDx;\n        const yMiddleFirst = yFrom - anchorDy;\n        const xMiddle = xMiddleFirst - vertexFromOffset;\n        const yMiddle = yFrom;\n        const xMiddleSecond = xTo - anchorDx;\n        const yMiddleSecond = yTo + anchorDy;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddleFirst, yMiddleFirst,\n                xMiddle, yMiddle,\n                xMiddleSecond, yMiddleSecond,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle, yMiddle\n            ]\n        };\n    }\n};","export function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { sleep } from \"../utils/sleep\";\n\nexport const actionName = Object.freeze({\n    ADD_VERTEX: 'ADD_VERTEX',\n    ADD_EDGE: 'ADD_EDGE',\n    REMOVE_VERTEX: 'REMOVE_VERTEX',\n    REMOVE_EDGE: 'REMOVE_EDGE',\n    CHANGE_GRAPH_MODE: 'CHANGE_GRAPH_MODE',\n    SELECT_VERTEX: 'SELECT_VERTEX',\n    UNSELECT_VERTEX: 'UNSELECT_VERTEX',\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    CLOSE_MESSAGE: 'CLOSE_MESSAGE',\n    UPDATE_VERTEX_POSITION: 'UPDATE_VERTEX_POSITION',\n    INVERT_ORIENTATION: 'INVERT_ORIENTATION',\n    ALGORITHM_STEP: 'ALGORITHM_STEP',\n    CLEAN_GRAPH_SELECTIONS: 'CLEAN_GRAPH_SELECTIONS'\n});\n\nexport const addVertex = (x, y, radius) => ({\n    type: actionName.ADD_VERTEX,\n    x,\n    y,\n    radius\n});\n\nexport const addEdge = (vertexFrom, vertexTo, weight) => ({\n    type: actionName.ADD_EDGE,\n    vertexFrom,\n    vertexTo,\n    weight\n});\n\nexport const removeVertex = (vertex) => ({\n    type: actionName.REMOVE_VERTEX,\n    vertex\n});\n\nexport const removeEdge = (edge) => ({\n    type: actionName.REMOVE_EDGE,\n    edge\n});\n\nexport const changeGraphMode = (graphMode) => ({\n    type: actionName.CHANGE_GRAPH_MODE,\n    graphMode\n});\n\nexport const selectVertex = (vertex) => ({\n   type: actionName.SELECT_VERTEX,\n   vertex\n});\n\nexport const unselectVertex = (vertex) => ({\n   type: actionName.UNSELECT_VERTEX,\n   vertex\n});\n\nlet currentMessageId = 0;\n\nexport const showMessage = (message) => async (dispatch) => {\n    const messageId = ++currentMessageId;\n    dispatch(showMessageConnector(message));\n    await sleep(2000);\n    if (messageId === currentMessageId)\n        dispatch(closeMessage());\n};\n\nconst showMessageConnector = (message) => ({\n    type: actionName.SHOW_MESSAGE,\n    message\n});\n\nexport const closeMessage = () => ({\n    type: actionName.CLOSE_MESSAGE\n});\n\nexport const updateVertexPosition = (vertexIndex, x, y) => ({\n    type: actionName.UPDATE_VERTEX_POSITION,\n    vertexIndex,\n    x,\n    y\n});\n\nexport const invertOrientation = () => ({\n   type: actionName.INVERT_ORIENTATION\n});\n\nexport const algorithmStep = (step) => ({\n   type: actionName.ALGORITHM_STEP,\n   step\n});\n\nexport const cleanGraphSelections = () => ({\n   type: actionName.CLEAN_GRAPH_SELECTIONS\n});","export const actionName = Object.freeze({\n    START_DIALOG_FOR_RESULT: 'START_DIALOG_FOR_RESULT',\n    CLOSE_DIALOG: 'CLOSE_DIALOG'\n});\n\nexport const startDialogForResult = (title, text, hint, inputPlaceholder, onSubmit, onCancel, pattern = \".*\") => ({\n    type: actionName.START_DIALOG_FOR_RESULT,\n    title,\n    text,\n    hint,\n    inputPlaceholder,\n    onSubmit,\n    onCancel,\n    pattern\n});\n\nconst closeDialog = () => ({\n   type: actionName.CLOSE_DIALOG\n});\n\nexport const cancelDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeDialog());\n};\n\nexport const submitDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeDialog());\n};","export const vertexAction = Object.freeze({\n    SELECT: 0,\n    UNSELECT: 1,\n    ENTER: 2,\n    EXIT: 3,\n});\n\nexport const algorithmActionType = Object.freeze({\n    VERTEX_ACTION: 0,\n    EDGE_ACTION: 1\n});\n\nexport const preCallAction = Object.freeze({\n    NOTHING: 0,\n    SELECT_VERTEX: 1,\n    SELECT_EDGE: 2\n});","import { changeGraphMode, showMessage, algorithmStep, closeMessage } from \"./index\";\nimport { graphMode } from \"../components/Graph/Graph\";\nimport { preCallAction } from \"../algorithms/graph\";\nimport { sleep } from \"../utils/sleep\";\n\nexport const actionName = Object.freeze({\n    PRE_CALL: 'PRE_CALL',\n    CALL: 'CALL',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    POP_TRACE_STEP: 'POP_TRACE_STEP',\n    SET_ALGORITHM: 'SET_ALGORITHM',\n    SET_SPEED: 'SET_SPEED'\n});\n\nexport const preCall = () => (dispatch, getState) => {\n    const preCall = getState().algorithmReducer.algorithm.preCall;\n\n    if (preCall === preCallAction.SELECT_VERTEX) {\n        dispatch(changeGraphMode(graphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX));\n        dispatch(showMessage(\"Выберите вершину\"));\n    } else if (preCall === preCallAction.SELECT_EDGE) {\n        dispatch(changeGraphMode(graphMode.ALGORITHM_PRE_CALL_SELECT_EDGE));\n        dispatch(showMessage(\"Выберите ребро\"));\n    } else if (preCall === preCallAction.NOTHING) {\n        dispatch(call());\n    }\n};\n\nexport const setSpeed = (speed) => ({\n    type: actionName.SET_SPEED,\n    speed\n});\n\nexport const setAlgorithm = (algorithm) => ({\n    type: actionName.SET_ALGORITHM,\n    algorithm\n});\n\nexport const call = (vertex, edge) => (dispatch, getState) => {\n    dispatch(closeMessage());\n    dispatch(changeGraphMode(graphMode.DEFAULT));\n    const graph = getState().graphReducer.graph;\n    dispatch(callConnector(graph, vertex, edge));\n    dispatch(start());\n    dispatch(callSuccess());\n};\n\nexport const continueCall = () => (dispatch) => {\n    dispatch(start());\n    dispatch(callSuccess());\n};\n\nconst start = () => ({\n    type: actionName.START\n});\n\nexport const pause = () => ({\n    type: actionName.PAUSE\n});\n\nconst callConnector = (graph, vertex, edge) => ({\n    type: actionName.CALL,\n    graph,\n    vertex,\n    edge\n});\n\nlet currentVisualizationId = 0; // To prevent several visualization 'threads'\n\nconst callSuccess = () => async (dispatch, getState) => {\n    const visualizationId = ++currentVisualizationId;\n    while ((getState().algorithmReducer.trace.length > 0) && getState().algorithmReducer.isActive) {\n        dispatch(algorithmStep(getState().algorithmReducer.trace[0]));\n        dispatch(popTraceStep());\n        if (getState().algorithmReducer.trace.length > 0) {\n            await sleep(getState().algorithmReducer.speed);\n            if (currentVisualizationId !== visualizationId)\n                return;\n        }\n    }\n    if (getState().algorithmReducer.isActive) {\n        dispatch(pause());\n    }\n};\n\nconst popTraceStep = () => ({\n    type: actionName.POP_TRACE_STEP\n});","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Graph.module.scss\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Vertex, VertexComponent } from \"./Vertex/Vertex\";\nimport { Edge, EdgeComponent, EdgeType } from \"./Edge/Edge\";\nimport { connect } from \"react-redux\";\nimport {\n    addEdge,\n    addVertex,\n    removeEdge,\n    removeVertex,\n    selectVertex,\n    unselectVertex,\n    updateVertexPosition\n} from \"../../actions\";\nimport { startDialogForResult } from \"../../actions/dialog\";\nimport { call } from \"../../actions/algorithm\";\n\nconst cx = classnames.bind(styles);\n\nconst vertexRadius = 20;\n\nconst mapStateToProps = state => ({\n    graph: state.graphReducer.graph,\n    graphMode: state.graphReducer.graphMode,\n    selectedVertex: state.graphReducer.selectedVertex\n});\n\nexport const graphMode = Object.freeze({\n    DEFAULT: 0,\n    ADD_VERTEX: 1,\n    ADD_EDGE: 2,\n    REMOVE_VERTEX_OR_EDGE: 3,\n    ALGORITHM_PRE_CALL_SELECT_VERTEX: 4,\n    ALGORITHM_PRE_CALL_SELECT_EDGE: 5\n});\n\nexport class Graph {\n    constructor(oriented) {\n        this._vertices = [];\n        this._edges = [];\n        this._oriented = oriented;\n        this._currentName = 0;\n    }\n\n    addVertex(x, y, radius) {\n        const vertex = new Vertex(x, y, radius, this._currentName++);\n        this._vertices.push(vertex);\n        return vertex;\n    }\n\n    removeVertex(vertex) {\n        const index = this._vertices.findIndex(v => v === vertex);\n        if (index !== -1) {\n            this._vertices.splice(index, 1);\n            this._edges = this._edges.filter(edge => (edge.from.name !== vertex.name) && (edge.to.name !== vertex.name));\n        }\n    }\n\n    findEdge(vertexFrom, vertexTo) {\n        if (this._oriented)\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addEdge(vertexFrom, vertexTo, weight) {\n        const i = this.findEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, this._oriented, weight);\n            this._edges.push(edge);\n            return edge;\n        }\n        else {\n            this._edges[i].weight = weight;\n        }\n    }\n\n    removeEdge(edge) {\n        this._edges = this._edges.filter(e => e !== edge);\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n        if (this._oriented)\n            this._edges.forEach(edge => edge.invertOrientation());\n        else {\n            const newEdges = [];\n            this._edges.forEach(edge => {\n                if (newEdges.findIndex(e => (e.from === edge.from) && (e.to === edge.to)\n                    || (e.to === edge.from) && (e.from === edge.to)) === -1) {\n\n                    edge.invertOrientation();\n                    newEdges.push(edge);\n                }\n            });\n            this._edges = newEdges;\n        }\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n}\n\nclass GraphComponent extends React.Component {\n    state = {\n        draggedVertex: undefined,\n        windowWidth: 700,\n        windowHeight: 700\n    };\n\n    componentDidMount() {\n        const handleResize = () => {\n            this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n        };\n        window.onresize = handleResize;\n        handleResize();\n    }\n\n    findIndexOfVertex = (vertex) => {\n        return this.props.graph.vertices.findIndex(v => v === vertex);\n    };\n\n    handleVertexDragStart = (e, vertex) => {\n        const i = this.findIndexOfVertex(vertex);\n        this.setState({ draggedVertex: (i !== -1 ? i : undefined) });\n    };\n\n    updateDraggedVertex = (x, y) => {\n        const vertex = this.state.draggedVertex;\n        if (vertex !== undefined)\n            this.props.updateVertexPosition(vertex, x, y);\n    };\n\n    handleVertexDragMove = e => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n    };\n\n    handleVertexDragEnd = (e, vertex) => {\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n        this.setState({ draggedVertex: undefined });\n    };\n\n    getEdgeType = edge => {\n        const vertexFrom = edge.from, vertexTo = edge.to;\n\n        if (vertexTo === vertexFrom)\n            return EdgeType.LOOP;\n        else if (!edge.isOriented())\n            return EdgeType.NOT_ORIENTED;\n        else if (this.props.graph.edges.findIndex(e => (e.from === vertexTo) && (e.to === vertexFrom)) !== -1)\n            return EdgeType.TWO_SIDE_ORIENTED;\n        else\n            return EdgeType.ONE_SIDE_ORIENTED;\n    };\n\n    handleCanvasClick = e => {\n        const x = e.evt.clientX, y = e.evt.clientY;\n\n        if (this.props.graphMode === graphMode.ADD_VERTEX)\n            this.props.addVertex(x, y, vertexRadius);\n        else if (this.props.graphMode === graphMode.ADD_EDGE) {\n            if (this.props.selectedVertex !== undefined) {\n                this.props.unselectVertex();\n            }\n        }\n    };\n\n    handleVertexClick = (e, vertex) => {\n        if (this.props.graphMode === graphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeVertex(vertex);\n        } else if (this.props.graphMode === graphMode.ADD_EDGE) {\n            e.cancelBubble = true;\n\n            if (this.props.selectedVertex === undefined) {\n                this.props.selectVertex(vertex);\n            }\n            else {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    \"\",\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        this.props.addEdge(this.props.selectedVertex, vertex, value);\n                        this.props.unselectVertex();\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (this.props.graphMode === graphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX) {\n            e.cancelBubble = true;\n\n            this.props.callAlgorithm(vertex, null);\n        }\n    };\n\n    handleEdgeClick = (e, edge) => {\n        if (this.props.graphMode === graphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeEdge(edge);\n        } else if (this.props.graphMode === graphMode.ALGORITHM_PRE_CALL_SELECT_EDGE) {\n            e.cancelBubble = true;\n            this.props.callAlgorithm(null, edge);\n        }\n    };\n\n    render() {\n        return (\n            <Stage onClick={this.handleCanvasClick} width={this.state.windowWidth} height={this.state.windowHeight}>\n                <Layer>\n                    <Rect fill={'white'} x={0} y={0} width={this.state.windowWidth} height={this.state.windowHeight}/>\n                    {\n                        this.props.graph.edges.map((edge, index) =>\n                            <EdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}\n                                onClick={(e) => this.handleEdgeClick(e, edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.vertices.map((vertex, index) =>\n                            <VertexComponent\n                                key={index}\n                                vertex={vertex}\n                                draggable={this.props.graphMode === graphMode.DEFAULT}\n                                onClick={(e) => this.handleVertexClick(e, vertex)}\n                                onDragStart={e => this.handleVertexDragStart(e, vertex)}\n                                onDragEnd={e => this.handleVertexDragEnd(e, vertex)}\n                                onDragMove={e => this.handleVertexDragMove(e, vertex)}/>\n                        )\n                    }\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    addVertex: (x, y, radius) => dispatch(addVertex(x, y, radius)),\n    addEdge: (vertexFrom, vertexTo, radius) => dispatch(addEdge(vertexFrom, vertexTo, radius)),\n    removeVertex: (vertex) => dispatch(removeVertex(vertex)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    updateVertexPosition: (vertexIndex, x, y) => dispatch(updateVertexPosition(vertexIndex, x, y)),\n    selectVertex: (vertex) => dispatch(selectVertex(vertex)),\n    unselectVertex: (vertex) => dispatch(unselectVertex(vertex)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern)),\n    callAlgorithm: (vertex, edge) => dispatch(call(vertex, edge))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Buttons.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const ButtonComponent = ({ text, onClick, activated, className }) => {\n    return (\n        <button className={cx(\"button\", className, {[`activated`]: activated})} onClick={onClick}>\n            {text}\n        </button>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Sliders.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const SliderComponent = ({ label, value, min, max, onChange }) => {\n    return (\n        <div className={cx(\"slider-wrapper\")}>\n            <div className={cx(\"slider-label\")}>{label}</div>\n            <input\n                type={\"range\"}\n                className={cx(\"slider\")}\n                value={value}\n                min={min}\n                max={max}\n                onChange={onChange}/>\n        </div>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./DropDownLists.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const DropDownList = ({ items, onChange }) => {\n    return (\n        <select className={cx(\"drop-down-list\")} onChange={onChange}>\n            {items.map((item, index) => <option key={index} value={index}>{item}</option>)}\n        </select>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./ToggleSwitches.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const RoundedToggleSwitch = ({ text, onChange, className, isChecked }) => {\n    return (\n        <div className={cx(\"switch-round-wrapper\", className)}>\n            <label className={cx(\"switch-round\")}>\n                <input type={\"checkbox\"} onChange={onChange} defaultChecked={isChecked}/>\n                <span className={cx(\"slider\")}></span>\n            </label>\n            <span className={cx(\"text\")}>{text}</span>\n        </div>\n    );\n};","export const edgesListToAdjacencyList = (vertices, edges) => {\n    const adjacencyList = {};\n    vertices.forEach(vertex => adjacencyList[vertex.name] = []);\n    edges.forEach(edge => {\n        adjacencyList[edge.from.name].push(edge.to.name);\n        if (!edge.isOriented() && (edge.from !== edge.to))\n            adjacencyList[edge.to.name].push(edge.from.name);\n    });\n    for (let [, verticesList] of Object.entries(adjacencyList))\n        verticesList = verticesList.sort((a, b) => a - b);\n    return adjacencyList;\n};","import { algorithmActionType, preCallAction, vertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nlet used = {};\nlet trace = [];\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: vertexAction.ENTER, actionType: algorithmActionType.VERTEX_ACTION });\n    adjacencyList[vertex].forEach(to => {\n        if (!used[to]) {\n            dfs(to, adjacencyList);\n        }\n    });\n    trace.push({ vertex, action: vertexAction.EXIT, actionType: algorithmActionType.VERTEX_ACTION });\n};\n\nexport default {\n    name: \"Поиск в глубину\",\n\n    preCall: preCallAction.SELECT_VERTEX,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        trace = [];\n        dfs(start.name, adjacencyList);\n        return trace;\n    }\n};","export class Queue {\n    constructor() {\n        this._queue = [];\n    }\n\n    get length() {\n        return this._queue.length;\n    }\n\n    isEmpty() {\n        return this._queue.length === 0;\n    }\n\n    push(value) {\n        this._queue.push(value);\n    }\n\n    pop() {\n        // TODO: O(N) -> O(1)\n        return this._queue.shift();\n    }\n\n    peek() {\n        return this._queue[0];\n    }\n}","import { algorithmActionType, preCallAction, vertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\n\nconst bfs = (start, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: vertexAction.ENTER, actionType: algorithmActionType.VERTEX_ACTION });\n    let vertex;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: vertexAction.SELECT, actionType: algorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(to => {\n            if (!used[to]) {\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: vertexAction.ENTER, actionType: algorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: vertexAction.EXIT, actionType: algorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Поиск в ширину\",\n\n    preCall: preCallAction.SELECT_VERTEX,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n        bfs(start.name, adjacencyList, used, trace);\n        return trace;\n    }\n};","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Menu.module.scss\";\nimport Draggable from 'react-draggable';\nimport { ButtonComponent } from \"../Buttons/Buttons\";\nimport { SliderComponent } from \"../Sliders/Sliders\";\nimport { DropDownList } from \"../DropDownLists/DropDownLists\";\nimport { changeGraphMode, cleanGraphSelections, closeMessage, invertOrientation, showMessage } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { graphMode } from \"../Graph/Graph\";\nimport { RoundedToggleSwitch } from \"../ToggleSwitches/ToggleSwitches\";\nimport { call, continueCall, pause, preCall, setAlgorithm, setSpeed } from \"../../actions/algorithm\";\nimport DFS from \"../../algorithms/graph/dfs\"\nimport BFS from \"../../algorithms/graph/bfs\"\n\nconst cx = classnames.bind(styles);\n\nconst minAlgorithmSpeed = 0;\nconst maxAlgorithmSpeed = 1000;\n\nconst mapStateToProps = state => ({\n    graphMode: state.graphReducer.graphMode,\n    isOriented: state.graphReducer.graph.isOriented(),\n    isVisualizationActive: state.algorithmReducer.isActive,\n    visualizationSpeed: state.algorithmReducer.speed,\n    selectedAlgorithm: state.algorithmReducer.algorithm\n});\n\nclass MenuComponent extends React.Component {\n    state = {\n        algorithms: [DFS, BFS],\n        algorithmPaused: false\n    };\n\n    componentDidMount() {\n        this.props.setAlgorithm(this.state.algorithms[0]);\n        this.props.setSpeed((minAlgorithmSpeed + maxAlgorithmSpeed) / 2);\n    }\n\n    handleAlgorithmChange = e => {\n        this.clearVisualization();\n        this.props.changeGraphMode(graphMode.DEFAULT);\n        this.props.closeMessage();\n\n        this.props.setAlgorithm(this.state.algorithms[e.target.value]);\n    };\n\n    startVisualization = () => {\n        if (this.state.algorithmPaused) {\n            this.props.continue();\n            this.setState({ algorithmPaused: false });\n        } else if (this.props.isVisualizationActive) {\n            this.props.pause();\n            this.setState({ algorithmPaused: true })\n        } else {\n            this.props.cleanGraphSelections();\n            this.props.preCall();\n        }\n    };\n\n    stepVisualization = () => {\n        // TODO: Add step-by-step visualization\n    };\n\n    stopVisualization = () => {\n        this.clearVisualization();\n        this.props.closeMessage();\n        this.props.changeGraphMode(graphMode.DEFAULT);\n    };\n\n    handleAlgorithmSpeedChange = e => {\n        this.props.setSpeed(maxAlgorithmSpeed - e.target.value);\n    };\n\n    askForAction = (message, graphMode) => {\n        this.clearVisualization();\n\n        this.props.showMessage(message);\n        this.props.changeGraphMode(graphMode);\n    };\n\n    closeMessage = () => {\n        this.props.changeGraphMode(graphMode.DEFAULT);\n        this.props.closeMessage();\n    };\n\n    invertOrientation = () => {\n        this.clearVisualization();\n\n        this.props.invertOrientation();\n    };\n\n    clearVisualization = () => {\n        this.props.pause();\n        this.setState({ algorithmPaused: false });\n        this.props.cleanGraphSelections();\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"} cancel={[\"button\", \"input\", \"select\", \".\" + cx(\"switch\")]}>\n                <div className={cx(\"menu\")}>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"graph-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Режим просмотра\"} // TODO: Find proper name\n                                onClick={() => this.closeMessage()}\n                                activated={this.props.graphMode === graphMode.DEFAULT}/>\n                            <ButtonComponent\n                                text={\"Добавить вершину\"}\n                                onClick={() => this.askForAction(\"Выберите точку для добавления вершины\", graphMode.ADD_VERTEX)}\n                                activated={this.props.graphMode === graphMode.ADD_VERTEX}/>\n                            <ButtonComponent\n                                text={\"Добавить ребро\"}\n                                onClick={() => this.askForAction(\"Выберите вершины, которые нужно соединить ребром\", graphMode.ADD_EDGE)}\n                                activated={this.props.graphMode === graphMode.ADD_EDGE}/>\n                            <ButtonComponent\n                                text={\"Удалить вершину/ребро\"}\n                                onClick={() => this.askForAction(\"Выберите объект для удаления\", graphMode.REMOVE_VERTEX_OR_EDGE)}\n                                activated={this.props.graphMode === graphMode.REMOVE_VERTEX_OR_EDGE}/>\n                        </div>\n                        <RoundedToggleSwitch\n                            className={cx(\"switch\")}\n                            text={\"Ориентированный?\"}\n                            onChange={() => this.invertOrientation()}\n                            isChecked={this.props.isOriented}/>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"algorithms-list\")}>\n                            <DropDownList\n                                items={this.state.algorithms.map(a => a.name)}\n                                onChange={this.handleAlgorithmChange}/>\n                        </div>\n                        <div className={cx(\"slider\")}>\n                            <SliderComponent\n                                label={\"Скорость анимации\"}\n                                value={maxAlgorithmSpeed - this.props.visualizationSpeed}\n                                min={minAlgorithmSpeed}\n                                max={maxAlgorithmSpeed}\n                                onChange={this.handleAlgorithmSpeedChange}/>\n                        </div>\n                        <div className={cx(\"visualization-control-buttons\")}>\n                            <ButtonComponent\n                                text={this.state.algorithmPaused ? \"Далее\" : (this.props.isVisualizationActive ? \"Пауза\" : \"Старт\")}\n                                onClick={this.startVisualization}/>\n                            <ButtonComponent text={\"Шаг\"} onClick={this.stepVisualization}/>\n                            <ButtonComponent text={\"Стоп\"} onClick={this.stopVisualization}/>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeGraphMode: (graphMode) => dispatch(changeGraphMode(graphMode)),\n    showMessage: (message) => dispatch(showMessage(message)),\n    closeMessage: () => dispatch(closeMessage()),\n    invertOrientation: () => dispatch(invertOrientation()),\n    setAlgorithm: (algorithm) => dispatch(setAlgorithm(algorithm)),\n    setSpeed: (speed) => dispatch(setSpeed(speed)),\n    preCall: () => dispatch(preCall()),\n    call: () => dispatch(call()),\n    pause: () => dispatch(pause()),\n    continue: () => dispatch(continueCall()),\n    cleanGraphSelections: () => dispatch(cleanGraphSelections())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MessageBox.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message\n});\n\nconst MessageBox = ({ message }) => {\n    return (\n        <div className={cx(\"message-box\", {[`invisible`]: message === undefined})}>\n            {message}\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(MessageBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./TextInputs.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const TextInputComponent = ({ value, placeholder, onChange, pattern, className }) => {\n    return (\n        <input\n            className={cx(\"text-input\", className)}\n            type=\"text\"\n            pattern={pattern}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}/>\n    );\n};","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InputDialog.module.scss\";\nimport { cancelDialog, submitDialog } from \"../../../actions/dialog\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { TextInputComponent } from \"../../TextInputs/TextInputs\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nclass InputDialog extends React.Component {\n    state = {\n        value: \"\"\n    };\n\n    handleChange = (e) => {\n        if (e.target.validity.valid)\n            this.setState({ value: e.target.value });\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => {\n                    this.setState({ value: \"\" });\n                    this.props.cancelDialog(this.props.onCancel);\n                }}\n                ariaHideApp={false}\n                className={cx(\"input-dialog\")}\n                style={customStyles}>\n\n                <h2>{this.props.title}</h2>\n                <div>{this.props.text}</div>\n                <TextInputComponent\n                    className={cx(\"text-input\")}\n                    placeholder={this.props.inputPlaceholder}\n                    pattern={this.props.pattern}\n                    onChange={this.handleChange}\n                    value={this.state.value}/>\n\n                <ButtonComponent\n                    className={cx(\"button\")}\n                    text={\"Ок\"}\n                    onClick={() => {\n                        this.setState({ value: \"\" });\n                        this.props.submitDialog(this.props.onSubmit, this.state.value);\n                    }}/>\n                <ButtonComponent\n                    className={cx(\"button\")}\n                    text={\"Отмена\"}\n                    onClick={() => {\n                        this.setState({ value: \"\" });\n                        this.props.cancelDialog(this.props.onCancel);\n                    }}/>\n\n                <div className={cx(\"hint\")}>{this.props.hint}</div>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelDialog(onCancel))\n});\n\nexport default connect(null, mapDispatchToProps)(InputDialog);","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./App.module.scss\";\nimport PlainGraph from \"./PlainGraph/PlainGraph\";\nimport GraphComponent from \"./Graph/Graph\";\nimport MenuComponent from \"./Menu/Menu\";\nimport MessageBox from \"./MessageBox/MessageBox\";\nimport InputDialog from \"./Dialogs/InputDialog/InputDialog\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    inputDialogProps: state.dialogReducer,\n});\n\nconst App = ({ inputDialogProps }) => (\n    <div className={cx(\"app\")}>\n        <MenuComponent/>\n        <GraphComponent/>\n        <MessageBox/>\n        <InputDialog\n            isOpen={inputDialogProps.isOpen}\n            title={inputDialogProps.title}\n            text={inputDialogProps.text}\n            hint={inputDialogProps.hint}\n            inputPlaceholder={inputDialogProps.inputPlaceholder}\n            pattern={inputDialogProps.pattern}\n            onSubmit={inputDialogProps.onSubmit}\n            onCancel={inputDialogProps.onCancel}/>\n    </div>\n);\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { actionName } from \"../actions/dialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false,\n    title: \"\",\n    text: \"\",\n    hint: \"\",\n    inputPlaceholder: \"\",\n    onSubmit: null,\n    onClose: null,\n    pattern: \".*\"\n};\n\nconst dialog = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case actionName.START_DIALOG_FOR_RESULT:\n            newState = {\n                ...state,\n                isOpen: true,\n                title: action.title,\n                text: action.text,\n                hint: action.hint,\n                inputPlaceholder: action.inputPlaceholder,\n                pattern: action.pattern\n            };\n\n            newState.onSubmit = (value) => {\n                const onSubmit = action.onSubmit;\n                if (onSubmit)\n                    onSubmit(value);\n            };\n            newState.onCancel = () => {\n                const onCancel = action.onCancel;\n                if (onCancel)\n                    onCancel();\n            };\n\n            return newState;\n        case actionName.CLOSE_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default dialog;","import { actionName } from \"../actions/algorithm\";\nimport React from \"react\";\nimport { preCallAction } from \"../algorithms/graph/index\";\n\nconst defaultState = {\n    trace: [],\n    isActive: false,\n    algorithm: null,\n    speed: 1000\n};\n\nconst algorithm = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case actionName.CALL:\n            newState = {\n                ...state\n            };\n\n            const preCall = state.algorithm.preCall;\n            const vertices = action.graph.vertices;\n            const edges = action.graph.edges;\n            let trace = [];\n            if (preCall === preCallAction.SELECT_VERTEX) {\n                trace = state.algorithm.call(vertices, edges, action.vertex);\n            } else if (preCall === preCallAction.SELECT_EDGE) {\n                trace = state.algorithm.call(vertices, edges, action.edge);\n            }\n            newState.trace = trace;\n\n            return newState;\n        case actionName.POP_TRACE_STEP:\n            newState = {\n                ...state,\n                trace: [...state.trace]\n            };\n\n            newState.trace.shift();\n\n            return newState;\n        case actionName.START:\n            return {\n                ...state,\n                isActive: true\n            };\n        case actionName.PAUSE:\n            return {\n                ...state,\n                isActive: false\n            };\n        case actionName.SET_ALGORITHM:\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        case actionName.SET_SPEED:\n            return {\n                ...state,\n                speed: action.speed\n            };\n        default:\n            return state;\n    }\n};\n\nexport default algorithm;","import { Graph, graphMode } from \"../components/Graph/Graph\";\nimport { actionName } from \"../actions\";\nimport { VertexState } from \"../components/Graph/Vertex/Vertex\";\nimport { combineReducers } from \"redux\";\nimport dialog from \"./dialog\";\nimport algorithm from \"./algorithm\";\nimport { algorithmActionType, vertexAction } from \"../algorithms/graph\";\nimport { EdgeState } from \"../components/Graph/Edge/Edge\";\n\nconst defaultState = {\n    graph: new Graph(false),\n    message: undefined,\n    graphMode: graphMode.DEFAULT,\n    selectedVertex: undefined // For 'ADD_EDGE' // TODO: Do 'ADD_EDGE' in a cleaner way\n};\n\nconst clone = object => {\n    return Object.assign( Object.create( Object.getPrototypeOf(object)), object);\n};\n\nconst unselectSelectedVertex = (state) => {\n    if (state.selectedVertex !== undefined) {\n        const i = state.graph.vertices.findIndex(v => v === state.selectedVertex);\n        if (i !== -1)\n            state.graph.vertices[i].state = VertexState.EMPTY;\n        state.selectedVertex = undefined;\n    }\n};\n\nconst updateVertexByAction = (vertex, action) => {\n    switch (action) {\n        case vertexAction.SELECT:\n            vertex.state = VertexState.HIGHLIGHTED;\n            break;\n        case vertexAction.ENTER:\n            vertex.state = VertexState.PRE_COMPLETED;\n            break;\n        case vertexAction.EXIT:\n            vertex.state = VertexState.COMPLETED;\n            break;\n        default:\n    }\n};\n\nconst cleanGraphSelections = (state) => {\n    state.graph.vertices.forEach(v => v.state = VertexState.EMPTY);\n    state.graph.edges.forEach(e => e.state = EdgeState.NORMAL);\n    state.selectedVertex = undefined;\n};\n\nconst reducer = (state = defaultState, action) => {\n    let newState;\n    let i;\n    switch (action.type) {\n        case actionName.ADD_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addVertex(action.x, action.y, action.radius);\n\n            return newState;\n        case actionName.ADD_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addEdge(action.vertexFrom, action.vertexTo, action.weight);\n\n            return newState;\n        case actionName.REMOVE_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeVertex(action.vertex);\n\n            return newState;\n        case actionName.REMOVE_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeEdge(action.edge);\n\n            return newState;\n        case actionName.UPDATE_VERTEX_POSITION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.vertices[action.vertexIndex].x = action.x;\n            newState.graph.vertices[action.vertexIndex].y = action.y;\n\n            return newState;\n        case actionName.CHANGE_GRAPH_MODE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            if (action.graphMode !== newState.graphMode) {\n                newState.graphMode = action.graphMode;\n\n                unselectSelectedVertex(newState);\n            }\n\n            return newState;\n        case actionName.SELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            i = newState.graph.vertices.findIndex(v => v === action.vertex);\n            if (i !== -1) {\n                newState.graph.vertices[i].state = VertexState.HIGHLIGHTED;\n                newState.selectedVertex = action.vertex;\n            }\n\n            return newState;\n        case actionName.UNSELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            return newState;\n        case actionName.SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message\n            };\n        case actionName.CLOSE_MESSAGE:\n            return {\n                ...state,\n                message: undefined\n            };\n        case actionName.INVERT_ORIENTATION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.invertOrientation();\n\n            return newState;\n        case actionName.ALGORITHM_STEP:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            const step = action.step;\n            if (step.actionType === algorithmActionType.VERTEX_ACTION) {\n                const vertex = newState.graph.vertices[step.vertex];\n                updateVertexByAction(vertex, step.action);\n            } else if (step.actionType === algorithmActionType.EDGE_ACTION) {\n                // TODO: Implement edge action\n            }\n\n            return newState;\n        case actionName.CLEAN_GRAPH_SELECTIONS:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            cleanGraphSelections(newState);\n\n            return newState;\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    graphReducer: reducer,\n    dialogReducer: dialog,\n    algorithmReducer: algorithm\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2at_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plain_graph\":\"PlainGraph_plain_graph__132cd\",\"drawing_area\":\"PlainGraph_drawing_area__poiJd\",\"cell\":\"PlainGraph_cell__2tDfs\",\"cell-blocked\":\"PlainGraph_cell-blocked__13I9p\",\"cell-path\":\"PlainGraph_cell-path__1JSUa\",\"cell-start\":\"PlainGraph_cell-start__2FTb6\",\"cell-finish\":\"PlainGraph_cell-finish__2icJo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2xbQm\",\"menu-sub\":\"Menu_menu-sub__2jhA1\",\"graph-control-buttons\":\"Menu_graph-control-buttons__2CY62\",\"switch\":\"Menu_switch__3Y97k\",\"visualization-control-buttons\":\"Menu_visualization-control-buttons__1OTXW\",\"algorithms-list\":\"Menu_algorithms-list__2mwx1\",\"slider\":\"Menu_slider__RA1Ez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__1L6GG\",\"activated\":\"Buttons_activated__EZOmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider-wrapper\":\"Sliders_slider-wrapper__GIw-8\",\"slider-label\":\"Sliders_slider-label__1w08l\",\"slider\":\"Sliders_slider__1gqJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drop-down-list\":\"DropDownLists_drop-down-list__ix94o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch-round-wrapper\":\"ToggleSwitches_switch-round-wrapper__g2bxh\",\"switch-round\":\"ToggleSwitches_switch-round__1bQ1T\",\"slider\":\"ToggleSwitches_slider__Q-bUA\",\"text\":\"ToggleSwitches_text__1sKta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message-box\":\"MessageBox_message-box__2uEgD\",\"invisible\":\"MessageBox_invisible__10Wwp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-dialog\":\"InputDialog_input-dialog__2SLyF\",\"text-input\":\"InputDialog_text-input__2zjdU\",\"button\":\"InputDialog_button__1ZFHJ\",\"hint\":\"InputDialog_hint__1ftkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"TextInputs_text-input__3mPdK\"};"],"sourceRoot":""}