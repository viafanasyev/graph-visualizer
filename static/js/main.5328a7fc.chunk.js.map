{"version":3,"sources":["algorithms/plain/breadth-first-search.js","components/PlainGraph/PlainGraph.jsx","components/Graph/Vertex/Vertex.jsx","components/Graph/Edge/Edge.jsx","utils/sleep.js","actions/index.js","actions/dialog.js","algorithms/graph/index.js","utils/graphConverter.js","actions/algorithm.js","components/Graph/VisualizationEdge/VisualizationEdge.jsx","components/Graph/Graph.jsx","components/Buttons/Buttons.jsx","components/Sliders/Sliders.jsx","components/DropDownLists/DropDownLists.jsx","components/ToggleSwitches/ToggleSwitches.jsx","utils/sizeof.js","algorithms/graph/dfs.js","utils/queue.js","algorithms/graph/bfs.js","algorithms/graph/dijkstra.js","algorithms/graph/prim-mst.js","utils/dsu.js","algorithms/graph/kruskal-mst.js","algorithms/graph/check-connected.js","algorithms/graph/check-bipartite.js","algorithms/graph/radius.js","algorithms/graph/diameter.js","algorithms/graph/topological-sort.js","algorithms/graph/find-bridges.js","algorithms/graph/find-articulation-points.js","algorithms/graph/scc-kosaraju.js","algorithms/graph/euler-path.js","algorithms/graph/euler-cycle.js","actions/matrixDialog.js","components/Menu/Menu.jsx","components/MessageBox/MessageBox.jsx","components/TextInputs/TextInputs.jsx","components/Dialogs/InputDialog/InputDialog.jsx","components/InfoBox/InfoBox.jsx","components/Dialogs/MatrixDialog/AdjacencyMatrix.jsx","components/Dialogs/MatrixDialog/MatrixDialog.jsx","components/HintBox/HintBox.jsx","components/AlgorithmInfoBox/AlgorithmInfoBox.jsx","components/App.jsx","serviceWorker.js","reducers/dialog.js","reducers/algorithm.js","reducers/matrixDialog.js","reducers/generatorDialog.js","reducers/index.js","index.js","components/App.module.scss","components/PlainGraph/PlainGraph.module.scss","components/Menu/Menu.module.scss","components/Buttons/Buttons.module.scss","components/Sliders/Sliders.module.scss","components/DropDownLists/DropDownLists.module.scss","components/ToggleSwitches/ToggleSwitches.module.scss","components/MessageBox/MessageBox.module.scss","components/Dialogs/InputDialog/InputDialog.module.scss","components/TextInputs/TextInputs.module.scss","components/InfoBox/InfoBox.module.scss","components/Dialogs/MatrixDialog/MatrixDialog.module.scss","components/Dialogs/MatrixDialog/AdjacencyMatrix.module.scss","components/HintBox/HintBox.module.scss","components/AlgorithmInfoBox/AlgorithmInfoBox.module.scss"],"names":["algorithm","cells","cellStart","cellFinish","pathStatus","queue","x","y","parent","current","shift","console","log","next","node","minX","minY","maxX","maxY","res","push","neighbours","length","i","findIndex","n","cx","classnames","bind","styles","CellState","Object","freeze","EMPTY","BLOCKED","START","FINISH","PATH","Cell","status","onMouseEnter","onMouseLeave","className","React","Component","Vertex","radius","name","this","state","VertexState","DEFAULT","hint","hintState","VertexHintState","CLEAR","HIGHLIGHTED","PRE_COMPLETED","COMPLETED","COLOR_1","COLOR_2","VertexComponent","vertex","draggable","onDragStart","onDragEnd","onDragMove","onClick","e","call","target","getChildren","setAttrs","scaleX","scaleY","shadowColor","shadowBlur","shadowOffset","shadowOpacity","moveToTop","handleDragStart","to","duration","shadowOffsetX","shadowOffsetY","handleDragEnd","fill","color","stroke","strokeWidth","vertexBorderWidth","text","fontSize","textColor","width","height","align","verticalAlign","hintColor","labelWidth","Edge","vertexFrom","vertexTo","oriented","weight","_from","_to","EdgeState","_oriented","undefined","FLIPPED","WALKED","ERASED","SHADOWED","EdgeComponent","edgeComponent","edge","edgeType","points","getEdgePointsForType","EdgeType","NOT_ORIENTED","linePoints","hitStrokeWidth","tension","isWeighted","labelPoints","EdgeLabel","labelRadius","labelBorderWidth","ONE_SIDE_ORIENTED","TWO_SIDE_ORIENTED","LOOP","from","isFlipped","dx","dy","angle","Math","atan2","vertexFromOffset","vertexToOffset","xFrom","cos","yFrom","sin","xTo","yTo","xMiddle","yMiddle","anchorDx","sqrt","anchorDy","xMiddleFirst","sleep","ms","Promise","resolve","setTimeout","ActionType","ADD_VERTEX","ADD_EDGE","REMOVE_VERTEX","REMOVE_EDGE","CHANGE_GRAPH_MODE","SELECT_VERTEX","UNSELECT_VERTEX","SHOW_MESSAGE","CLOSE_MESSAGE","UPDATE_VERTEX_POSITION","INVERT_ORIENTATION","ALGORITHM_STEP","CLEAN_GRAPH_SELECTIONS","SET_GRAPH","MOVE_CANVAS","GENERATE_GRAPH","CLEAR_GRAPH","addEdge","type","removeEdge","changeGraphMode","graphMode","currentMessageId","showMessage","message","isAlert","dispatch","a","messageId","showMessageConnector","closeMessage","algorithmStep","step","cleanGraphSelections","moveCanvas","START_DIALOG_FOR_RESULT","CLOSE_DIALOG","startDialogForResult","title","inputPlaceholder","onSubmit","onCancel","pattern","closeDialog","VertexAction","SELECT","UNSELECT","ENTER","EXIT","CLEAR_ALL_SELECTIONS","VertexHintAction","REMOVE","SET","HIGHLIGHT","EdgeAction","WALK","SHADOW","FLIP","AlgorithmActionType","VERTEX_ACTION","EDGE_ACTION","VERTEX_HINT_ACTION","PreCallAction","NOTHING","SELECT_EDGE","Criteria","WEIGHTED","CONNECTED","ORIENTED","ACYCLIC","getOperationsCount","trace","operationsCount","forEach","t","isChained","edgesListToAdjacencyList","vertices","edges","adjacencyList","isOriented","entries","verticesList","sort","b","edgesListToReversedAdjacencyList","map","edgesListToAdjacencyMatrix","verticesNumbers","v","nameToIndex","number","index","cell","adjacencyMatrix","Array","j","weighted","PRE_CALL","CALL","PAUSE","POP_TRACE_STEP","SET_ALGORITHM","SET_SPEED","SET_IS_ONE_STEP","CLEAR_TRACE","SHOW_STATISTICS","CLEAR_STATISTICS","SHOW_ALGORITHM_INFO","CLEAR_ALGORITHM_INFO","INVERT_ALGORITHM_INFO_COLLAPSED","setIsOneStep","isOneStep","getState","GraphMode","graph","graphReducer","callConnector","showAlgorithmInfo","algorithmReducer","pause","start","callSuccess","currentVisualizationId","traceStep","popTraceStep","showStatistics","visualizationId","isActive","speed","clearTrace","clearStatistics","clearAlgorithmInfo","VisualizationEdgeComponent","REMOVE_VERTEX_OR_EDGE","ALGORITHM_PRE_CALL_SELECT_VERTEX","ALGORITHM_PRE_CALL_SELECT_EDGE","Graph","isArray","Error","_vertices","_edges","_visualizationEdges","_currentName","max","splice","filter","findEdge","invertOrientation","newEdges","removeVisualizationEdgeByVertices","GraphComponent","draggedVertex","windowWidth","windowHeight","findIndexOfVertex","props","handleVertexDragStart","cancelBubble","setState","updateDraggedVertex","updateVertexPosition","handleVertexDragMove","handleVertexDragEnd","getEdgeType","handleCanvasClick","evt","clientX","canvasX","clientY","canvasY","addVertex","selectedVertex","unselectVertex","handleVertexClick","removeVertex","selectVertex","value","Number","callAlgorithm","handleEdgeClick","handleCanvasDragEnd","handleResize","window","innerWidth","innerHeight","onresize","key","visualizationEdges","connect","vertexIndex","onClose","ButtonComponent","activated","SliderComponent","label","min","onChange","DropDownList","items","item","RoundedToggleSwitch","isChecked","checked","sizeof","object","objectList","stack","bytes","pop","indexOf","hasOwnProperty","used","memoryUsed","preCall","criteria","startTime","performance","now","dfs","action","actionType","toVertex","statistics","toFixed","algorithmInfo","Queue","_queue","isEmpty","bfs","d","MAX_SAFE_INTEGER","dijkstra","floor","random","mstWeight","mst","prim","DSU","size","find","dsu","makeSet","union","kruskal","isConnected","isBipartite","p","level","peek","eccentricities","findRadius","diameter","findDiameter","topSortList","addedVertices","sortedVertices","reverse","topSort","timer","tin","tout","countBridges","findBridges","countArticulationPoints","isArticulationPoint","children","findArticulationPoints","reversedAdjacencyList","componentsNumber","dfsComponents","findComponents","isEuler","outOddVertices","inOddVertices","degree","oddVertices","checkForEuler","assign","cur","currentVertices","pathLen","findEulerPath","findEulerCycle","START_MATRIX_DIALOG_FOR_RESULT","CLOSE_MATRIX_DIALOG","closeMatrixDialog","MenuComponent","algorithms","DFS","BFS","Dijkstra","PrimMST","KruskalMST","CheckConnected","CheckBipartite","FindRadius","FindDiameter","TopologicalSort","FindBridges","FindArticulationPoints","SCCKosaraju","EulerPath","EulerCycle","hidden","handleAlgorithmChange","clearVisualization","setAlgorithm","startVisualization","remainingAlgorithmSteps","isVisualizationActive","continue","stepVisualization","stopVisualization","handleAlgorithmSpeedChange","setSpeed","askForAction","writeToFile","json","JSON","stringify","exportData","escape","anchorElement","document","getElementById","setAttribute","click","askReadFromFile","readFromFile","reader","FileReader","file","files","onload","parse","result","isNaN","setGraph","resetCanvasPosition","readAsText","showAdjacencyMatrix","startMatrixDialog","collapse","nextProps","nextState","nextContext","visualizationSpeed","selectedAlgorithm","grid","bounds","cancel","id","style","aria-hidden","href","accept","continueCall","TextInputComponent","placeholder","autoFocus","customStyles","overlay","zIndex","InputDialog","handleChange","validity","valid","submit","preventDefault","submitDialog","cancelDialog","isOpen","onRequestClose","ariaHideApp","dialogReducer","lines","isVisible","isStatisticsShown","line","reduce","acc","MatrixCell","topLeft","topRight","bottomLeft","bottomRight","onContextMenu","MatrixRow","row","first","last","vertexNumber","onCellClick","AdjacencyMatrix","column","MatrixDialog","prev","arr","handleCellClick","edgeIndex","matrixDialogReducer","submitMatrixDialog","cancelMatrixDialog","HintBox","isAlgorithmInfoShown","isCollapsed","isAlgorithmInfoCollapsed","generateGraph","clearGraph","invertAlgorithmInfoCollapsed","handlers","GENERATE","COLLAPSE_ALGORITHM_INFO","keyMap","Menu","Boolean","location","hostname","match","defaultState","dialog","newState","matrixDialog","generatorDialog","clone","create","getPrototypeOf","unselectSelectedVertex","updateVertexByAction","updateEdgeByAction","updateVertexHintByAction","combineReducers","addVisualizationEdge","removeAllEdges","edgesNumber","log2","generatorDialogReducer","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.5328a7fc.chunk.js","sourcesContent":["export const algorithm = {\n    name: \"Breadth First Search\",\n    run: function (cells, cellStart, cellFinish, pathStatus) {\n        let node = { x: cellStart.x, y: cellStart.y, parent: null };\n\n        const queue = [node];\n        while (queue.length) {\n            let current = queue.shift();\n            if ((current.x !== cellStart.x) || (current.y !== cellStart.y))\n                cells[current.y][current.x] = pathStatus;\n            if ((current.x === cellFinish.x) && (current.y === cellFinish.y)) {\n                // const path = backtrace(current);\n                // TODO: something\n                return;\n            }\n            console.log(current);\n            const next = neighbours(current, 0, 0, cells[0].length - 1, cells.length - 1);\n            for (let i = 0; i < next.length; ++i)\n                if ((cells[next[i].y][next[i].x] !== pathStatus) && !((next[i].x === cellStart.x) && (next[i].y === cellStart.y)) && (queue.findIndex(n => (n.x === next[i].x) && (n.y === next[i].y)) === -1))\n                    queue.push(next[i]);\n        }\n    }\n};\n\nfunction backtrace(node) {\n    const path = [{x: node.x, y: node.y}];\n    while (node.parent !== null) {\n        node = node.parent;\n        path.push({x: node.x, y: node.y});\n    }\n    return path;\n}\n\nfunction neighbours(node, minX, minY, maxX, maxY) {\n    const res = [];\n    if (node.x < maxX)\n        res.push({ x: node.x + 1, y: node.y, parent: node });\n    if (node.x > minX)\n        res.push({ x: node.x - 1, y: node.y, parent: node });\n    if (node.y < maxY)\n        res.push({ x: node.x, y: node.y + 1, parent: node });\n    if (node.y > minY)\n        res.push({ x: node.x, y: node.y - 1, parent: node });\n    return res;\n}","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./PlainGraph.module.scss\";\nimport { algorithm } from \"../../algorithms/plain/breadth-first-search\";\n\nconst cx = classnames.bind(styles);\n\nconst CellState = Object.freeze({ EMPTY: 0, BLOCKED: 1, START: 2, FINISH: 3, PATH: 4});\n\nconst Cell = ({x, y, status, onMouseEnter, onMouseLeave}) => (\n    <rect x={x} y={y} className={cx(\"cell\", {\n            [`cell-blocked`]: status === CellState.BLOCKED,\n            [`cell-path`]: status === CellState.PATH,\n            [`cell-start`]: status === CellState.START,\n            [`cell-finish`]: status === CellState.FINISH\n          })}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}/>\n);\n\nclass PlainGraph extends React.Component {\n    state = {\n        cells: [],\n        cellSize: 40,\n        rows: 1000 / 40 + 10,\n        columns: 2000 / 40 + 10,\n        isMouseDown: false,\n        previousMouseRow: -1,\n        previousMouseColumn: -1,\n        mouseCellState: -1\n    };\n\n    componentDidMount() {\n        const cellSize = 40;\n        const rows = 1000 / cellSize + 10;\n        const columns = 2000 / cellSize + 10;\n        const cells = [];\n        // const rows = window.innerHeight / cellSize + 10, columns = window.innerWidth / cellSize + 10; // TODO: change on resize\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < columns; ++j) {\n                row.push(CellState.EMPTY);\n            }\n            cells.push(row);\n        }\n        cells[2][2] = CellState.START;\n        cells[2][40] = CellState.FINISH;\n        this.setState({ cells: cells, cellSize: cellSize, rows: rows, columns: columns});\n    }\n\n    invertCellUnderMouse = (event) => {\n        this.setState(oldState => {\n            const x = Math.floor(event.x / this.state.cellSize);\n            const y = Math.floor(event.y / this.state.cellSize);\n            if ((x === oldState.previousMouseColumn) && (y === oldState.previousMouseRow))\n                return oldState;\n            const state = {...oldState};\n\n            const currentCellState = state.cells[y][x];\n            if (currentCellState === state.mouseCellState) {\n                if ((currentCellState === CellState.EMPTY) || (currentCellState === CellState.PATH))\n                    state.cells[y][x] = CellState.BLOCKED;\n                else if (currentCellState === CellState.BLOCKED)\n                    state.cells[y][x] = CellState.EMPTY;\n            }\n            state.previousMouseRow = y;\n            state.previousMouseColumn = x;\n\n            return state;\n        });\n    };\n\n    handleMouseDown = (event) => {\n        algorithm.run(this.state.cells, {x:2,y:2},{x:40,y:2}, CellState.PATH);\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.setState({\n            isMouseDown: true,\n            mouseCellState: this.state.cells\n                [Math.floor(reducedEvent.y / this.state.cellSize)]\n                [Math.floor(reducedEvent.x / this.state.cellSize)]\n        });\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    handleMouseUp = (event) => {\n        this.invertCellUnderMouse({ x: event.clientX, y: event.clientY });\n        this.setState({ isMouseDown: false, previousMouseRow: -1, previousMouseColumn: -1 });\n    };\n\n    handleCellMouseEnter = (event) => {\n        if (!this.state.isMouseDown)\n            return;\n        const reducedEvent = { x: event.clientX, y: event.clientY };\n        this.invertCellUnderMouse(reducedEvent);\n    };\n\n    render() {\n        return (\n            <div className={cx(\"plain_graph\")}>\n                <svg className={cx(\"drawing_area\")}\n                     onMouseDown={e => this.handleMouseDown(e)}\n                     onMouseUp={e => this.handleMouseUp(e)}>\n                    {this.state.cells.map((row, y) =>\n                        row.map((cell, x) =>\n                            <Cell\n                                x={x * this.state.cellSize}\n                                y={y * this.state.cellSize}\n                                status={cell}\n                                key={this.state.columns * y + x}\n                                onMouseEnter={e => this.handleCellMouseEnter(e)}/>\n                            )\n                        )\n                    }\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default PlainGraph;","import { Circle, Group, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Vertex {\n    constructor(x, y, radius, name) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.state = VertexState.DEFAULT;\n        this.name = name;\n        this.hint = \"\";\n        this.hintState = VertexHintState.CLEAR;\n    }\n\n    get color() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'white';\n            case VertexState.HIGHLIGHTED:\n                return 'yellow';\n            case VertexState.PRE_COMPLETED:\n                return '#CCCCCC';\n            case VertexState.COMPLETED:\n                return '#444444';\n            case VertexState.COLOR_1:\n                return '#ff0000';\n            case VertexState.COLOR_2:\n                return '#0000ff';\n            default:\n                return 'white';\n        }\n    }\n\n    get textColor() {\n        switch (this.state) {\n            case VertexState.DEFAULT:\n                return 'black';\n            case VertexState.HIGHLIGHTED:\n                return 'black';\n            case VertexState.PRE_COMPLETED:\n                return 'black';\n            case VertexState.COMPLETED:\n                return 'white';\n            case VertexState.COLOR_1:\n                return 'white';\n            case VertexState.COLOR_2:\n                return 'white';\n            default:\n                return 'black';\n        }\n    }\n\n    get hintColor() {\n        switch (this.hintState) {\n            case VertexHintState.CLEAR:\n                return '#00000000';\n            case VertexHintState.DEFAULT:\n                return '#ff5f3c';\n            case VertexHintState.HIGHLIGHTED:\n                return '#2c99c3';\n            default:\n                return '#00000000';\n        }\n    }\n}\n\nconst handleDragStart = (e, call) => {\n    e.target.getChildren()[0].setAttrs({\n        scaleX: 1.1,\n        scaleY: 1.1,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: { x: 10, y: 10 },\n        shadowOpacity: 0.5\n    });\n    e.target.moveToTop();\n\n    call(e);\n};\n\nconst handleDragEnd = (e, call) => {\n    e.target.getChildren()[0].to({\n        duration: 0.25,\n        scaleX: 1,\n        scaleY: 1,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0\n    });\n\n    call(e);\n};\n\nexport const VertexComponent = ({ vertex, draggable, onDragStart, onDragEnd, onDragMove, onClick }) => {\n    const labelWidth = 40, labelHeight = 20;\n    return (\n        <Group\n            draggable={draggable}\n            onDragStart={e => handleDragStart(e, onDragStart)}\n            onDragEnd={e => handleDragEnd(e, onDragEnd)}\n            onDragMove={onDragMove}\n            onClick={onClick}\n            x={vertex.x}\n            y={vertex.y}>\n            <Circle\n                x={0}\n                y={0}\n                radius={vertex.radius}\n                fill={vertex.color}\n                stroke={'black'}\n                shadowBlur={0}\n                strokeWidth={vertexBorderWidth}\n                shadowOpacity={0.5}/>\n            <Text\n                text={vertex.name}\n                x={-labelWidth / 2.}\n                y={-labelHeight / 2.}\n                fontSize={20}\n                fill={vertex.textColor}\n                width={labelWidth}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n\n            <Text\n                text={vertex.hint}\n                x={-2 * vertex.radius}\n                y={-2 * vertex.radius}\n                fontSize={25}\n                fill={vertex.hintColor}\n                stroke={vertex.hintColor}\n                width={labelWidth * 2}\n                height={labelHeight}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>);\n};\n\nexport const vertexBorderWidth = 2;\n\nexport const VertexState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, PRE_COMPLETED: 2, COMPLETED: 3, COLOR_1: 4, COLOR_2: 5 });\nexport const VertexHintState = Object.freeze({ CLEAR: 0, DEFAULT: 1, HIGHLIGHTED: 2 });","import { vertexBorderWidth } from \"../Vertex/Vertex\";\nimport { Arrow, Circle, Group, Line, Text } from \"react-konva\";\nimport React from \"react\";\n\nexport class Edge {\n    constructor(vertexFrom, vertexTo, oriented, weight) {\n        this._from = vertexFrom;\n        this._to = vertexTo;\n        this.weight = weight;\n        this.state = EdgeState.DEFAULT;\n        this._oriented = oriented;\n    }\n\n    get from() {\n        return this._from;\n    }\n\n    get to() {\n        return this._to;\n    }\n\n    get color() {\n        switch (this.state) {\n            case EdgeState.DEFAULT:\n                return 'black';\n            case EdgeState.HIGHLIGHTED:\n                return '#f7ff00';\n            case EdgeState.WALKED:\n                return '#ff5f3c';\n            case EdgeState.ERASED:\n                return '#ffffff00';\n            case EdgeState.SHADOWED:\n                return '#dddddd';\n            case EdgeState.FLIPPED:\n                return 'black';\n            default:\n                return 'black';\n        }\n    }\n\n    isWeighted() {\n        return (this.weight !== undefined) && (this.weight !== null);\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n\n    isFlipped() {\n        return this.state === EdgeState.FLIPPED;\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n    }\n}\n\nexport const EdgeComponent = ({ edge, edgeType, onClick }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                onClick={onClick}\n                stroke={color}\n                fill={color}\n                strokeWidth={2}\n                hitStrokeWidth={15}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group onClick={onClick}>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeLabel = ({ x, y, text }) => {\n    const labelRadius = 15;\n    const labelHorizontalPadding = 1, labelVerticalPadding = 5;\n    const labelBorderWidth = 0;\n    return (\n        <Group\n            x={x - labelRadius - labelHorizontalPadding - labelBorderWidth}\n            y={y - labelRadius - labelVerticalPadding - labelBorderWidth}\n            width={labelRadius * 2. + 2. * (labelHorizontalPadding + labelBorderWidth)}\n            height={labelRadius * 2. + 2. * (labelVerticalPadding + labelBorderWidth)}>\n            <Circle\n                x={labelRadius + labelHorizontalPadding + labelBorderWidth}\n                y={labelRadius + labelVerticalPadding + labelBorderWidth}\n                radius={labelRadius}\n                fill={'white'}\n                stroke={'black'}\n                strokeWidth={labelBorderWidth}/>\n            <Text\n                x={labelBorderWidth + labelHorizontalPadding}\n                y={labelBorderWidth + labelVerticalPadding}\n                text={text}\n                fontSize={20}\n                width={labelRadius * 2.}\n                height={labelRadius * 2.}\n                align={'center'}\n                verticalAlign={'middle'}/>\n        </Group>\n    );\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });\nexport const EdgeState = Object.freeze({ DEFAULT: 0, HIGHLIGHTED: 1, ERASED: 2, WALKED: 3, SHADOWED: 4, FLIPPED: 5 });\n\nexport const getEdgePointsForType = (edge, edgeType) => {\n    let vertexFrom = edge.from;\n    let vertexTo = edge.to;\n    if (edge.isFlipped())\n        [vertexFrom, vertexTo] = [vertexTo, vertexFrom];\n\n    const dx = vertexTo.x - vertexFrom.x;\n    const dy = vertexFrom.y - vertexTo.y;\n    const angle = Math.atan2(dy, dx);\n    const vertexFromOffset = vertexFrom.radius + vertexBorderWidth / 2.;\n    const vertexToOffset = vertexTo.radius + vertexBorderWidth / 2.;\n\n    if ((edgeType === EdgeType.ONE_SIDE_ORIENTED) || (edgeType === EdgeType.NOT_ORIENTED)) {\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle);\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xTo, yTo\n            ],\n            labelPoints: [\n                (xFrom + xTo) / 2.,\n                (yFrom + yTo) / 2.\n            ]\n        };\n    } else if (edgeType === EdgeType.TWO_SIDE_ORIENTED) {\n        const angleOffset = 0.25;\n        const xFrom = vertexFrom.x + vertexFromOffset * Math.cos(angle + angleOffset);\n        const yFrom = vertexFrom.y - vertexFromOffset * Math.sin(angle + angleOffset);\n        const xTo = vertexTo.x - vertexToOffset * Math.cos(angle - angleOffset);\n        const yTo = vertexTo.y + vertexToOffset * Math.sin(angle - angleOffset);\n\n        const middlePointHeightCoefficient = 1. / 15.;\n        const xMiddle = (xFrom + xTo) / 2. - (yFrom - yTo) * middlePointHeightCoefficient;\n        const yMiddle = (yFrom + yTo) / 2. + (xFrom - xTo) * middlePointHeightCoefficient;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddle, yMiddle,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle,\n                yMiddle\n            ]\n        };\n    } else if (edgeType === EdgeType.LOOP) {\n        const xFrom = vertexFrom.x - vertexFromOffset;\n        const yFrom = vertexFrom.y;\n        const xTo = vertexFrom.x - vertexFromOffset;\n        const yTo = vertexFrom.y;\n\n        const anchorDx = 3. * vertexFromOffset / Math.sqrt(2.);\n        const anchorDy = 1.5 * vertexFromOffset / Math.sqrt(2.);\n        const xMiddleFirst = xFrom - anchorDx;\n        const yMiddleFirst = yFrom - anchorDy;\n        const xMiddle = xMiddleFirst - vertexFromOffset;\n        const yMiddle = yFrom;\n        const xMiddleSecond = xTo - anchorDx;\n        const yMiddleSecond = yTo + anchorDy;\n\n        return {\n            linePoints: [\n                xFrom, yFrom,\n                xMiddleFirst, yMiddleFirst,\n                xMiddle, yMiddle,\n                xMiddleSecond, yMiddleSecond,\n                xTo, yTo\n            ],\n            labelPoints: [\n                xMiddle, yMiddle\n            ]\n        };\n    }\n};","export function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { sleep } from \"../utils/sleep\";\n\nexport const ActionType = Object.freeze({\n    ADD_VERTEX: 'ADD_VERTEX',\n    ADD_EDGE: 'ADD_EDGE',\n    REMOVE_VERTEX: 'REMOVE_VERTEX',\n    REMOVE_EDGE: 'REMOVE_EDGE',\n    CHANGE_GRAPH_MODE: 'CHANGE_GRAPH_MODE',\n    SELECT_VERTEX: 'SELECT_VERTEX',\n    UNSELECT_VERTEX: 'UNSELECT_VERTEX',\n    SHOW_MESSAGE: 'SHOW_MESSAGE',\n    CLOSE_MESSAGE: 'CLOSE_MESSAGE',\n    UPDATE_VERTEX_POSITION: 'UPDATE_VERTEX_POSITION',\n    INVERT_ORIENTATION: 'INVERT_ORIENTATION',\n    ALGORITHM_STEP: 'ALGORITHM_STEP',\n    CLEAN_GRAPH_SELECTIONS: 'CLEAN_GRAPH_SELECTIONS',\n    SET_GRAPH: 'SET_GRAPH',\n    MOVE_CANVAS: 'MOVE_CANVAS',\n    GENERATE_GRAPH: 'GENERATE_GRAPH',\n    CLEAR_GRAPH: 'CLEAR_GRAPH'\n});\n\nexport const addVertex = (x, y, radius) => ({\n    type: ActionType.ADD_VERTEX,\n    x,\n    y,\n    radius\n});\n\nexport const addEdge = (vertexFrom, vertexTo, weight) => ({\n    type: ActionType.ADD_EDGE,\n    vertexFrom,\n    vertexTo,\n    weight\n});\n\nexport const removeVertex = (vertex) => ({\n    type: ActionType.REMOVE_VERTEX,\n    vertex\n});\n\nexport const removeEdge = (edge) => ({\n    type: ActionType.REMOVE_EDGE,\n    edge\n});\n\nexport const changeGraphMode = (graphMode) => ({\n    type: ActionType.CHANGE_GRAPH_MODE,\n    graphMode\n});\n\nexport const selectVertex = (vertex) => ({\n    type: ActionType.SELECT_VERTEX,\n    vertex\n});\n\nexport const unselectVertex = (vertex) => ({\n    type: ActionType.UNSELECT_VERTEX,\n    vertex\n});\n\nlet currentMessageId = 0;\n\nexport const showMessage = (message, isAlert = false) => async (dispatch) => {\n    const messageId = ++currentMessageId;\n    dispatch(showMessageConnector(message, isAlert));\n    await sleep(2000);\n    if (messageId === currentMessageId)\n        dispatch(closeMessage());\n};\n\nconst showMessageConnector = (message, isAlert = false) => ({\n    type: ActionType.SHOW_MESSAGE,\n    message,\n    isAlert\n});\n\nexport const closeMessage = () => ({\n    type: ActionType.CLOSE_MESSAGE\n});\n\nexport const updateVertexPosition = (vertexIndex, x, y) => ({\n    type: ActionType.UPDATE_VERTEX_POSITION,\n    vertexIndex,\n    x,\n    y\n});\n\nexport const invertOrientation = () => ({\n    type: ActionType.INVERT_ORIENTATION\n});\n\nexport const algorithmStep = (step) => ({\n    type: ActionType.ALGORITHM_STEP,\n    step\n});\n\nexport const cleanGraphSelections = () => ({\n    type: ActionType.CLEAN_GRAPH_SELECTIONS\n});\n\nexport const setGraph = (graph) => ({\n    type: ActionType.SET_GRAPH,\n    graph\n});\n\nexport const moveCanvas = (x, y) => ({\n    type: ActionType.MOVE_CANVAS,\n    x,\n    y\n});\n\nexport const generateGraph = () => ({\n    type: ActionType.GENERATE_GRAPH\n});\n\nexport const clearGraph = () => ({\n   type: ActionType.CLEAR_GRAPH\n});","export const ActionType = Object.freeze({\n    START_DIALOG_FOR_RESULT: 'START_DIALOG_FOR_RESULT',\n    CLOSE_DIALOG: 'CLOSE_DIALOG'\n});\n\nexport const startDialogForResult = (title, text, hint, inputPlaceholder, onSubmit, onCancel, pattern = \".*\") => ({\n    type: ActionType.START_DIALOG_FOR_RESULT,\n    title,\n    text,\n    hint,\n    inputPlaceholder,\n    onSubmit,\n    onCancel,\n    pattern\n});\n\nconst closeDialog = () => ({\n   type: ActionType.CLOSE_DIALOG\n});\n\nexport const cancelDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeDialog());\n};\n\nexport const submitDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeDialog());\n};","export const VertexAction = Object.freeze({\n    SELECT: 0,\n    UNSELECT: 1,\n    ENTER: 2,\n    EXIT: 3,\n    COLOR_1: 4,\n    COLOR_2: 5,\n    CLEAR_ALL_SELECTIONS: 6\n});\n\nexport const VertexHintAction = Object.freeze({\n    REMOVE: 0,\n    SET: 1,\n    HIGHLIGHT: 2\n});\n\nexport const EdgeAction = Object.freeze({\n    WALK: 0,\n    HIGHLIGHT: 1,\n    UNSELECT: 2,\n    SHADOW: 3,\n    CLEAR_ALL_SELECTIONS: 4,\n    FLIP: 5\n});\n\nexport const AlgorithmActionType = Object.freeze({\n    VERTEX_ACTION: 0,\n    EDGE_ACTION: 1,\n    VERTEX_HINT_ACTION: 2\n});\n\nexport const PreCallAction = Object.freeze({\n    NOTHING: 0,\n    SELECT_VERTEX: 1,\n    SELECT_EDGE: 2\n});\n\nexport const Criteria = Object.freeze({\n    NOTHING: 0,\n    WEIGHTED: 0b1,\n    CONNECTED: 0b10,\n    NOT_ORIENTED: 0b100,\n    ORIENTED: 0b1000,\n    ACYCLIC: 0b10000\n});\n\nexport const getOperationsCount = (trace) => {\n    let operationsCount = 0;\n    trace.forEach((t, i) => {\n        if ((i + 1 === trace.length) || !t.isChained)\n            ++operationsCount;\n    });\n    return operationsCount;\n};","import { Edge } from \"../components/Graph/Edge/Edge\";\n\nexport const edgesListToAdjacencyList = (vertices, edges) => {\n    const adjacencyList = {};\n    vertices.forEach(vertex => adjacencyList[vertex.name] = []);\n    edges.forEach(edge => {\n        adjacencyList[edge.from.name].push({name: edge.to.name, weight: edge.weight});\n        if (!edge.isOriented() && (edge.from !== edge.to))\n            adjacencyList[edge.to.name].push({name: edge.from.name, weight: edge.weight});\n    });\n    for (let [, verticesList] of Object.entries(adjacencyList))\n        verticesList = verticesList.sort((a, b) => a.name - b.name);\n    return adjacencyList;\n};\n\nexport const edgesListToReversedAdjacencyList = (vertices, edges) => {\n    return edgesListToAdjacencyList(vertices, edges.map(e =>\n        new Edge(e.to, e.from, e.isOriented(), e.weight))\n    );\n};\n\nexport const edgesListToAdjacencyMatrix = (vertices, edges) => {\n    const verticesNumbers = [];\n    vertices.forEach(v => verticesNumbers.push(v.name));\n    verticesNumbers.sort((a, b) => a - b);\n    const nameToIndex = {};\n    verticesNumbers.forEach((number, index) => nameToIndex[number] = index);\n\n    const adjacencyMatrix = new Array(vertices.length);\n    for (let i = 0; i < vertices.length; ++i) {\n        adjacencyMatrix[i] = new Array(vertices.length);\n        for (let j = 0; j < vertices.length; ++j)\n            adjacencyMatrix[i][j] = null;\n    }\n\n    let from, to, cell;\n    edges.forEach(e => {\n        from = nameToIndex[e.from.name];\n        to = nameToIndex[e.to.name];\n        cell = e.weight ? { weighted: true, weight: e.weight } : { weighted : false };\n        adjacencyMatrix[from][to] = cell;\n        if (!e.isOriented())\n            adjacencyMatrix[to][from] = cell;\n    });\n\n    return {adjacencyMatrix, verticesNumbers};\n};","import { algorithmStep, changeGraphMode, closeMessage, showMessage } from \"./index\";\nimport { GraphMode } from \"../components/Graph/Graph\";\nimport { Criteria, PreCallAction } from \"../algorithms/graph\";\nimport { sleep } from \"../utils/sleep\";\nimport { edgesListToAdjacencyList } from \"../utils/graphConverter\";\n\nexport const ActionType = Object.freeze({\n    PRE_CALL: 'PRE_CALL',\n    CALL: 'CALL',\n    START: 'START',\n    PAUSE: 'PAUSE',\n    POP_TRACE_STEP: 'POP_TRACE_STEP',\n    SET_ALGORITHM: 'SET_ALGORITHM',\n    SET_SPEED: 'SET_SPEED',\n    SET_IS_ONE_STEP: 'SET_IS_ONE_STEP',\n    CLEAR_TRACE: 'CLEAR_TRACE',\n    SHOW_STATISTICS: 'SHOW_STATISTICS',\n    CLEAR_STATISTICS: 'CLEAR_STATISTICS',\n    SHOW_ALGORITHM_INFO: 'SHOW_ALGORITHM_INFO',\n    CLEAR_ALGORITHM_INFO: 'CLEAR_ALGORITHM_INFO',\n    INVERT_ALGORITHM_INFO_COLLAPSED: 'INVERT_ALGORITHM_INFO_COLLAPSED'\n});\n\nexport const preCall = (isOneStep = false) => (dispatch, getState) => {\n    dispatch(setIsOneStep(isOneStep));\n\n    const graph = getState().graphReducer.graph;\n    const vertices = graph.vertices;\n    const edges = graph.edges;\n    const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n    const criteria = getState().algorithmReducer.algorithm.criteria;\n    if (criteria & Criteria.WEIGHTED) {\n        for (const edge of edges) {\n            if (!edge.isWeighted()) {\n                dispatch(showMessage(\"Граф должен быть взвешенным!\", true));\n                return;\n            }\n        }\n    }\n    if ((criteria & Criteria.NOT_ORIENTED) && graph.isOriented()) {\n        dispatch(showMessage(\"Граф должен быть неориентированным!\", true));\n        return;\n    }\n    if ((criteria & Criteria.ORIENTED) && !graph.isOriented()) {\n        dispatch(showMessage(\"Граф должен быть ориентированным!\", true));\n        return;\n    }\n    if ((criteria & Criteria.CONNECTED) && (vertices.length > 0)) {\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        const dfs = (v) => {\n            used[v] = true;\n            let to;\n            adjacencyList[v].forEach(toVertex => {\n                to = toVertex.name;\n                if (!used[to]) {\n                    dfs(to);\n                }\n            });\n        };\n        dfs(vertices[0].name);\n\n        for (const v of vertices) {\n            if (!used[v.name]) {\n                dispatch(showMessage(\"Граф должен быть связным!\", true));\n                return;\n            }\n        }\n    }\n    if ((criteria & Criteria.ACYCLIC) && (vertices.length > 0)) {\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = 0);\n        const dfs = (v) => {\n            used[v] = 1;\n            let to;\n            for (const toVertex of adjacencyList[v]) {\n                to = toVertex.name;\n                if (!used[to]) {\n                    if (!dfs(to))\n                        return false;\n                } else if (used[to] === 1) {\n                    return false;\n                }\n            }\n            used[v] = 2;\n            return true;\n        };\n        for (const {name: start} of vertices) {\n            if (!used[start] && !dfs(start)) {\n                dispatch(showMessage(\"Граф должен быть ацикличным!\", true));\n                return;\n            }\n        }\n    }\n\n    const preCall = getState().algorithmReducer.algorithm.preCall;\n    if (preCall === PreCallAction.SELECT_VERTEX) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX));\n        dispatch(showMessage(\"Выберите вершину\"));\n    } else if (preCall === PreCallAction.SELECT_EDGE) {\n        dispatch(changeGraphMode(GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE));\n        dispatch(showMessage(\"Выберите ребро\"));\n    } else if (preCall === PreCallAction.NOTHING) {\n        dispatch(call());\n    }\n};\n\nexport const setSpeed = (speed) => ({\n    type: ActionType.SET_SPEED,\n    speed\n});\n\nexport const setAlgorithm = (algorithm) => ({\n    type: ActionType.SET_ALGORITHM,\n    algorithm\n});\n\nconst setIsOneStep = (isOneStep) => ({\n    type: ActionType.SET_IS_ONE_STEP,\n    isOneStep\n});\n\nexport const call = (vertex, edge) => (dispatch, getState) => {\n    dispatch(closeMessage());\n    dispatch(changeGraphMode(GraphMode.DEFAULT));\n    const graph = getState().graphReducer.graph;\n    dispatch(callConnector(graph, vertex, edge));\n    dispatch(showAlgorithmInfo());\n\n    const isOneStep = getState().algorithmReducer.isOneStep;\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nexport const continueCall = (isOneStep = false) => (dispatch) => {\n    isOneStep ? dispatch(pause()) : dispatch(start());\n    dispatch(callSuccess(isOneStep));\n};\n\nconst start = () => ({\n    type: ActionType.START\n});\n\nexport const pause = () => ({\n    type: ActionType.PAUSE\n});\n\nconst callConnector = (graph, vertex, edge) => ({\n    type: ActionType.CALL,\n    graph,\n    vertex,\n    edge\n});\n\nlet currentVisualizationId = 0; // To prevent several visualization 'threads'\n\nconst callSuccess = (isOneStep = false) => async (dispatch, getState) => {\n    if (isOneStep) {\n        let traceStep = {isChained : true};\n        while ((getState().algorithmReducer.trace.length > 0) && traceStep.isChained) {\n            traceStep = getState().algorithmReducer.trace[0];\n            dispatch(algorithmStep(traceStep));\n            dispatch(popTraceStep());\n\n            if (getState().algorithmReducer.trace.length === 0) {\n                dispatch(showStatistics());\n            }\n        }\n        return;\n    }\n\n    const visualizationId = ++currentVisualizationId;\n    let traceStep;\n    while ((getState().algorithmReducer.trace.length > 0) && getState().algorithmReducer.isActive) {\n        traceStep = getState().algorithmReducer.trace[0];\n        dispatch(algorithmStep(traceStep));\n        dispatch(popTraceStep());\n        if ((getState().algorithmReducer.trace.length > 0) && !traceStep.isChained) {\n            await sleep(getState().algorithmReducer.speed);\n            if (currentVisualizationId !== visualizationId)\n                return;\n        }\n    }\n    if (getState().algorithmReducer.isActive) {\n        dispatch(pause());\n        dispatch(showStatistics());\n    }\n};\n\nconst popTraceStep = () => ({\n    type: ActionType.POP_TRACE_STEP\n});\n\nexport const clearTrace = () => ({\n    type: ActionType.CLEAR_TRACE\n});\n\nconst showStatistics = () => ({\n   type: ActionType.SHOW_STATISTICS\n});\n\nexport const clearStatistics = () => ({\n    type: ActionType.CLEAR_STATISTICS\n});\n\nconst showAlgorithmInfo = () => ({\n   type: ActionType.SHOW_ALGORITHM_INFO\n});\n\nexport const clearAlgorithmInfo = () => ({\n    type: ActionType.CLEAR_ALGORITHM_INFO\n});\n\nexport const invertAlgorithmInfoCollapsed = () => ({\n    type: ActionType.INVERT_ALGORITHM_INFO_COLLAPSED,\n});","import { Arrow, Group, Line } from \"react-konva\";\nimport React from \"react\";\nimport { EdgeLabel, getEdgePointsForType } from \"../Edge/Edge\";\n\nexport const VisualizationEdgeComponent = ({ edge, edgeType }) => {\n    const points = getEdgePointsForType(edge, edgeType);\n    const color = edge.color;\n    let edgeComponent;\n    if (edgeType === EdgeType.NOT_ORIENTED)\n        edgeComponent = (\n            <Line\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}/>\n        );\n    else\n        edgeComponent = (\n            <Arrow\n                points={points.linePoints}\n                stroke={color}\n                fill={color}\n                strokeWidth={3}\n                hitStrokeWidth={16}\n                tension={0.5}/>\n        );\n\n    if (edge.isWeighted())\n        return (\n            <Group>\n                {edgeComponent}\n                <EdgeLabel\n                    x={points.labelPoints[0]}\n                    y={points.labelPoints[1]}\n                    text={edge.weight}/>\n            </Group>\n        );\n    else\n        return (edgeComponent);\n};\n\nexport const EdgeType = Object.freeze({ ONE_SIDE_ORIENTED: 0, TWO_SIDE_ORIENTED: 1, NOT_ORIENTED: 2, LOOP: 3 });","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Graph.module.scss\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Vertex, VertexComponent } from \"./Vertex/Vertex\";\nimport { Edge, EdgeComponent, EdgeType } from \"./Edge/Edge\";\nimport { connect } from \"react-redux\";\nimport {\n    addEdge,\n    addVertex,\n    moveCanvas,\n    removeEdge,\n    removeVertex,\n    selectVertex,\n    unselectVertex,\n    updateVertexPosition\n} from \"../../actions\";\nimport { startDialogForResult } from \"../../actions/dialog\";\nimport { call } from \"../../actions/algorithm\";\nimport { VisualizationEdgeComponent } from \"./VisualizationEdge/VisualizationEdge\";\n\nconst cx = classnames.bind(styles);\n\nexport const vertexRadius = 20;\n\nconst mapStateToProps = state => ({\n    graph: state.graphReducer.graph,\n    graphMode: state.graphReducer.graphMode,\n    selectedVertex: state.graphReducer.selectedVertex,\n    canvasX: state.graphReducer.canvasX,\n    canvasY: state.graphReducer.canvasY\n});\n\nexport const GraphMode = Object.freeze({\n    DEFAULT: 0,\n    ADD_VERTEX: 1,\n    ADD_EDGE: 2,\n    REMOVE_VERTEX_OR_EDGE: 3,\n    ALGORITHM_PRE_CALL_SELECT_VERTEX: 4,\n    ALGORITHM_PRE_CALL_SELECT_EDGE: 5\n});\n\nexport class Graph {\n    constructor(oriented, vertices = null, edges = null) {\n        if (!vertices || !Array.isArray(vertices) || !edges || !Array.isArray(edges)) {\n            this._vertices = [];\n            this._edges = [];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = 0;\n        } else {\n            for (let i = 0; i < vertices.length; ++i) {\n                if ((vertices[i].name < 0) || (vertices[i].name > 999))\n                    throw new Error(\"Invalid vertex name\");\n\n                for (let j = 0; j < vertices.length; ++j) {\n                    if ((i !== j) && (vertices[i].name === vertices[j].name))\n                        throw new Error(\"Two vertices with equal names\");\n                }\n            }\n\n            for (let i = 0; i < edges.length; ++i) {\n                if (edges[i].weight && ((edges[i].weight < 0) || (edges[i].weight > 99)))\n                    throw new Error(\"Invalid edge weight\");\n                if (vertices.findIndex(v => v.name === edges[i].from.name) === -1)\n                    throw new Error(\"Invalid vertex 'from'\");\n                if (vertices.findIndex(v => v.name === edges[i].to.name) === -1)\n                    throw new Error(\"Invalid vertex 'to'\");\n\n                for (let j = 0; j < edges.length; ++j) {\n                    if (i !== j) {\n                        if (oriented) {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name))\n                                throw new Error(\"Multiedges aren't supported\");\n                        } else {\n                            if ((edges[i].from.name === edges[j].from.name) && (edges[i].to.name === edges[j].to.name)\n                                || (edges[i].to.name === edges[j].from.name) && (edges[i].from.name === edges[j].to.name)) {\n                                throw new Error(\"Multiedges aren't supported\");\n                            }\n                        }\n                    }\n                }\n            }\n\n            this._vertices = [...vertices];\n            this._edges = [...edges];\n            this._visualizationEdges = [];\n            this._oriented = oriented;\n            this._currentName = Math.max(...vertices.map(v => v.name)) + 1;\n        }\n    }\n\n    addVertex(x, y, radius) {\n        const vertex = new Vertex(x, y, radius, this._currentName++);\n        this._vertices.push(vertex);\n        return vertex;\n    }\n\n    removeVertex(vertex) {\n        const index = this._vertices.findIndex(v => v === vertex);\n        if (index !== -1) {\n            this._vertices.splice(index, 1);\n            this._edges = this._edges.filter(edge => (edge.from.name !== vertex.name) && (edge.to.name !== vertex.name));\n        }\n    }\n\n    findEdge(vertexFrom, vertexTo) {\n        if (this._oriented)\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._edges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addEdge(vertexFrom, vertexTo, weight) {\n        const i = this.findEdge(vertexFrom, vertexTo);\n        if (i === -1) {\n            const edge = new Edge(vertexFrom, vertexTo, this._oriented, weight);\n            this._edges.push(edge);\n            return edge;\n        }\n        else {\n            this._edges[i].weight = weight;\n        }\n    }\n\n    removeEdge(edge) {\n        this._edges = this._edges.filter(e => e !== edge);\n    }\n\n    removeAllEdges() {\n        this._edges = [];\n    }\n\n    invertOrientation() {\n        this._oriented = !this._oriented;\n        if (this._oriented) {\n            this._edges.forEach(edge => edge.invertOrientation());\n            const oldEdges = [...this._edges];\n            oldEdges.forEach(e => this.addEdge(e.to, e.from, e.weight));\n        } else {\n            const newEdges = [];\n            this._edges.forEach(edge => {\n                if (newEdges.findIndex(e => (e.from === edge.from) && (e.to === edge.to)\n                    || (e.to === edge.from) && (e.from === edge.to)) === -1) {\n\n                    edge.invertOrientation();\n                    newEdges.push(edge);\n                }\n            });\n            this._edges = newEdges;\n        }\n    }\n\n    findVisualizationEdge(vertexFrom, vertexTo, oriented) {\n        if (oriented)\n            return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo));\n        else\n            return this._visualizationEdges.findIndex(e => (e.from === vertexFrom) && (e.to === vertexTo)\n                || (e.to === vertexFrom) && (e.from === vertexTo));\n    }\n\n    addVisualizationEdge(vertexFrom, vertexTo, oriented, weight) {\n        this.removeVisualizationEdgeByVertices(vertexFrom, vertexTo, oriented);\n        const edge = new Edge(vertexFrom, vertexTo, oriented, weight);\n        this._visualizationEdges.push(edge);\n        return edge;\n    }\n\n    removeVisualizationEdge(edge) {\n        this._visualizationEdges = this._visualizationEdges.filter(e => e !== edge);\n    }\n\n    removeVisualizationEdgeByVertices(vertexFrom, vertexTo, oriented) {\n        if (oriented)\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                (e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)\n            );\n        else\n            this._visualizationEdges = this._visualizationEdges.filter(e =>\n                ((e.from.name !== vertexFrom.name) || (e.to.name !== vertexTo.name)) &&\n                ((e.to.name !== vertexFrom.name) || (e.from.name !== vertexTo.name))\n            );\n    }\n\n    clearGraph() {\n        this._vertices = [];\n        this._visualizationEdges = [];\n        this._edges = [];\n        this._currentName = 0;\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    get visualizationEdges() {\n        return this._visualizationEdges;\n    }\n\n    set visualizationEdges(edges) {\n        this._visualizationEdges = edges;\n    }\n\n    isOriented() {\n        return this._oriented;\n    }\n}\n\nclass GraphComponent extends React.Component {\n    state = {\n        draggedVertex: undefined,\n        windowWidth: 700,\n        windowHeight: 700\n    };\n\n    componentDidMount() {\n        const handleResize = () => {\n            this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n        };\n        window.onresize = handleResize;\n        handleResize();\n    }\n\n    findIndexOfVertex = (vertex) => {\n        return this.props.graph.vertices.findIndex(v => v === vertex);\n    };\n\n    handleVertexDragStart = (e, vertex) => {\n        e.cancelBubble = true;\n\n        const i = this.findIndexOfVertex(vertex);\n        this.setState({ draggedVertex: (i !== -1 ? i : undefined) });\n    };\n\n    updateDraggedVertex = (x, y) => {\n        const vertex = this.state.draggedVertex;\n        if (vertex !== undefined)\n            this.props.updateVertexPosition(vertex, x, y);\n    };\n\n    handleVertexDragMove = e => {\n        e.cancelBubble = true;\n\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n    };\n\n    handleVertexDragEnd = (e, vertex) => {\n        e.cancelBubble = true;\n\n        this.updateDraggedVertex(e.target.x(), e.target.y());\n        this.setState({ draggedVertex: undefined });\n    };\n\n    getEdgeType = edge => {\n        const vertexFrom = edge.from, vertexTo = edge.to;\n\n        if (vertexTo === vertexFrom)\n            return EdgeType.LOOP;\n        else if (!edge.isOriented())\n            return EdgeType.NOT_ORIENTED;\n        else if ((this.props.graph.edges.findIndex(e => (e.from === vertexTo) && (e.to === vertexFrom)) !== -1)\n                && (this.props.graph.edges.findIndex(e => (e.to === vertexTo) && (e.from === vertexFrom)) !== -1))\n            return EdgeType.TWO_SIDE_ORIENTED;\n        else\n            return EdgeType.ONE_SIDE_ORIENTED;\n    };\n\n    handleCanvasClick = e => {\n        const x = e.evt.clientX - this.props.canvasX, y = e.evt.clientY - this.props.canvasY;\n\n        if (this.props.graphMode === GraphMode.ADD_VERTEX)\n            this.props.addVertex(x, y, vertexRadius);\n        else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            if (this.props.selectedVertex !== undefined) {\n                this.props.unselectVertex();\n            }\n        }\n    };\n\n    handleVertexClick = (e, vertex) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeVertex(vertex);\n        } else if (this.props.graphMode === GraphMode.ADD_EDGE) {\n            e.cancelBubble = true;\n\n            if (this.props.selectedVertex === undefined) {\n                this.props.selectVertex(vertex);\n            }\n            else {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    `(${this.props.selectedVertex.name} ${this.props.graph.isOriented() ? '->' : '<->'} ${vertex.name})`,\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        else\n                            value = Number(value);\n                        this.props.addEdge(this.props.selectedVertex, vertex, value);\n                        this.props.unselectVertex();\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_VERTEX) {\n            e.cancelBubble = true;\n\n            this.props.callAlgorithm(vertex, null);\n        }\n    };\n\n    handleEdgeClick = (e, edge) => {\n        if (this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE) {\n            e.cancelBubble = true;\n            this.props.removeEdge(edge);\n        } else if (this.props.graphMode === GraphMode.ALGORITHM_PRE_CALL_SELECT_EDGE) {\n            e.cancelBubble = true;\n            this.props.callAlgorithm(null, edge);\n        }\n    };\n\n    handleCanvasDragEnd = (e) => {\n        this.props.moveCanvas(e.target.x(), e.target.y());\n    };\n\n    render() {\n        return (\n            <Stage\n                x={this.props.canvasX}\n                y={this.props.canvasY}\n                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                onDragEnd={this.handleCanvasDragEnd}\n                onClick={this.handleCanvasClick}\n                width={this.state.windowWidth}\n                height={this.state.windowHeight}>\n                <Layer>\n                    <Rect fill={'white'} x={0} y={0} width={this.state.windowWidth} height={this.state.windowHeight}/>\n                    {\n                        this.props.graph.edges.map((edge, index) =>\n                            <EdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}\n                                onClick={(e) => this.handleEdgeClick(e, edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.visualizationEdges.map((edge, index) =>\n                            <VisualizationEdgeComponent\n                                key={index}\n                                vertexFrom={edge.from}\n                                vertexTo={edge.to}\n                                edge={edge}\n                                edgeType={this.getEdgeType(edge)}/>\n                        )\n                    }\n                    {\n                        this.props.graph.vertices.map((vertex, index) =>\n                            <VertexComponent\n                                key={index}\n                                vertex={vertex}\n                                draggable={this.props.graphMode === GraphMode.DEFAULT}\n                                onClick={(e) => this.handleVertexClick(e, vertex)}\n                                onDragStart={e => this.handleVertexDragStart(e, vertex)}\n                                onDragEnd={e => this.handleVertexDragEnd(e, vertex)}\n                                onDragMove={e => this.handleVertexDragMove(e, vertex)}/>\n                        )\n                    }\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    addVertex: (x, y, radius) => dispatch(addVertex(x, y, radius)),\n    addEdge: (vertexFrom, vertexTo, weight) => dispatch(addEdge(vertexFrom, vertexTo, weight)),\n    removeVertex: (vertex) => dispatch(removeVertex(vertex)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    updateVertexPosition: (vertexIndex, x, y) => dispatch(updateVertexPosition(vertexIndex, x, y)),\n    selectVertex: (vertex) => dispatch(selectVertex(vertex)),\n    unselectVertex: (vertex) => dispatch(unselectVertex(vertex)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern)),\n    callAlgorithm: (vertex, edge) => dispatch(call(vertex, edge)),\n    moveCanvas: (x, y) => dispatch(moveCanvas(x, y))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Buttons.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const ButtonComponent = ({ text, type = \"button\", onClick, activated, className }) => {\n    return (\n        <button type={type} className={cx(\"button\", className, {[`activated`]: activated})} onClick={onClick}>\n            {text}\n        </button>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./Sliders.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const SliderComponent = ({ label, value, min, max, onChange }) => {\n    return (\n        <div className={cx(\"slider-wrapper\")}>\n            <div className={cx(\"slider-label\")}>{label}</div>\n            <input\n                type={\"range\"}\n                className={cx(\"slider\")}\n                value={value}\n                min={min}\n                max={max}\n                onChange={onChange}/>\n        </div>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./DropDownLists.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const DropDownList = ({ items, onChange }) => {\n    return (\n        <select className={cx(\"drop-down-list\")} onChange={onChange}>\n            {items.map((item, index) => <option key={index} value={index}>{item}</option>)}\n        </select>\n    );\n};","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./ToggleSwitches.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const RoundedToggleSwitch = ({ text, onChange, className, isChecked }) => {\n    return (\n        <div className={cx(\"switch-round-wrapper\", className)}>\n            <label className={cx(\"switch-round\")}>\n                <input type={\"checkbox\"} onChange={onChange} checked={isChecked}/>\n                <span className={cx(\"slider\")}/>\n            </label>\n            <span className={cx(\"text\")}>{text}</span>\n        </div>\n    );\n};","export function sizeof(object) {\n    let objectList = [],\n        stack = [object],\n        bytes = 0,\n        value,\n        i;\n\n    while (stack.length) {\n        value = stack.pop();\n\n        if (typeof value === 'boolean') {\n            bytes += 4;\n        } else if (typeof value === 'string') {\n            bytes += value.length * 2;\n        } else if (typeof value === 'number') {\n            bytes += 8;\n        } else if (typeof value === 'object'\n            && objectList.indexOf(value) === -1) {\n            objectList.push(value);\n\n            for (i in value) {\n                if (value.hasOwnProperty(i)) {\n                    stack.push(value[i]);\n                }\n            }\n        }\n    }\n    return bytes;\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet used = {};\nlet trace = [];\nlet memoryUsed = 0;\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to = 0;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            dfs(to, adjacencyList);\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    memoryUsed += sizeof(to);\n};\n\nexport default {\n    name: \"Поиск в глубину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        dfs(start.name, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(used) +\n            sizeof(adjacencyList);\n\n        return {\n            trace,\n            statistics: [\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function dfs(v):\n      отметить v как посещённую\n\n      для всех рёбер (v, u):\n          если u не посещена:\n              dfs(u)\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Красные рёбра - рёбра дерева обхода</li>\n                </ul>\n            ]\n        };\n    }\n};","export class Queue {\n    constructor() {\n        this._queue = [];\n    }\n\n    get length() {\n        return this._queue.length;\n    }\n\n    isEmpty() {\n        return this._queue.length === 0;\n    }\n\n    push(value) {\n        this._queue.push(value);\n    }\n\n    pop() {\n        // TODO: O(N) -> O(1)\n        return this._queue.shift();\n    }\n\n    peek() {\n        return this._queue[0];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet memoryUsed = 0;\n\nconst bfs = (start, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex = 0, to = 0;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n    memoryUsed += sizeof(queue) + sizeof(vertex) + sizeof(to);\n};\n\nexport default {\n    name: \"Поиск в ширину\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        bfs(start.name, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(used) +\n            sizeof(adjacencyList);\n\n        return {\n            trace,\n            statistics: [\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function bfs(start):\n      добавить вершину start в очередь\n\n      пока очередь не пуста:\n          достать вершину v из очереди\n          для всех рёбер (v, u):\n              если вершина u не обработана и не в очереди:\n                  добавить u в очередь\n          отметить v как обработанную\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - добавленные в очередь</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Жёлтая вершина - обрабатываемая</li>\n                    <li>Красные рёбра - рёбра дерева обхода</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet memoryUsed = 0;\n\nconst dijkstra = (start, vertices, adjacencyList, used, trace) => {\n    const d = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n\n        memoryUsed += sizeof(v);\n\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (d[v] + weight < d[to]) {\n                d[to] = d[v] + weight;\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: true, weight, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n    memoryUsed += sizeof(d);\n};\n\nexport default {\n    name: \"Поиск кратчайшего пути (Алгоритм Дейкстры)\",\n\n    preCall: PreCallAction.SELECT_VERTEX,\n\n    criteria: Criteria.WEIGHTED,\n\n    call: (vertices, edges, start) => {\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        dijkstra(start.name, vertices.map(v => v.name), adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(used) +\n            sizeof(adjacencyList);\n\n        return {\n            trace,\n            statistics: [\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V|^2 + |E|)\n                    </li>\n                    <li>\n                        Список смежности + двоичная куча: O((|V| + |E|) * log|V|)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function dijkstra(start):\n      d[v] - кратчайшее расстояние от start до v\n\n      для всех вершин v кроме start:\n          d[v] = ∞\n      d[start] = 0\n\n      пока d[start] != ∞ и start != -1:\n          для всех рёбер (start, u):\n              d[u] = min(d[u], d[start] + вес ребра (start, u))\n\n          отметить start как посещённую\n\n          start = непосещённая вершина v с минимальным d[v]\n          если нет непосещённых вершин - start = -1\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Жёлтая вершина - обрабатываемая</li>\n                    <li>Красные рёбра - рёбра кратчайшего пути</li>\n                    <li>Красные числа - текущее кратчайшее расстояние</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet memoryUsed = 0;\n\nconst prim = (start, vertices, edges, adjacencyList, used, trace) => {\n    edges.forEach(e => {\n        trace.push({ from: e.from.name, to: e.to.name, oriented: false, weight: e.weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    });\n\n    const d = {};\n    const mst = {};\n    vertices.forEach(v => {\n        if (v === start)\n            return;\n        d[v] = Number.MAX_SAFE_INTEGER;\n        trace.push({ vertex: v, hint: \"∞\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        mst[v] = null;\n    });\n    d[start] = 0;\n    trace.push({ vertex: start, hint: \"0\", action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (let i in vertices) {\n        let v = -1;\n\n        memoryUsed += sizeof(v);\n\n        vertices.forEach(j => {\n            if (!used[j] && ((v === -1) || (d[j] < d[v])))\n                v = j;\n        });\n        if (d[v] === Number.MAX_SAFE_INTEGER)\n            break;\n\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        for (let {name: to, weight} of adjacencyList[v]) {\n            if (used[to])\n                continue;\n            weight = Number(weight);\n\n            trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (weight < d[to]) {\n                if (mst[to] !== null) {\n                    trace.push({ from: mst[to], to, oriented: false, weight: d[to], action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: false });\n                }\n                d[to] = weight;\n                mst[to] = v;\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                trace.push({ vertex: to, hint: d[to], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ from: v, to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n    let mstWeight = 0;\n    for (const v in d)\n        mstWeight += d[v];\n\n    memoryUsed += sizeof(d) + sizeof(mst);\n\n    return mstWeight;\n};\n\nexport default {\n    name: \"Поиск минимального каркаса (Алгоритм Прима)\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        const start = vertices[Math.floor(Math.random() * vertices.length)];\n        const mstWeight = prim(start.name, vertices.map(v => v.name), edges, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(used) +\n            sizeof(adjacencyList) +\n            sizeof(start) +\n            sizeof(mstWeight);\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V|^2 + |E|)\n                    </li>\n                    <li>\n                        Список смежности + двоичная куча: O((|V| + |E|) * log|V|)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function mst():\n      выбрать случайную вершину start\n\n      d[v] - вес ребра, по которому пришли в вершину v\n      для всех вершин v кроме start:\n          d[v] = ∞\n      d[start] = 0\n\n      пока есть непосещённые вершины:\n          для всех рёбер (start, u):\n              если u не посещена и вес ребра (start, u) < d[u]:\n                  если d[u] != ∞:\n                      исключить ребро, соединённое с u из MST\n                  добавить ребро (start, u) в MST\n                  d[u] = вес (start, u)\n\n          отметить start как посещённую\n\n          start = непосещённая вершина v с минимальным d[v]\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не добавленные в каркас</li>\n                    <li>Жёлтые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - добавленные в каркас</li>\n                    <li>Жёлтые рёбра - просматриваемые</li>\n                    <li>Красные рёбра - рёбра каркаса</li>\n                    <li>Числа - значения d[v] для вершины (см. псевдокод)</li>\n                </ul>\n            ]\n        };\n    }\n};","export class DSU {\n    constructor() {\n        this.parent = {};\n        this.size = {};\n    }\n\n    makeSet(x) {\n        this.parent[x] = x;\n        this.size[x] = 1;\n    }\n\n    find(x) {\n        if (x === this.parent[x])\n            return x;\n        this.parent[x] = this.find(this.parent[x]);\n        return this.parent[x];\n    }\n\n    union(x, y) {\n        x = this.find(x);\n        y = this.find(y);\n        if (x !== y)\n            if (this.size[x] < this.size[y])\n                [x, y] = [y, x];\n            this.parent[y] = x;\n            this.size[x] += this.size[y];\n    }\n}","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction } from \"./index\";\nimport { DSU } from \"../../utils/dsu\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet memoryUsed = 0;\n\nconst kruskal = (vertices, edges, trace) => {\n    const dsu = new DSU();\n    vertices.forEach(v => dsu.makeSet(v.name));\n    edges.sort((a, b) => a.weight - b.weight);\n\n    edges.forEach(e => {\n        trace.push({ from: e.from.name, to: e.to.name, oriented: false, weight: e.weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    });\n\n    let mstWeight = 0;\n    let from = 0, to = 0, weight = 0;\n    edges.forEach(e => {\n        from = e.from.name;\n        to = e.to.name;\n        weight = Number(e.weight);\n        trace.push({ from, to, oriented: false, weight, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n        if (dsu.find(from) !== dsu.find(to)) {\n            mstWeight += weight;\n            dsu.union(from, to);\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else {\n            trace.push({ from, to, oriented: false, weight, action: EdgeAction.SHADOW, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    });\n\n    memoryUsed +=\n        sizeof(dsu) +\n        sizeof(mstWeight) +\n        sizeof(from) +\n        sizeof(to) +\n        sizeof(weight);\n\n    return mstWeight;\n};\n\nexport default {\n    name: \"Поиск минимального каркаса (Алгоритм Краскала)\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.CONNECTED | Criteria.WEIGHTED | Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        let trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        const mstWeight = kruskal(vertices, edges, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        return {\n            trace,\n            statistics: [\n                `Вес минимального каркаса: ${mstWeight}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список рёбер + СНМ: O(|E| * log|E|)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function mst():\n      отсортировать рёбра по возрастанию их веса\n\n      для каждого ребра E из списка:\n          если добавление ребра E в MST не образует цикл:\n              добавить E в MST\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Жёлтые рёбра - просматриваемые</li>\n                    <li>Красные рёбра - рёбра каркаса</li>\n                </ul>\n            ]\n        };\n    }\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet memoryUsed = 0;\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    used[start] = true;\n    const queue = new Queue();\n    queue.push(start);\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let vertex = 0, to = 0;\n    while (!queue.isEmpty()) {\n        vertex = queue.pop();\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to: to, oriented: false, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n                used[to] = true;\n                queue.push(to);\n                trace.push({ vertex: to, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        });\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n\n    memoryUsed += sizeof(queue) + sizeof(vertex) + sizeof(to);\n    for (const vertex of vertices) {\n        if (!used[vertex.name])\n            return false;\n    }\n    return true;\n};\n\nexport default {\n    name: \"Проверка на связность\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        let used = {};\n        vertices.forEach(vertex => used[vertex.name] = false);\n        let trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        const start = vertices[Math.floor(Math.random() * vertices.length)];\n        const isConnected = bfs(start.name, vertices, adjacencyList, used, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(isConnected) +\n            sizeof(used) +\n            sizeof(adjacencyList);\n\n        return {\n            trace,\n            statistics: [\n                `Граф ${isConnected ? \"связный\" : \"несвязный\"}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function check():\n      запустить обход в глубину/ширину от случайной вершины\n      если хотя бы одна вершина осталась непосещённой:\n          граф несвязный\n      иначе:\n          граф связный\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - добавленные в очередь</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Жёлтая вершина - обрабатываемая</li>\n                    <li>Красные рёбра - рёбра дерева обхода</li>\n                </ul>\n            ]\n        };\n    }\n};","import { AlgorithmActionType, Criteria, EdgeAction, getOperationsCount, PreCallAction, VertexAction } from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet used = {};\nlet trace = [];\nlet memoryUsed = 0;\n\nconst dfs = (vertex, adjacencyList, parent = -1, color = 1) => {\n    used[vertex] = color;\n    trace.push({ vertex, action: color === 1 ? VertexAction.COLOR_1 : VertexAction.COLOR_2, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to;\n    for (const toVertex of adjacencyList[vertex]) {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (!dfs(to, adjacencyList, vertex, 3 - color))\n                return false;\n            trace.push({ from: to, to: vertex, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n        } else if ((parent !== to) && (used[to] === color)) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            return false;\n        }\n    }\n    return true;\n};\n\nexport default {\n    name: \"Проверка на двудольность\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        used = {};\n        vertices.forEach(vertex => used[vertex.name] = 0);\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        let isBipartite = true;\n        for (const {name: vertex} of vertices) {\n            if (!used[vertex]) {\n                isBipartite &= dfs(vertex, adjacencyList);\n                if (!isBipartite)\n                    break;\n            }\n        }\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(isBipartite) +\n            sizeof(used) +\n            sizeof(adjacencyList);\n\n        return {\n            trace,\n            statistics: [\n                `Граф ${isBipartite ? \"двудольный\" : \"недвудольный\"}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function dfs(v, color):\n      покрасить v в цвет color\n\n      для всех рёбер (v, u):\n          если u не посещена:\n              dfs(u, цвет обратный color)\n          иначе:\n              если цвет u равен color:\n                  граф недвудольный\n\n  для всех непокрашенных вершин v:\n      dfs(v, случайный цвет)\n\n  если удалось покрасить все вершины:\n      граф двудольный\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Красные и синие вершины - обработанные</li>\n                    <li>Красные рёбра - рёбра дерева обхода</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet memoryUsed = 0;\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    const d = {}, p = {};\n    vertices.forEach(vertex => {\n        d[vertex.name] = Number.MAX_SAFE_INTEGER;\n        p[vertex.name] = -1;\n    });\n    used[start] = true;\n    const queue = new Queue();\n    queue.push({ vertex: start, level: 0 });\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    let vertex = 0, level = 0, to = 0;\n    while (!queue.isEmpty()) {\n        vertex = queue.peek().vertex;\n        level = queue.pop().level;\n        d[vertex] = level;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                used[to] = true;\n                queue.push({ vertex: to, level: level + 1 });\n                p[to] = vertex;\n            }\n        });\n    }\n\n    while (p[vertex] !== -1) {\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ from: p[vertex], to: vertex, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        vertex = p[vertex];\n    }\n    trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex: start, hint: level, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    memoryUsed +=\n        sizeof(d) +\n        sizeof(p) +\n        sizeof(queue) +\n        sizeof(vertex) +\n        sizeof(level) +\n        sizeof(to);\n\n    return level;\n};\n\nconst findRadius = (vertices, edges, adjacencyList, trace) => {\n    let used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let eccentricities = {};\n    let radius = Number.MAX_SAFE_INTEGER;\n    for (const {name: start} of vertices) {\n        vertices.forEach(vertex => used[vertex.name] = false);\n        eccentricities[start] = bfs(start, vertices, adjacencyList, used, trace);\n        trace.push({ vertex: start, hint: eccentricities[start], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n\n        trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n\n        radius = Math.min(radius, eccentricities[start]);\n    }\n\n    for (const {name: v} of vertices) {\n        if (eccentricities[v] === radius)\n            trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    }\n\n    memoryUsed +=\n        sizeof(used) +\n        sizeof(eccentricities) +\n        sizeof(radius);\n\n    return radius;\n};\n\nexport default {\n    name: \"Радиус и центр графа\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED | Criteria.CONNECTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const trace = [];\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        const radius = findRadius(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(adjacencyList) +\n            sizeof(radius);\n\n        return {\n            trace,\n            statistics: [\n                `Радиус графа: ${radius}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| * (|V| + |E|))\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^3)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function radius():\n      для всех вершин v:\n          запустить обход в ширину от вершины v\n          u - максимально удалённая от v (по кол-ву рёбер) вершина\n          эксцентриситет v = расстояние от v до u\n\n      радиус - минимальный из эксцентриситетов\n      центр графа - вершины, для которых эксцентриситет равен радиусу\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Жёлтые ребра и вершины (во время работы) - путь с макс. расстоянием</li>\n                    <li>Числа - эксцентриситеты вершин</li>\n                    <li>Жёлтые вершины (в конце) - центр графа</li>\n                </ul>,\n                \"! Расстояние вычисляется по кол-ву рёбер\"\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { Queue } from \"../../utils/queue\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet memoryUsed = 0;\n\nconst bfs = (start, vertices, adjacencyList, used, trace) => {\n    const d = {}, p = {};\n    vertices.forEach(vertex => {\n        d[vertex.name] = Number.MAX_SAFE_INTEGER;\n        p[vertex.name] = -1;\n    });\n    used[start] = true;\n    const queue = new Queue();\n    queue.push({ vertex: start, level: 0 });\n    trace.push({ vertex: start, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    let vertex = 0, level = 0, to = 0;\n    while (!queue.isEmpty()) {\n        vertex = queue.peek().vertex;\n        level = queue.pop().level;\n        d[vertex] = level;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                used[to] = true;\n                queue.push({ vertex: to, level: level + 1 });\n                p[to] = vertex;\n            }\n        });\n    }\n\n    while (p[vertex] !== -1) {\n        trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ from: p[vertex], to: vertex, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        vertex = p[vertex];\n    }\n    trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex: start, hint: level, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    memoryUsed +=\n        sizeof(queue) +\n        sizeof(d) +\n        sizeof(p) +\n        sizeof(vertex) +\n        sizeof(level) +\n        sizeof(to);\n\n    return level;\n};\n\nconst findDiameter = (vertices, edges, adjacencyList, trace) => {\n    let used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let eccentricities = {};\n    let diameter = 0;\n    for (const {name: start} of vertices) {\n        vertices.forEach(vertex => used[vertex.name] = false);\n        eccentricities[start] = bfs(start, vertices, adjacencyList, used, trace);\n        trace.push({ vertex: start, hint: eccentricities[start], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n\n        trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n\n        diameter = Math.max(diameter, eccentricities[start]);\n    }\n\n    for (const {name: v} of vertices) {\n        if (eccentricities[v] === diameter)\n            trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    }\n\n    memoryUsed +=\n        sizeof(used) +\n        sizeof(eccentricities) +\n        sizeof(diameter);\n\n    return diameter;\n};\n\nexport default {\n    name: \"Диаметр и периферийные вершины графа\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED | Criteria.CONNECTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const trace = [];\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        const diameter = findDiameter(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(adjacencyList) +\n            sizeof(diameter);\n\n        return {\n            trace,\n            statistics: [\n                `Диаметр графа: ${diameter}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| * (|V| + |E|))\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^3)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function diameter():\n      для всех вершин v:\n          запустить обход в ширину от вершины v\n          u - максимально удалённая от v (по кол-ву рёбер) вершина\n          эксцентриситет v = расстояние от v до u\n\n      диаметр - максимальный из эксцентриситетов\n      периферийные вершины - вершины, для которых эксцентриситет равен диаметру\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Жёлтые ребра и вершины (во время работы) - путь с макс. расстоянием</li>\n                    <li>Числа - эксцентриситеты вершин</li>\n                    <li>Жёлтые вершины (в конце) - периферийные вершины графа</li>\n                </ul>,\n                \"! Расстояние вычисляется по кол-ву рёбер\"\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet used = {};\nlet trace = [];\nlet topSortList = [];\nlet addedVertices = 0;\nlet sortedVertices = 0;\nlet memoryUsed = 0;\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to = 0;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            dfs(to, adjacencyList);\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        }\n    });\n    trace.push({ vertex, hint: addedVertices++, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    topSortList.push(vertex);\n\n    memoryUsed += sizeof(to);\n};\n\nconst topSort = (vertices, edges, adjacencyList, trace) => {\n    used = {};\n    topSortList = [];\n    vertices.forEach(vertex => used[vertex.name] = false);\n    addedVertices = 0;\n    sortedVertices = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start]) {\n            dfs(start, adjacencyList);\n        }\n    }\n\n    for (const v of topSortList.reverse()) {\n        trace.push({ vertex: v, hint: sortedVertices++, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        trace.push({ vertex: v, action: VertexAction.UNSELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nexport default {\n    name: \"Топологическая сортировка\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.ORIENTED | Criteria.ACYCLIC,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        topSort(vertices, edges, adjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(adjacencyList) +\n            sizeof(used) +\n            sizeof(topSortList) +\n            sizeof(addedVertices) +\n            sizeof(sortedVertices);\n\n        return {\n            trace,\n            statistics: [\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function dfs(v):\n      отметить v как посещённую\n\n      для всех рёбер (v, u):\n          если u не посещена:\n              dfs(u)\n      добавить v в конец списка sorted\n\n  function topological_sort():\n      sorted[] - упорядоченные по времени выхода вершины\n\n      для всех непосещённых вершин v:\n          dfs(v)\n\n      перевернуть sorted\n\n      переименовать:\n          вершину sorted[0] на 0\n          вершину sorted[1] на 1\n          ...\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Красные рёбра - рёбра обхода</li>\n                    <li>Синие числа - время выхода</li>\n                    <li>Красные числа - новые номера вершин</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet used = {};\nlet trace = [];\nlet timer = 0;\nlet tin = {}, tout = {};\nlet countBridges = 0;\nlet memoryUsed = 0;\n\nconst dfs = (vertex, adjacencyList, parent = -1) => {\n    used[vertex] = true;\n    tin[vertex] = tout[vertex] = timer++;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n\n    for (const {name: to} of adjacencyList[vertex]) {\n        if (to === parent)\n            continue;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList, vertex);\n            tout[vertex] = Math.min(tout[vertex], tout[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if (tout[to] > tin[vertex]) {\n                ++countBridges;\n                trace.push({ from: vertex, to, oriented: false, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        } else {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            tout[vertex] = Math.min(tout[vertex], tin[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    }\n\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n};\n\nconst findBridges = (vertices, edges, adjacencyList) => {\n    used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n    timer = 0;\n    tin = {};\n    tout = {};\n    countBridges = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start])\n            dfs(start, adjacencyList);\n    }\n};\n\nexport default {\n    name: \"Поиск мостов\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        findBridges(vertices, edges, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(used) +\n            sizeof(adjacencyList) +\n            sizeof(timer) +\n            sizeof(tin) +\n            sizeof(tout) +\n            sizeof(countBridges);\n\n        return {\n            trace,\n            statistics: [\n                `Количество мостов: ${countBridges}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function dfs(v):\n      отметить v как посещённую\n      tin[v] = fup[v] = timer\n      timer++\n\n      для всех рёбер (v, u):\n          если u не посещена:\n              dfs(u)\n              fup[v] = min(fup[v], fup[u])\n              если fup[u] > tin[v]:\n                  ребро (v, u) - мост\n          иначе:\n              fup[v] = min(fup[v], tin[u])\n\n  timer - счётчик времени\n  tin[] - время входа в вершину\n  fup[v] - min(tin[v], fup[u], tin[p]), \n           где ребро (v, u) - прямое, (v, p) - обратное\n\n  для всех непосещённых вершин v:\n      dfs(v)\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Красные рёбра - рёбра обхода</li>\n                    <li>Жёлтые ребра - мосты</li>\n                    <li>Красные числа - пары tin и fup (см. псевдокод)</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet used = {};\nlet trace = [];\nlet timer = 0;\nlet tin = {}, tout = {};\nlet countArticulationPoints = 0;\nlet isArticulationPoint = {};\nlet memoryUsed = 0;\n\nconst dfs = (vertex, adjacencyList, parent = -1) => {\n    used[vertex] = true;\n    tin[vertex] = tout[vertex] = timer++;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n    trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n    let children = 0;\n\n    for (const {name: to} of adjacencyList[vertex]) {\n        if (to === parent)\n            continue;\n        if (!used[to]) {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            dfs(to, adjacencyList, vertex);\n            tout[vertex] = Math.min(tout[vertex], tout[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n            if ((tout[to] >= tin[vertex]) && (parent !== -1) && !isArticulationPoint[vertex]) {\n                ++countArticulationPoints;\n                isArticulationPoint[vertex] = true;\n                trace.push({ vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n            ++children;\n        } else {\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            tout[vertex] = Math.min(tout[vertex], tin[to]);\n            trace.push({ vertex, hint: tin[vertex] + \" \" + tout[vertex], action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n            trace.push({ from: vertex, to: to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION });\n        }\n    }\n\n    if (!isArticulationPoint[vertex]) {\n        trace.push({vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION});\n\n        if ((parent === -1) && (children > 1)) {\n            trace.push({vertex, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION});\n        }\n    }\n\n    memoryUsed += sizeof(children);\n};\n\nconst findArticulationPoints = (vertices, edges, adjacencyList) => {\n    used = {};\n    vertices.forEach(vertex => {\n        used[vertex.name] = false;\n        isArticulationPoint[vertex.name] = false;\n    });\n    timer = 0;\n    tin = {};\n    tout = {};\n    countArticulationPoints = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start])\n            dfs(start, adjacencyList);\n    }\n};\n\nexport default {\n    name: \"Поиск точек сочленения\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOT_ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        findArticulationPoints(vertices, edges, adjacencyList);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(used) +\n            sizeof(adjacencyList) +\n            sizeof(timer) +\n            sizeof(tin) +\n            sizeof(tout) +\n            sizeof(countArticulationPoints) +\n            sizeof(isArticulationPoint);\n\n        return {\n            trace,\n            statistics: [\n                `Количество точек сочленения: ${countArticulationPoints}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function dfs(v, parent):\n      отметить v как посещённую\n      tin[v] = fup[v] = timer\n      timer++\n      children = 0\n\n      для всех рёбер (v, u):\n          если u не посещена:\n              children++\n              dfs(u)\n              fup[v] = min(fup[v], fup[u])\n              если fup[u] >= tin[v] и parent != -1:\n                  ребро (v, u) - мост\n          иначе:\n              fup[v] = min(fup[v], tin[u])\n      если parent == -1 и children > 1:\n          v - точка сочленения\n\n  timer - счётчик времени\n  tin[] - время входа в вершину\n  fup[v] - min(tin[v], fup[u], tin[p]), \n           где ребро (v, u) - прямое, (v, p) - обратное\n\n  для всех непосещённых вершин v:\n      dfs(v, -1)\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Жёлтые вершины - точки сочленения</li>\n                    <li>Красные рёбра - рёбра обхода</li>\n                    <li>Красные числа - пары tin и fup (см. псевдокод)</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList, edgesListToReversedAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet used = {};\nlet trace = [];\nlet topSortList = [];\nlet addedVertices = 0;\nlet sortedVertices = 0;\nlet memoryUsed = 0;\n\nconst dfs = (vertex, adjacencyList) => {\n    used[vertex] = true;\n    trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n    let to = 0;\n    adjacencyList[vertex].forEach(toVertex => {\n        to = toVertex.name;\n        if (!used[to]) {\n            trace.push({ from: vertex, to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            dfs(to, adjacencyList);\n            trace.push({ from: vertex, to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n        }\n    });\n    trace.push({ vertex, hint: addedVertices++, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n    trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    topSortList.push(vertex);\n\n    memoryUsed += sizeof(to);\n};\n\nconst topSort = (vertices, edges, adjacencyList, trace) => {\n    used = {};\n    topSortList = [];\n    vertices.forEach(vertex => used[vertex.name] = false);\n    addedVertices = 0;\n    sortedVertices = 0;\n\n    for (const {name: start} of vertices) {\n        if (!used[start]) {\n            dfs(start, adjacencyList);\n        }\n    }\n\n    for (const v of topSortList.reverse()) {\n        trace.push({ vertex: v, hint: sortedVertices++, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION, isChained: true });\n        trace.push({ vertex: v, action: VertexAction.UNSELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    }\n};\n\nconst findComponents = (vertices, edges, adjacencyList, trace) => {\n    for (const {from, to} of edges) {\n        trace.push({ from: from.name, to: to.name, oriented: true, action: EdgeAction.FLIP, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    }\n    if (edges.length > 0)\n        trace[trace.length - 1].isChained = false;\n\n    vertices.forEach(vertex => used[vertex.name] = false);\n\n    let componentsNumber = 0;\n\n    const dfsComponents = (vertex) => {\n        used[vertex] = true;\n        trace.push({ vertex, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n        trace.push({ vertex, hint: componentsNumber, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION});\n\n        let to = 0;\n        adjacencyList[vertex].forEach(toVertex => {\n            to = toVertex.name;\n            if (!used[to]) {\n                trace.push({ from: vertex, to, oriented: true, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                dfsComponents(to);\n                trace.push({ from: vertex, to, oriented: true, action: EdgeAction.UNSELECT, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            }\n        });\n\n        trace.push({ vertex, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n        memoryUsed += sizeof(to);\n    };\n\n    for (const v of topSortList) {\n        if (!used[v]) {\n            dfsComponents(v);\n            ++componentsNumber;\n        }\n    }\n\n    for (const {from, to} of edges) {\n        trace.push({ from: from.name, to: to.name, oriented: true, action: EdgeAction.FLIP, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n    }\n\n    memoryUsed += sizeof(componentsNumber);\n\n    return componentsNumber;\n};\n\nexport default {\n    name: \"Поиск компонент сильной связности (Алгоритм Косарайю)\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.ORIENTED,\n\n    call: (vertices, edges) => {\n        if (vertices.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n        const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        topSort(vertices, edges, adjacencyList, trace);\n        const componentsNumber = findComponents(vertices, edges, reversedAdjacencyList, trace);\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(adjacencyList) +\n            sizeof(reversedAdjacencyList) +\n            sizeof(componentsNumber) +\n            sizeof(used) +\n            sizeof(topSortList) +\n            sizeof(addedVertices) +\n            sizeof(sortedVertices);\n\n        return {\n            trace,\n            statistics: [\n                `Количество компонент сильной связности: ${componentsNumber}`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|)\n                    </li>\n                    <li>\n                        Матрица смежности: O(|V|^2)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function dfs(v, component_number):\n      отметить v как посещённую\n      добавить v в КСС под номером component_number\n\n      для всех рёбер (v, u):\n          если u не посещена:\n              dfs(u, component_number)\n\n  function scc():\n      провести топологическую сортировку\n      перевернуть все рёбра\n\n      components = 0\n      для всех вершин v в порядке топологической сортировки:\n          если v не посещена:\n              dfs(v, components)\n              components++\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Красные рёбра - рёбра обхода</li>\n                    <li>Синие числа (при обходе) - время выхода</li>\n                    <li>Синие числа (после обхода) - новые номера вершин (тополог. отсорт.)</li>\n                    <li>Красные числа - номер КСС</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList, edgesListToReversedAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet trace = [];\nlet memoryUsed = 0;\n\nconst checkForEuler = (vertices, edges, adjacencyList, trace) => {\n    let oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    memoryUsed += sizeof(oriented) + sizeof(reversedAdjacencyList);\n\n    if (!oriented) {\n\n        // Delete loops to prevent odd degrees\n        for (const {name: v} of vertices) {\n            adjacencyList[v] = adjacencyList[v].filter(toVertex => toVertex.name !== v);\n        }\n\n        let oddVertices = 0;\n        memoryUsed += sizeof(oddVertices);\n\n        for (const {name: v} of vertices) {\n            if (adjacencyList[v].length % 2 === 1) {\n                ++oddVertices;\n                if (oddVertices > 2) {\n                    trace.push({ vertex: v, hint: 1, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                    return false;\n                } else\n                    trace.push({ vertex: v, hint: 1, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    } else {\n        let outOddVertices = 0;\n        let inOddVertices = 0;\n        let degree = 0;\n        memoryUsed += sizeof(outOddVertices) + sizeof(inOddVertices) + sizeof(degree);\n\n        for (const {name: v} of vertices) {\n            degree = reversedAdjacencyList[v].length - adjacencyList[v].length;\n            if (degree === 1) {\n                ++outOddVertices;\n                if (outOddVertices > 1) {\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                    return false;\n                } else\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else if (degree === -1) {\n                ++inOddVertices;\n                if (outOddVertices > 1) {\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                    return false;\n                } else\n                    trace.push({ vertex: v, hint: degree, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            } else if (degree !== 0) {\n                trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    }\n\n    const used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n    const dfs = (v) => {\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n        for (const {name: to} of adjacencyList[v]) {\n            if (!used[to]) {\n                trace.push({ from: v, to, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                dfs(to);\n            }\n        }\n        if (oriented) {\n            for (const {name: from} of reversedAdjacencyList[v]) {\n                if (!used[from]) {\n                    trace.push({ from, to: v, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                    dfs(from);\n                }\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    };\n\n    dfs(vertices[0].name);\n    memoryUsed += sizeof(used);\n\n    for (const {name: v} of vertices) {\n        if (!used[v]) {\n            if (adjacencyList[v].length > 0) {\n                trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: v, to: adjacencyList[v][0].name, oriented, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        }\n    }\n\n    return true;\n};\n\nconst findEulerPath = (vertices, edges, adjacencyList, trace) => {\n    const oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    let start = vertices[0].name;\n    for (const {name: v} of vertices) {\n        if (!oriented) {\n            if (adjacencyList[v].length % 2 === 1) {\n                start = v;\n                break;\n            }\n        } else {\n            if (reversedAdjacencyList[v].length - adjacencyList[v].length === 1) {\n                start = v;\n                break;\n            }\n        }\n    }\n    trace.push({ vertex: start, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    if (oriented)\n        adjacencyList = reversedAdjacencyList;\n\n    const currentVertices = [];\n    let pathLen = 0;\n    currentVertices.push(start);\n    let cur;\n    while (currentVertices.length > 0) {\n        cur = currentVertices[currentVertices.length - 1];\n        if (adjacencyList[cur].length > 0) {\n            currentVertices.push(adjacencyList[cur][0].name);\n            const to = adjacencyList[cur].shift().name;\n            if (!oriented) {\n                adjacencyList[to] = adjacencyList[to].filter(e => e.name !== cur);\n            }\n            trace.push({ from: cur, to, oriented: true, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n\n            memoryUsed += sizeof(to);\n        } else {\n            currentVertices.pop();\n            if (currentVertices.length > 0) {\n                if (pathLen === 0)\n                    trace.push({ vertex: cur, action: VertexAction.COLOR_1, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: cur, to: currentVertices[currentVertices.length - 1], oriented: true, weight: ++pathLen, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n    }\n\n    memoryUsed +=\n        sizeof(oriented) +\n        sizeof(reversedAdjacencyList) +\n        sizeof(start) +\n        sizeof(currentVertices) +\n        sizeof(pathLen) +\n        sizeof(cur);\n};\n\nexport default {\n    name: \"Эйлеров путь\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges) => {\n        if (edges.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        let isEuler = checkForEuler(vertices, edges, Object.assign({}, adjacencyList), trace);\n        if (isEuler) {\n            trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n            trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            findEulerPath(vertices, edges, adjacencyList, trace);\n        }\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(adjacencyList) +\n            sizeof(isEuler);\n\n        return {\n            trace,\n            statistics: [\n                `Эйлеров путь ${isEuler ? '' : 'не'} существует`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|) + проверка: O(|V|)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function find_euler_path():\n      эйлеров путь существует, если:\n          для неориентированного графа:\n              степени всех вершин чётны, кроме, может быть, двух\n              из всех компонент связности только в одной есть рёбра\n          для ориентированного графа: \n              степень входа каждой вершины равна степени выхода, кроме,\n                может быть, двух, для одной из которых:\n                  степень_входа - степень_выхода = 1,\n                а для другой:\n                  степень_входа - степень_выхода = -1\n              из всех компонент слабой связности только в одной есть рёбра\n\n      если граф неориентированный:\n          выбрать вершину v с нечётной степенью,\n          либо любую, если таких нет\n      иначе:\n          выбрать вершину v, для которой\n            степень_входа - степень_выхода = 1,\n          либо любую, если таких нет\n\n      v - конечная вершина пути\n\n      добавить v в стек S\n      пока стек не пуст:\n          w = S.top()\n          если существует ребро (u, w) входящее в w:\n              S.push(u)\n              удалить ребро (u, w) из рассмотрения\n          иначе:\n              S.pop()\n              w - следующая вершина в эйлеровом цикле\n              добавить ребро (w, S.top()) в эйлеров цикл, если стек не пуст\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Красные рёбра (при обходе) - рёбра обхода</li>\n                    <li>Синие числа (для неор.графа) - 0 - вершина с чётной степенью, 1 - с нечётной</li>\n                    <li>Синие числа (для ор.графа) - степень_входа - степень_выхода</li>\n                    <li>&nbsp;</li>\n                    <li>Жёлтая вершина - начальная (для обхода)</li>\n                    <li>Красная вершина - начальная (для эйлерова пути)</li>\n                    <li>Жёлтые ребра - рёбра обхода (при поиске пути)</li>\n                    <li>Красные ребра - рёбра эйлерова пути</li>\n                </ul>\n            ]\n        };\n    }\n};","import {\n    AlgorithmActionType,\n    Criteria,\n    EdgeAction,\n    getOperationsCount,\n    PreCallAction,\n    VertexAction,\n    VertexHintAction\n} from \"./index\";\nimport { edgesListToAdjacencyList, edgesListToReversedAdjacencyList } from \"../../utils/graphConverter\";\nimport { sizeof } from \"../../utils/sizeof\";\nimport React from \"react\";\n\nlet trace = [];\nlet memoryUsed = 0;\n\nconst checkForEuler = (vertices, edges, adjacencyList, trace) => {\n    let oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    memoryUsed += sizeof(oriented) + sizeof(reversedAdjacencyList);\n\n    if (!oriented) {\n\n        // Delete loops to prevent odd degrees\n        for (const {name: v} of vertices) {\n            adjacencyList[v] = adjacencyList[v].filter(toVertex => toVertex.name !== v);\n        }\n\n        for (const {name: v} of vertices) {\n            if (adjacencyList[v].length % 2 === 1) {\n                trace.push({ vertex: v, hint: 1, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    } else {\n        let degree = 0;\n        memoryUsed += sizeof(degree);\n\n        for (const {name: v} of vertices) {\n            degree = reversedAdjacencyList[v].length - adjacencyList[v].length;\n            if (degree !== 0) {\n                trace.push({ vertex: v, hint: degree, action: VertexHintAction.SET, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, hint: 0, action: VertexHintAction.HIGHLIGHT, actionType: AlgorithmActionType.VERTEX_HINT_ACTION });\n            }\n        }\n    }\n\n    const used = {};\n    vertices.forEach(vertex => used[vertex.name] = false);\n    const dfs = (v) => {\n        used[v] = true;\n        trace.push({ vertex: v, action: VertexAction.ENTER, actionType: AlgorithmActionType.VERTEX_ACTION });\n        for (const {name: to} of adjacencyList[v]) {\n            if (!used[to]) {\n                trace.push({ from: v, to, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                dfs(to);\n            }\n        }\n        if (oriented) {\n            for (const {name: from} of reversedAdjacencyList[v]) {\n                if (!used[from]) {\n                    trace.push({ from, to: v, oriented, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n                    dfs(from);\n                }\n            }\n        }\n        trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n    };\n\n    dfs(vertices[0].name);\n    memoryUsed += sizeof(used);\n\n    for (const {name: v} of vertices) {\n        if (!used[v]) {\n            if (adjacencyList[v].length > 0) {\n                trace.push({ vertex: v, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: v, to: adjacencyList[v][0].name, oriented, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n                return false;\n            } else {\n                trace.push({ vertex: v, action: VertexAction.EXIT, actionType: AlgorithmActionType.VERTEX_ACTION });\n            }\n        }\n    }\n\n    return true;\n};\n\nconst findEulerCycle = (vertices, edges, adjacencyList, trace) => {\n    const oriented = edges[0].isOriented();\n    const reversedAdjacencyList = edgesListToReversedAdjacencyList(vertices, edges);\n\n    let start = vertices[0].name;\n    trace.push({ vertex: start, action: VertexAction.SELECT, actionType: AlgorithmActionType.VERTEX_ACTION });\n\n    if (oriented)\n        adjacencyList = reversedAdjacencyList;\n\n    const currentVertices = [];\n    let pathLen = 0;\n    currentVertices.push(start);\n    let cur = 0;\n    while (currentVertices.length > 0) {\n        cur = currentVertices[currentVertices.length - 1];\n        if (adjacencyList[cur].length > 0) {\n            currentVertices.push(adjacencyList[cur][0].name);\n            const to = adjacencyList[cur].shift().name;\n            if (!oriented) {\n                adjacencyList[to] = adjacencyList[to].filter(e => e.name !== cur);\n            }\n            trace.push({ from: cur, to, oriented: true, action: EdgeAction.HIGHLIGHT, actionType: AlgorithmActionType.EDGE_ACTION });\n\n            memoryUsed += sizeof(to);\n        } else {\n            currentVertices.pop();\n            if (currentVertices.length > 0) {\n                if (pathLen === 0)\n                    trace.push({ vertex: cur, action: VertexAction.COLOR_1, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n                trace.push({ from: cur, to: currentVertices[currentVertices.length - 1], oriented: true, weight: ++pathLen, action: EdgeAction.WALK, actionType: AlgorithmActionType.EDGE_ACTION });\n            }\n        }\n    }\n\n    memoryUsed +=\n        sizeof(oriented) +\n        sizeof(reversedAdjacencyList) +\n        sizeof(start) +\n        sizeof(currentVertices) +\n        sizeof(pathLen) +\n        sizeof(cur);\n};\n\nexport default {\n    name: \"Эйлеров цикл\",\n\n    preCall: PreCallAction.NOTHING,\n\n    criteria: Criteria.NOTHING,\n\n    call: (vertices, edges) => {\n        if (edges.length === 0)\n            return {trace: [], statistics: []};\n\n        const adjacencyList = edgesListToAdjacencyList(vertices, edges);\n\n        trace = [];\n        memoryUsed = 0;\n\n        const startTime = window.performance.now();\n\n        let isEuler = checkForEuler(vertices, edges, Object.assign({}, adjacencyList), trace);\n        if (isEuler) {\n            trace.push({ action: VertexAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.VERTEX_ACTION, isChained: true });\n            trace.push({ action: EdgeAction.CLEAR_ALL_SELECTIONS, actionType: AlgorithmActionType.EDGE_ACTION, isChained: true });\n            findEulerCycle(vertices, edges, adjacencyList, trace);\n        }\n\n        const endTime = window.performance.now();\n        const duration = endTime - startTime;\n\n        memoryUsed +=\n            sizeof(adjacencyList) +\n            sizeof(isEuler);\n\n        return {\n            trace,\n            statistics: [\n                `Эйлеров цикл ${isEuler ? '' : 'не'} существует`,\n                `Время исполнения алгоритма: ${duration.toFixed(4)}мс`,\n                `Кол-во шагов визуализации: ${getOperationsCount(trace)}`,\n                `Память: ${memoryUsed} байт(а)`\n            ],\n            algorithmInfo: [\n                \"Временная сложность алгоритма:\",\n                <ul>\n                    <li>\n                        Список смежности: O(|V| + |E|) + проверка: O(|V|)\n                    </li>\n                </ul>,\n                \"Псевдокод:\",\n                <pre>\n                    <code>{`\n  function find_euler_cycle():\n      эйлеров цикл существует, если:\n          для неориентированного графа:\n              степени всех вершин чётны\n              из всех компонент связности только в одной есть рёбра\n          для ориентированного графа: \n              степень входа каждой вершины равна степени выхода\n              из всех компонент слабой связности только в одной есть рёбра\n\n      выбрать случайную вершину v\n\n      v - конечная и начальная вершина цикла\n\n      добавить v в стек S\n      пока стек не пуст:\n          w = S.top()\n          если существует ребро (u, w) входящее в w:\n              S.push(u)\n              удалить ребро (u, w) из рассмотрения\n          иначе:\n              S.pop()\n              w - следующая вершина в эйлеровом цикле\n              добавить ребро (w, S.top()) в эйлеров цикл, если стек не пуст\n                    `}</code>\n                </pre>,\n                \"Легенда:\",\n                <ul>\n                    <li>Белые вершины - не посещённые</li>\n                    <li>Серые вершины - обрабатываемые</li>\n                    <li>Чёрные вершины - обрабатанные</li>\n                    <li>Красные рёбра (при обходе) - рёбра обхода</li>\n                    <li>Синие числа (для неор.графа) - 0 - вершина с чётной степенью, 1 - с нечётной</li>\n                    <li>Синие числа (для ор.графа) - степень_входа - степень_выхода</li>\n                    <li>&nbsp;</li>\n                    <li>Жёлтая вершина - начальная (для обхода)</li>\n                    <li>Красная вершина - начальная (для эйлерова цикла)</li>\n                    <li>Жёлтые ребра - рёбра обхода (при поиске цикла)</li>\n                    <li>Красные ребра - рёбра эйлерова цикла</li>\n                </ul>\n            ]\n        };\n    }\n};","export const ActionType = Object.freeze({\n    START_MATRIX_DIALOG_FOR_RESULT: 'START_MATRIX_DIALOG_FOR_RESULT',\n    CLOSE_MATRIX_DIALOG: 'CLOSE_MATRIX_DIALOG'\n});\n\nexport const startMatrixDialogForResult = () => ({\n    type: ActionType.START_MATRIX_DIALOG_FOR_RESULT\n});\n\nconst closeMatrixDialog = () => ({\n   type: ActionType.CLOSE_MATRIX_DIALOG\n});\n\nexport const cancelMatrixDialog = (onCancel) => (dispatch) => {\n    if (onCancel)\n        onCancel();\n    dispatch(closeMatrixDialog());\n};\n\nexport const submitMatrixDialog = (onSubmit, result) => (dispatch) => {\n    if (onSubmit)\n        onSubmit(result);\n    dispatch(closeMatrixDialog());\n};","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./Menu.module.scss\";\nimport Draggable from 'react-draggable';\nimport { ButtonComponent } from \"../Buttons/Buttons\";\nimport { SliderComponent } from \"../Sliders/Sliders\";\nimport { DropDownList } from \"../DropDownLists/DropDownLists\";\nimport {\n    changeGraphMode,\n    cleanGraphSelections,\n    closeMessage,\n    invertOrientation,\n    moveCanvas,\n    setGraph,\n    showMessage\n} from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { Graph, GraphMode, vertexRadius } from \"../Graph/Graph\";\nimport { RoundedToggleSwitch } from \"../ToggleSwitches/ToggleSwitches\";\nimport {\n    call, clearAlgorithmInfo,\n    clearStatistics,\n    clearTrace,\n    continueCall,\n    pause,\n    preCall,\n    setAlgorithm,\n    setSpeed\n} from \"../../actions/algorithm\";\nimport DFS from \"../../algorithms/graph/dfs\"\nimport BFS from \"../../algorithms/graph/bfs\"\nimport Dijkstra from \"../../algorithms/graph/dijkstra\"\nimport PrimMST from \"../../algorithms/graph/prim-mst\"\nimport KruskalMST from \"../../algorithms/graph/kruskal-mst\"\nimport CheckConnected from \"../../algorithms/graph/check-connected\"\nimport CheckBipartite from \"../../algorithms/graph/check-bipartite\"\nimport FindRadius from \"../../algorithms/graph/radius\"\nimport FindDiameter from \"../../algorithms/graph/diameter\"\nimport TopologicalSort from \"../../algorithms/graph/topological-sort\"\nimport FindBridges from \"../../algorithms/graph/find-bridges\"\nimport FindArticulationPoints from \"../../algorithms/graph/find-articulation-points\"\nimport SCCKosaraju from \"../../algorithms/graph/scc-kosaraju\"\nimport EulerPath from \"../../algorithms/graph/euler-path\"\nimport EulerCycle from \"../../algorithms/graph/euler-cycle\"\nimport { Vertex } from \"../Graph/Vertex/Vertex\";\nimport { Edge } from \"../Graph/Edge/Edge\";\nimport { startMatrixDialogForResult } from \"../../actions/matrixDialog\";\n\nconst cx = classnames.bind(styles);\n\nconst minAlgorithmSpeed = 0;\nconst maxAlgorithmSpeed = 1000;\n\nconst mapStateToProps = state => ({\n    graphMode: state.graphReducer.graphMode,\n    isOriented: state.graphReducer.graph.isOriented(),\n    isVisualizationActive: state.algorithmReducer.isActive,\n    visualizationSpeed: state.algorithmReducer.speed,\n    selectedAlgorithm: state.algorithmReducer.algorithm,\n    remainingAlgorithmSteps: state.algorithmReducer.trace.length,\n    graph: state.graphReducer.graph\n});\n\nclass MenuComponent extends React.Component {\n    state = {\n        algorithms: [\n            DFS,\n            BFS,\n            Dijkstra,\n            PrimMST,\n            KruskalMST,\n            CheckConnected,\n            CheckBipartite,\n            FindRadius,\n            FindDiameter,\n            TopologicalSort,\n            FindBridges,\n            FindArticulationPoints,\n            SCCKosaraju,\n            EulerPath,\n            EulerCycle\n        ],\n        hidden: false\n    };\n\n    componentDidMount() {\n        this.props.setAlgorithm(this.state.algorithms[0]);\n        this.props.setSpeed((minAlgorithmSpeed + maxAlgorithmSpeed) / 2);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (nextProps.graphMode !== this.props.graphMode)\n            return true;\n        if (nextProps.isOriented !== this.props.isOriented)\n            return true;\n        if (nextProps.isVisualizationActive !== this.props.isVisualizationActive)\n            return true;\n        if (nextProps.visualizationSpeed !== this.props.visualizationSpeed)\n            return true;\n        if (nextProps.selectedAlgorithm !== this.props.selectedAlgorithm)\n            return true;\n        if (nextProps.remainingAlgorithmSteps !== this.props.remainingAlgorithmSteps)\n            return true;\n        if (nextState !== this.state)\n            return true;\n        return false;\n    }\n\n    handleAlgorithmChange = e => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n\n        this.props.setAlgorithm(this.state.algorithms[e.target.value]);\n    };\n\n    startVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.clearVisualization();\n            this.props.preCall();\n        } else if (this.props.isVisualizationActive) {\n            this.props.pause();\n        } else {\n            this.props.continue();\n        }\n    };\n\n    stepVisualization = () => {\n        if (this.props.remainingAlgorithmSteps === 0) {\n            this.clearVisualization();\n            this.props.preCall(true);\n        } else {\n            this.props.continue(true);\n        }\n    };\n\n    stopVisualization = () => {\n        this.clearVisualization();\n        this.props.closeMessage();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n    };\n\n    handleAlgorithmSpeedChange = e => {\n        this.props.setSpeed(maxAlgorithmSpeed - e.target.value);\n    };\n\n    askForAction = (message, graphMode) => {\n        this.clearVisualization();\n\n        this.props.showMessage(message);\n        this.props.changeGraphMode(graphMode);\n    };\n\n    closeMessage = () => {\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n        this.props.closeMessage();\n    };\n\n    invertOrientation = () => {\n        this.clearVisualization();\n\n        this.props.invertOrientation();\n    };\n\n    clearVisualization = () => {\n        this.props.pause();\n        this.props.cleanGraphSelections();\n        this.props.clearTrace();\n        this.props.clearStatistics();\n        this.props.clearAlgorithmInfo();\n    };\n\n    writeToFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        const json = JSON.stringify({\n            vertices: this.props.graph.vertices.map(v => ({\n                x: v.x,\n                y: v.y,\n                name: v.name\n            })),\n            edges: this.props.graph.edges.map(e => ({\n                from: e.from.name,\n                to: e.to.name,\n                weight: e.weight\n            })),\n            oriented: this.props.isOriented\n        });\n\n        const exportData = \"data:text/json;charset=utf-8,\" + escape(json);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"graph.json\");\n        anchorElement.click();\n    };\n\n    askReadFromFile = () => {\n        this.clearVisualization();\n        this.props.changeGraphMode(GraphMode.DEFAULT);\n\n        document.getElementById(\"fileLoad\").click();\n    };\n\n    readFromFile = (e) => {\n        const reader = new FileReader();\n        const file = e.target.files[0];\n\n        reader.onload = (e) => {\n            try {\n                const json = JSON.parse(e.target.result);\n\n                const oriented = json.oriented;\n                const vertices = json.vertices.map(v => {\n                    if (isNaN(Number(v.name)))\n                        throw new Error(\"Name of vertex should be a number\");\n                    if (isNaN(Number(v.x)) || isNaN(Number(v.y)))\n                        throw new Error(\"Coordinates of vertex should be numbers\");\n                    return new Vertex(Number(v.x), Number(v.y), vertexRadius, Number(v.name));\n                });\n                const edges = json.edges.map(e => {\n                        return new Edge(\n                            vertices.find(v => v.name === Number(e.from)),\n                            vertices.find(v => v.name === Number(e.to)),\n                            oriented,\n                            isNaN(Number(e.weight)) ? undefined : Number(e.weight)\n                        );\n                    }\n                );\n\n                const graph = new Graph(oriented, vertices, edges);\n\n                if (oriented !== this.props.isOriented)\n                    this.invertOrientation();\n                this.props.setGraph(graph);\n                this.props.resetCanvasPosition();\n            } catch (e) {\n                this.props.showMessage(\"Некорректный формат файла\");\n            }\n        };\n\n        reader.readAsText(file);\n        document.getElementById(\"fileLoad\").value = null;\n    };\n\n    showAdjacencyMatrix = () => {\n        this.props.startMatrixDialog();\n    };\n\n    collapse = () => {\n        this.setState({ hidden: !this.state.hidden });\n        // FIXME: Fix unfolding in the bottom of the screen\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"} cancel={[\"button\", \"input\", \"select\"]}>\n                <div className={cx(\"menu\", {[`menu-hidden`]: this.state.hidden})}>\n                    <div\n                        className={cx(\"collapse-button\")}\n                        onClick={() => this.collapse()}>\n                        &ndash;\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"graph-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Режим просмотра\"}\n                                onClick={() => this.closeMessage()}\n                                activated={this.props.graphMode === GraphMode.DEFAULT}/>\n                            <ButtonComponent\n                                text={\"Добавить вершину\"}\n                                onClick={() => this.askForAction(\"Выберите точку для добавления вершины\", GraphMode.ADD_VERTEX)}\n                                activated={this.props.graphMode === GraphMode.ADD_VERTEX}/>\n                            <ButtonComponent\n                                text={\"Добавить ребро\"}\n                                onClick={() => this.askForAction(\"Выберите вершины, которые нужно соединить ребром\", GraphMode.ADD_EDGE)}\n                                activated={this.props.graphMode === GraphMode.ADD_EDGE}/>\n                            <ButtonComponent\n                                text={\"Удалить вершину/ребро\"}\n                                onClick={() => this.askForAction(\"Выберите объект для удаления\", GraphMode.REMOVE_VERTEX_OR_EDGE)}\n                                activated={this.props.graphMode === GraphMode.REMOVE_VERTEX_OR_EDGE}/>\n                        </div>\n                        <RoundedToggleSwitch\n                            className={cx(\"switch\")}\n                            text={\"Ориентированный?\"}\n                            onChange={() => this.invertOrientation()}\n                            isChecked={this.props.isOriented}/>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"algorithms-list\")}>\n                            <DropDownList\n                                items={this.state.algorithms.map(a => a.name)}\n                                onChange={this.handleAlgorithmChange}/>\n                        </div>\n                        <div className={cx(\"slider\")}>\n                            <SliderComponent\n                                label={\"Скорость анимации\"}\n                                value={maxAlgorithmSpeed - this.props.visualizationSpeed}\n                                min={minAlgorithmSpeed}\n                                max={maxAlgorithmSpeed}\n                                onChange={this.handleAlgorithmSpeedChange}/>\n                        </div>\n                        <div className={cx(\"visualization-control-buttons\")}>\n                            <ButtonComponent\n                                text={this.props.isVisualizationActive ? \"Пауза\" : \"Старт\"}\n                                onClick={this.startVisualization}/>\n                            <ButtonComponent text={\"Шаг\"} onClick={this.stepVisualization}/>\n                            <ButtonComponent text={\"Стоп\"} onClick={this.stopVisualization}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"file-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Сохранить\"}\n                                onClick={() => this.writeToFile()}\n                                activated={false}/>\n                            <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save graph</a>\n\n                            <ButtonComponent\n                                text={\"Загрузить\"}\n                                onClick={() => this.askReadFromFile()}\n                                activated={false}/>\n                            <input id=\"fileLoad\" type=\"file\" accept=\".json\" style={{\"display\": \"none\"}} onChange={(e) => this.readFromFile(e)}/>\n                        </div>\n                    </div>\n                    <div className={cx(\"menu-sub\")}>\n                        <div className={cx(\"matrix-control-buttons\")}>\n                            <ButtonComponent\n                                text={\"Матрица смежности\"}\n                                onClick={() => this.showAdjacencyMatrix()}\n                                activated={false}/>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeGraphMode: (graphMode) => dispatch(changeGraphMode(graphMode)),\n    showMessage: (message) => dispatch(showMessage(message)),\n    closeMessage: () => dispatch(closeMessage()),\n    invertOrientation: () => dispatch(invertOrientation()),\n    setAlgorithm: (algorithm) => dispatch(setAlgorithm(algorithm)),\n    setSpeed: (speed) => dispatch(setSpeed(speed)),\n    preCall: (isOneStep) => dispatch(preCall(isOneStep)),\n    call: () => dispatch(call()),\n    pause: () => dispatch(pause()),\n    continue: (isOneStep) => dispatch(continueCall(isOneStep)),\n    cleanGraphSelections: () => dispatch(cleanGraphSelections()),\n    clearTrace: () => dispatch(clearTrace()),\n    clearStatistics: () => dispatch(clearStatistics()),\n    clearAlgorithmInfo: () => dispatch(clearAlgorithmInfo()),\n    setGraph: (graph) => dispatch(setGraph(graph)),\n    startMatrixDialog: () => dispatch(startMatrixDialogForResult()),\n    resetCanvasPosition: () => dispatch(moveCanvas(0, 0))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuComponent);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MessageBox.module.scss\";\nimport { connect } from \"react-redux\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    message: state.graphReducer.message,\n    isAlert: state.graphReducer.isAlert\n});\n\nconst MessageBox = ({ message, isAlert }) => {\n    return (\n        <div className={cx(\"message-box\", {[`invisible`]: message === undefined}, {[`alert`]: isAlert})}>\n            {message}\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps)(MessageBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./TextInputs.module.scss\";\n\nconst cx = classnames.bind(styles);\n\nexport const TextInputComponent = ({ value, placeholder, onChange, pattern, className, autoFocus = false }) => {\n    return (\n        <input\n            className={cx(\"text-input\", className)}\n            type=\"text\"\n            pattern={pattern}\n            value={value}\n            onChange={onChange}\n            placeholder={placeholder}\n            autoFocus={autoFocus}/>\n    );\n};","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InputDialog.module.scss\";\nimport { cancelDialog, submitDialog } from \"../../../actions/dialog\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { TextInputComponent } from \"../../TextInputs/TextInputs\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 100000}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.dialogReducer.isOpen,\n    title: state.dialogReducer.title,\n    text: state.dialogReducer.text,\n    hint: state.dialogReducer.hint,\n    inputPlaceholder: state.dialogReducer.inputPlaceholder,\n    pattern: state.dialogReducer.pattern,\n    onSubmit: state.dialogReducer.onSubmit,\n    onCancel: state.dialogReducer.onCancel\n});\n\nclass InputDialog extends React.Component {\n    state = {\n        value: \"\"\n    };\n\n    handleChange = (e) => {\n        if (e.target.validity.valid)\n            this.setState({ value: e.target.value });\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n        this.setState({ value: \"\" });\n        this.props.submitDialog(this.props.onSubmit, this.state.value);\n    };\n\n    cancel = () => {\n        this.setState({ value: \"\" });\n        this.props.cancelDialog(this.props.onCancel);\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => {\n                    this.setState({ value: \"\" });\n                    this.props.cancelDialog(this.props.onCancel);\n                }}\n                ariaHideApp={false}\n                className={cx(\"input-dialog\")}\n                style={customStyles}>\n\n                <h2>{this.props.title}</h2>\n                <div className={cx(\"text\")}>{this.props.text}</div>\n                <form onSubmit={(e) => this.submit(e)}>\n                    <TextInputComponent\n                        autoFocus={true}\n                        className={cx(\"text-input\")}\n                        placeholder={this.props.inputPlaceholder}\n                        pattern={this.props.pattern}\n                        onChange={this.handleChange}\n                        value={this.state.value}/>\n\n                    <ButtonComponent\n                        type={\"submit\"}\n                        className={cx(\"button\")}\n                        text={\"Ок\"}\n                        onClick={(e) => this.submit(e)}/>\n                    <ButtonComponent\n                        className={cx(\"button\")}\n                        text={\"Отмена\"}\n                        onClick={() => this.cancel()}/>\n                </form>\n\n                <div className={cx(\"hint\")}>{this.props.hint}</div>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelDialog(onCancel))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputDialog);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./InfoBox.module.scss\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    lines: state.algorithmReducer.statistics,\n    isVisible: state.algorithmReducer.isStatisticsShown\n});\n\nconst InfoBox = ({ lines, isVisible }) => {\n    const writeToFile = (lines) => {\n        const exportData = \"data:text/plain;charset=UTF-8,\" + lines.map(line => line + \"\\n\").reduce((acc, cur) => acc + cur, \"\");\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"result.txt\");\n        anchorElement.click();\n    };\n\n    return (\n        <div className={cx(\"info-box\", {[`invisible`]: !(isVisible && Array.isArray(lines) && lines.length)})}>\n            {lines.map((line, index) => <div className={cx(\"text\")} key={index}>{line}</div>)}\n            <div className={cx(\"save-button\")} onClick={() => writeToFile(lines)}>Сохранить</div>\n            <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save result</a>\n        </div>\n    );\n};\n\nInfoBox.propTypes = {\n    lines: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.symbol,\n        PropTypes.bool\n    ])),\n    isVisible: PropTypes.bool\n};\n\nexport default connect(mapStateToProps)(InfoBox);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./AdjacencyMatrix.module.scss\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\n\nconst cx = classnames.bind(styles);\n\nconst MatrixCell = ({ cell, topLeft, topRight, bottomLeft, bottomRight, onClick }) => {\n    return (\n        <div className={cx(\"matrix-cell\", {[`empty`]: !cell},\n            {[`non-weighted`]: cell && !cell.weighted},\n            {[`top-left-cell`]: topLeft},\n            {[`top-right-cell`]: topRight},\n            {[`bottom-left-cell`]: bottomLeft},\n            {[`bottom-right-cell`]: bottomRight})}\n            onClick={onClick}\n            onContextMenu={onClick}>\n            {cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"}\n        </div>\n    );\n};\n\nconst MatrixRow = ({ row, first, last, vertexNumber, onCellClick }) => {\n    return (\n        <div className={cx(\"matrix-row\")}>\n            <div className={cx(\"label-cell\")}>{vertexNumber}</div>\n            {row.map((cell, index) =>\n                <MatrixCell\n                    key={index}\n                    cell={cell}\n                    topLeft={(index === 0) && first}\n                    topRight={(index + 1 === row.length) && first}\n                    bottomLeft={(index === 0) && last}\n                    bottomRight={(index + 1 === row.length) && last}\n                    onClick={(e) => onCellClick(e, index)}/>)\n            }\n        </div>\n    );\n};\n\nconst AdjacencyMatrix = ({ graph, onCellClick }) => {\n    const {adjacencyMatrix, verticesNumbers} = edgesListToAdjacencyMatrix(graph.vertices, graph.edges);\n    return (\n        <div className={cx(\"matrix\")}>\n            <div className={cx(\"label-cell\")}>{\" \"}</div>\n            {verticesNumbers.map(v => <div key={v} className={cx(\"label-cell\")}>{v}</div>)}\n            {adjacencyMatrix.map((row, index) =>\n                <MatrixRow\n                    key={index}\n                    row={row}\n                    first={index === 0}\n                    last={index + 1 === graph.vertices.length}\n                    vertexNumber={verticesNumbers[index]}\n                    onCellClick={(e, column) => onCellClick(e, verticesNumbers[index], verticesNumbers[column])}/>)\n            }\n        </div>\n    );\n};\n\nexport default AdjacencyMatrix;","import Modal from \"react-modal\";\nimport React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./MatrixDialog.module.scss\";\nimport { connect } from \"react-redux\";\nimport { ButtonComponent } from \"../../Buttons/Buttons\";\nimport { edgesListToAdjacencyMatrix } from \"../../../utils/graphConverter\";\nimport { cancelMatrixDialog, submitMatrixDialog } from \"../../../actions/matrixDialog\";\nimport AdjacencyMatrix from \"./AdjacencyMatrix\";\nimport { startDialogForResult } from \"../../../actions/dialog\";\nimport { addEdge, removeEdge } from \"../../../actions\";\n\nconst cx = classnames.bind(styles);\n\nconst customStyles = {\n    overlay: {zIndex: 99999}\n};\n\nconst mapStateToProps = state => ({\n    isOpen: state.matrixDialogReducer.isOpen,\n    graph: state.graphReducer.graph\n});\n\nclass MatrixDialog extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (!this.props.isOpen && !nextProps.isOpen)\n            return false;\n        return true;\n    }\n\n    writeToFile = () => {\n        if (this.props.graph.vertices.length === 0)\n            return;\n\n        let {adjacencyMatrix} = edgesListToAdjacencyMatrix(this.props.graph.vertices, this.props.graph.edges);\n\n        adjacencyMatrix = adjacencyMatrix.map(row => row.map(cell => cell ? (cell.weighted ? cell.weight : \"+\") : \"X\"));\n        adjacencyMatrix = adjacencyMatrix.reduce((prev, arr) => prev + arr.reduce((line, cell) => line + cell + \" \", \"\") + \"\\n\", \"\");\n\n        const exportData = \"data:text/plain;charset=utf-8,\" + escape(adjacencyMatrix);\n        const anchorElement = document.getElementById(\"fileSave\");\n        anchorElement.setAttribute(\"href\", exportData);\n        anchorElement.setAttribute(\"download\", \"adjacencyMatrix.txt\");\n        anchorElement.click();\n    };\n\n    cancel = () => {\n        this.props.cancelDialog(null);\n    };\n\n    handleCellClick = (e, from, to) => {\n        const vertexFrom = this.props.graph.vertices.find(v => v.name === from);\n        const vertexTo = this.props.graph.vertices.find(v => v.name === to);\n\n        if (e.type === \"click\") {\n            if (vertexFrom && vertexTo) {\n                this.props.startDialogForResult(\n                    \"Введите вес ребра\",\n                    `(${from} ${this.props.graph.isOriented() ? '->' : '<->'} ${to})`,\n                    \"Оставьте поле пустым, чтобы добавить невзвешенное ребро\",\n                    \"Вес ребра\",\n                    (value) => {\n                        if (value === \"\")\n                            value = undefined;\n                        this.props.addEdge(vertexFrom, vertexTo, value);\n                    },\n                    null,\n                    \"[0-9]{0,2}\"\n                );\n            }\n        } else if (e.type === \"contextmenu\") {\n            e.preventDefault();\n\n            const edgeIndex = this.props.graph.findEdge(vertexFrom, vertexTo);\n            if (edgeIndex !== -1)\n                this.props.removeEdge(this.props.graph.edges[edgeIndex]);\n        }\n    };\n\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                onRequestClose={() => this.cancel()}\n                ariaHideApp={false}\n                className={cx(\"matrix-dialog\")}\n                style={customStyles}>\n\n                {\n                    this.props.graph.vertices.length > 0 ?\n                        <div>\n                            <AdjacencyMatrix graph={this.props.graph} onCellClick={this.handleCellClick}/>\n                            <div>ЛКМ - добавить ребро, ПКМ - удалить ребро</div>\n                        </div>\n                    :\n                        <div style={{\"margin\": \"20px\", \"font-size\": \"1.2em\"}}>Добавьте хотя бы одну вершину</div>\n                }\n\n                <ButtonComponent\n                    type={\"submit\"}\n                    className={cx(\"button\", {[`deactivated-button`]: this.props.graph.vertices.length === 0})}\n                    text={\"Сохранить в файл\"}\n                    onClick={() => this.writeToFile()}/>\n                <a id=\"fileSave\" style={{\"display\": \"none\"}} aria-hidden={true} href=\"/#\">Save matrix</a>\n\n                <ButtonComponent\n                    className={cx(\"button\")}\n                    text={\"Закрыть\"}\n                    onClick={() => this.cancel()}/>\n            </Modal>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    submitDialog: (onSubmit, result) => dispatch(submitMatrixDialog(onSubmit, result)),\n    cancelDialog: (onCancel) => dispatch(cancelMatrixDialog(onCancel)),\n    addEdge: (vertexFrom, vertexTo, weight) => dispatch(addEdge(vertexFrom, vertexTo, weight)),\n    removeEdge: (edge) => dispatch(removeEdge(edge)),\n    startDialogForResult: (title, text, hint, inputPlaceholder, onSubmit, onClose, pattern) =>\n        dispatch(startDialogForResult(title, text, hint, inputPlaceholder, onSubmit, onClose, pattern))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatrixDialog);","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./HintBox.module.scss\";\nimport Draggable from 'react-draggable';\n\nconst cx = classnames.bind(styles);\n\nclass HintBox extends React.Component {\n    state = {\n        hidden: false\n    };\n\n    collapse = () => {\n        this.setState({ hidden: !this.state.hidden });\n        // FIXME: Fix unfolding in the bottom of the screen\n    };\n\n    render() {\n        return (\n            <Draggable grid={[4, 4]} bounds={\"body\"}>\n                <div className={cx(\"hint-box\", {[`hint-box-hidden`]: this.state.hidden})}>\n                    <div\n                        className={cx(\"close-button\")}\n                        onClick={() => this.collapse()}>\n                        &#x2715;\n                    </div>\n                    <div className={cx(\"text\")}>\n                        <p>\n                            Горячие клавиши:\n                        </p>\n                        <ul>\n                            <li>Ctrl + G - сгенерировать случайные рёбра</li>\n                            <li>Ctrl + Alt + C - удалить всё</li>\n                            <li>I - свернуть/развернуть информацию об алгоритме</li>\n                        </ul>\n                        <p className={cx(\"hint\")}>\n                            (Некоторые горячие клавиши могут работать только в английской раскладке)\n                        </p>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nexport default HintBox;","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./AlgorithmInfoBox.module.scss\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nconst mapStateToProps = state => ({\n    lines: state.algorithmReducer.algorithmInfo,\n    isVisible: state.algorithmReducer.isAlgorithmInfoShown,\n    isCollapsed: state.algorithmReducer.isAlgorithmInfoCollapsed\n});\n\nconst AlgorithmInfoBox = ({ lines, isVisible, isCollapsed }) => {\n    return (\n        <div className={cx(\"algorithm-info-box\", {[`invisible`]: isCollapsed || !(isVisible && Array.isArray(lines) && lines.length)})}>\n            {Array.isArray(lines) ?\n                lines.map((line, index) => <div className={cx(\"text\")} key={index}>{line}</div>)\n                :\n                \"\"\n            }\n\n        </div>\n    );\n};\n\nAlgorithmInfoBox.propTypes = {\n    lines: PropTypes.arrayOf(PropTypes.node),\n    isVisible: PropTypes.bool\n};\n\nexport default connect(mapStateToProps)(AlgorithmInfoBox);","import React from 'react';\nimport classnames from \"classnames/bind\";\nimport styles from \"./App.module.scss\";\nimport PlainGraph from \"./PlainGraph/PlainGraph\";\nimport GraphComponent from \"./Graph/Graph\";\nimport MenuComponent from \"./Menu/Menu\";\nimport MessageBox from \"./MessageBox/MessageBox\";\nimport InputDialog from \"./Dialogs/InputDialog/InputDialog\";\nimport InfoBox from \"./InfoBox/InfoBox\";\nimport MatrixDialog from \"./Dialogs/MatrixDialog/MatrixDialog\";\nimport { GlobalHotKeys } from \"react-hotkeys\";\nimport { connect } from \"react-redux\";\nimport { cleanGraphSelections, clearGraph, generateGraph } from \"../actions\";\nimport HintBox from \"./HintBox/HintBox\";\nimport {\n    clearAlgorithmInfo,\n    clearStatistics,\n    clearTrace,\n    invertAlgorithmInfoCollapsed,\n    pause\n} from \"../actions/algorithm\";\nimport AlgorithmInfoBox from \"./AlgorithmInfoBox/AlgorithmInfoBox\";\n\nconst cx = classnames.bind(styles);\n\nconst App = ({ stopVisualization, generateGraph, clearGraph, invertAlgorithmInfoCollapsed }) => {\n    const keyMap = {\n        GENERATE: [\"ctrl+g\", \"ctrl+п\"],\n        CLEAR: [\"ctrl+alt+c\", \"ctrl+alt+с\"],\n        COLLAPSE_ALGORITHM_INFO: [\"i\", \"ш\"]\n    };\n\n    const handlers = {\n        GENERATE: (e) => {\n            e.preventDefault();\n            stopVisualization();\n            generateGraph();\n        },\n        CLEAR: (e) => {\n            e.preventDefault();\n            stopVisualization();\n            clearGraph();\n        },\n        COLLAPSE_ALGORITHM_INFO: (e) => {\n            e.preventDefault();\n            invertAlgorithmInfoCollapsed();\n        }\n    };\n\n    return (\n        <div className={cx(\"app\")}>\n            <GlobalHotKeys keyMap={keyMap} handlers={handlers}/>\n            <MenuComponent/>\n            <GraphComponent/>\n            <MessageBox/>\n            <InfoBox/>\n            <HintBox/>\n            <AlgorithmInfoBox/>\n            <InputDialog/>\n            <MatrixDialog/>\n        </div>\n    );\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n    generateGraph: () => dispatch(generateGraph()),\n    clearGraph: () => dispatch(clearGraph()),\n    stopVisualization: () => {\n        dispatch(pause());\n        dispatch(cleanGraphSelections());\n        dispatch(clearTrace());\n        dispatch(clearStatistics());\n        dispatch(clearAlgorithmInfo());\n    },\n    invertAlgorithmInfoCollapsed: () => dispatch(invertAlgorithmInfoCollapsed())\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionType } from \"../actions/dialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false,\n    title: \"\",\n    text: \"\",\n    hint: \"\",\n    inputPlaceholder: \"\",\n    onSubmit: null,\n    onClose: null,\n    pattern: \".*\"\n};\n\nconst dialog = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.START_DIALOG_FOR_RESULT:\n            newState = {\n                ...state,\n                isOpen: true,\n                title: action.title,\n                text: action.text,\n                hint: action.hint,\n                inputPlaceholder: action.inputPlaceholder,\n                pattern: action.pattern\n            };\n\n            newState.onSubmit = (value) => {\n                const onSubmit = action.onSubmit;\n                if (onSubmit)\n                    onSubmit(value);\n            };\n            newState.onCancel = () => {\n                const onCancel = action.onCancel;\n                if (onCancel)\n                    onCancel();\n            };\n\n            return newState;\n        case ActionType.CLOSE_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default dialog;","import { ActionType } from \"../actions/algorithm\";\nimport React from \"react\";\nimport { PreCallAction } from \"../algorithms/graph/index\";\n\nconst defaultState = {\n    trace: [],\n    isActive: false,\n    algorithm: null,\n    speed: 1000,\n    isOneStep: false,\n    statistics: [],\n    isStatisticsShown: false,\n    algorithmInfo: [],\n    isAlgorithmInfoShown: false,\n    isAlgorithmInfoCollapsed: false\n};\n\nconst algorithm = (state = defaultState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionType.CALL:\n            newState = {\n                ...state\n            };\n\n            const preCall = state.algorithm.preCall;\n            const vertices = action.graph.vertices;\n            const edges = action.graph.edges;\n            let result;\n            if (preCall === PreCallAction.SELECT_VERTEX) {\n                result = state.algorithm.call(vertices, edges, action.vertex);\n            } else if (preCall === PreCallAction.SELECT_EDGE) {\n                result = state.algorithm.call(vertices, edges, action.edge);\n            } else if (preCall === PreCallAction.NOTHING) {\n                result = state.algorithm.call(vertices, edges);\n            }\n            newState.trace = result.trace;\n            newState.statistics = result.statistics;\n            newState.algorithmInfo = result.algorithmInfo;\n\n            return newState;\n        case ActionType.POP_TRACE_STEP:\n            newState = {\n                ...state,\n                trace: [...state.trace]\n            };\n\n            newState.trace.shift();\n\n            return newState;\n        case ActionType.START:\n            return {\n                ...state,\n                isActive: true\n            };\n        case ActionType.PAUSE:\n            return {\n                ...state,\n                isActive: false\n            };\n        case ActionType.SET_ALGORITHM:\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        case ActionType.SET_SPEED:\n            return {\n                ...state,\n                speed: action.speed\n            };\n        case ActionType.SET_IS_ONE_STEP:\n            return {\n                ...state,\n                isOneStep: action.isOneStep\n            };\n        case ActionType.CLEAR_TRACE:\n            return {\n                ...state,\n                trace: []\n            };\n        case ActionType.SHOW_STATISTICS:\n            return {\n                ...state,\n                isStatisticsShown: true\n            };\n        case ActionType.CLEAR_STATISTICS:\n            return {\n                ...state,\n                statistics: [],\n                isStatisticsShown: false\n            };\n        case ActionType.SHOW_ALGORITHM_INFO:\n            return {\n                ...state,\n                isAlgorithmInfoShown: true\n            };\n        case ActionType.CLEAR_ALGORITHM_INFO:\n            return {\n                ...state,\n                algorithmInfo: [],\n                isAlgorithmInfoShown: false\n            };\n        case ActionType.INVERT_ALGORITHM_INFO_COLLAPSED:\n            return {\n                ...state,\n                isAlgorithmInfoCollapsed: !state.isAlgorithmInfoCollapsed\n            };\n        default:\n            return state;\n    }\n};\n\nexport default algorithm;","import { ActionType } from \"../actions/matrixDialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false\n};\n\nconst matrixDialog = (state = defaultState, action) => {\n    switch (action.type) {\n        case ActionType.START_MATRIX_DIALOG_FOR_RESULT:\n            return {\n                ...state,\n                isOpen: true\n            };\n        case ActionType.CLOSE_MATRIX_DIALOG:\n            return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default matrixDialog;","import { ActionType } from \"../actions/matrixDialog\";\nimport React from \"react\";\n\nconst defaultState = {\n    isOpen: false\n};\n\nconst generatorDialog = (state = defaultState, action) => {\n    switch (action.type) {\n        // case ActionType.START_MATRIX_DIALOG_FOR_RESULT:\n        //     return {\n        //         ...state,\n        //         isOpen: true\n        //     };\n        // case ActionType.CLOSE_MATRIX_DIALOG:\n        //     return defaultState;\n        default:\n            return state;\n    }\n};\n\nexport default generatorDialog;","import { Graph, GraphMode } from \"../components/Graph/Graph\";\nimport { ActionType } from \"../actions\";\nimport { VertexHintState, VertexState } from \"../components/Graph/Vertex/Vertex\";\nimport { combineReducers } from \"redux\";\nimport dialog from \"./dialog\";\nimport algorithm from \"./algorithm\";\nimport matrixDialog from \"./matrixDialog\";\nimport { AlgorithmActionType, EdgeAction, VertexAction, VertexHintAction } from \"../algorithms/graph\";\nimport { EdgeState } from \"../components/Graph/Edge/Edge\";\nimport generatorDialog from \"./generatorDialog\";\n\nconst defaultState = {\n    graph: new Graph(false),\n    message: undefined,\n    isAlert: false,\n    graphMode: GraphMode.DEFAULT,\n    selectedVertex: undefined, // For 'ADD_EDGE' // TODO: Do 'ADD_EDGE' in a cleaner way\n    canvasX: 0,\n    canvasY: 0\n};\n\nconst clone = object => {\n    return Object.assign( Object.create( Object.getPrototypeOf(object)), object);\n};\n\nconst unselectSelectedVertex = (state) => {\n    if (state.selectedVertex !== undefined) {\n        const i = state.graph.vertices.findIndex(v => v === state.selectedVertex);\n        if (i !== -1)\n            state.graph.vertices[i].state = VertexState.DEFAULT;\n        state.selectedVertex = undefined;\n    }\n};\n\nconst updateVertexByAction = (vertex, action) => {\n    switch (action) {\n        case VertexAction.SELECT:\n            vertex.state = VertexState.HIGHLIGHTED;\n            break;\n        case VertexAction.ENTER:\n            vertex.state = VertexState.PRE_COMPLETED;\n            break;\n        case VertexAction.EXIT:\n            vertex.state = VertexState.COMPLETED;\n            break;\n        case VertexAction.UNSELECT:\n            vertex.state = VertexState.DEFAULT;\n            break;\n        case VertexAction.COLOR_1:\n            vertex.state = VertexState.COLOR_1;\n            break;\n        case VertexAction.COLOR_2:\n            vertex.state = VertexState.COLOR_2;\n            break;\n        default:\n    }\n};\n\nconst updateEdgeByAction = (edge, action) => {\n    switch (action) {\n        case EdgeAction.WALK:\n            edge.state = EdgeState.WALKED;\n            break;\n        case EdgeAction.HIGHLIGHT:\n            edge.state = EdgeState.HIGHLIGHTED;\n            break;\n        case EdgeAction.SHADOW:\n            edge.state = EdgeState.SHADOWED;\n            break;\n        default:\n    }\n};\n\nconst updateVertexHintByAction = (vertex, action) => {\n    switch (action) {\n        case VertexHintAction.REMOVE:\n            vertex.hintState = VertexHintState.CLEAR;\n            break;\n        case VertexHintAction.SET:\n            vertex.hintState = VertexHintState.DEFAULT;\n            break;\n        case VertexHintAction.HIGHLIGHT:\n            vertex.hintState = VertexHintState.HIGHLIGHTED;\n            break;\n        default:\n    }\n};\n\nconst cleanGraphSelections = (state) => {\n    state.graph.vertices.forEach(v => {\n        v.state = VertexState.DEFAULT;\n        v.hintState = VertexHintState.CLEAR;\n        v.hint = \"\";\n    });\n    state.graph.edges.forEach(e => e.state = EdgeState.DEFAULT);\n    state.graph.visualizationEdges = [];\n    state.selectedVertex = undefined;\n};\n\nconst reducer = (state = defaultState, action) => {\n    let newState;\n    let i;\n    switch (action.type) {\n        case ActionType.ADD_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addVertex(action.x, action.y, action.radius);\n\n            return newState;\n        case ActionType.ADD_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.addEdge(action.vertexFrom, action.vertexTo, action.weight);\n\n            return newState;\n        case ActionType.REMOVE_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeVertex(action.vertex);\n\n            return newState;\n        case ActionType.REMOVE_EDGE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeEdge(action.edge);\n\n            return newState;\n        case ActionType.UPDATE_VERTEX_POSITION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.vertices[action.vertexIndex].x = action.x;\n            newState.graph.vertices[action.vertexIndex].y = action.y;\n\n            return newState;\n        case ActionType.CHANGE_GRAPH_MODE:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            if (action.graphMode !== newState.graphMode) {\n                newState.graphMode = action.graphMode;\n\n                unselectSelectedVertex(newState);\n            }\n\n            return newState;\n        case ActionType.SELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            i = newState.graph.vertices.findIndex(v => v === action.vertex);\n            if (i !== -1) {\n                newState.graph.vertices[i].state = VertexState.HIGHLIGHTED;\n                newState.selectedVertex = action.vertex;\n            }\n\n            return newState;\n        case ActionType.UNSELECT_VERTEX:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            unselectSelectedVertex(newState);\n\n            return newState;\n        case ActionType.SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message,\n                isAlert: action.isAlert\n            };\n        case ActionType.CLOSE_MESSAGE:\n            return {\n                ...state,\n                message: undefined,\n                isAlert: false\n            };\n        case ActionType.INVERT_ORIENTATION:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.invertOrientation();\n\n            return newState;\n        case ActionType.ALGORITHM_STEP:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            const step = action.step;\n            if (step.actionType === AlgorithmActionType.VERTEX_ACTION) {\n                if (step.action === VertexAction.CLEAR_ALL_SELECTIONS) {\n                    newState.graph.vertices.forEach(v => v.state = VertexState.DEFAULT);\n                } else {\n                    const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                    if (vertex)\n                        updateVertexByAction(vertex, step.action);\n                }\n            } else if (step.actionType === AlgorithmActionType.EDGE_ACTION) {\n                if (step.action === EdgeAction.CLEAR_ALL_SELECTIONS) {\n                    newState.graph.visualizationEdges = [];\n                } else if (step.action === EdgeAction.FLIP) {\n                    const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                    const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                    const edge = newState.graph.findEdge(vertexFrom, vertexTo);\n                    if (edge !== -1) {\n                        if (newState.graph.edges[edge].state === EdgeState.FLIPPED)\n                            newState.graph.edges[edge].state = EdgeState.DEFAULT;\n                        else\n                            newState.graph.edges[edge].state = EdgeState.FLIPPED;\n                    }\n                } else {\n                    const vertexFrom = newState.graph.vertices.find(v => v.name === step.from);\n                    const vertexTo = newState.graph.vertices.find(v => v.name === step.to);\n                    if (step.action === EdgeAction.UNSELECT) {\n                        newState.graph.removeVisualizationEdgeByVertices(vertexFrom, vertexTo, step.oriented);\n                    } else {\n                        const edge = newState.graph.addVisualizationEdge(vertexFrom, vertexTo, step.oriented, step.weight);\n                        updateEdgeByAction(edge, step.action);\n                    }\n                }\n            } else if (step.actionType === AlgorithmActionType.VERTEX_HINT_ACTION) {\n                const vertex = newState.graph.vertices.find(v => v.name === step.vertex);\n                if (vertex) {\n                    if (step.action === VertexHintAction.REMOVE)\n                        vertex.hint = \"\";\n                    else\n                        vertex.hint = step.hint;\n                    updateVertexHintByAction(vertex, step.action);\n                }\n            }\n\n            return newState;\n        case ActionType.CLEAN_GRAPH_SELECTIONS:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            cleanGraphSelections(newState);\n\n            return newState;\n        case ActionType.SET_GRAPH:\n            return {\n                ...state,\n                graph: action.graph\n            };\n        case ActionType.MOVE_CANVAS:\n            return {\n                ...state,\n                canvasX: action.x,\n                canvasY: action.y\n            };\n        case ActionType.GENERATE_GRAPH:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.removeAllEdges();\n            newState.graph.vertices.forEach(vertexFrom => {\n                let edgesNumber = 1 + Math.max(0, Math.floor(Math.random() * Math.floor(Math.log2(newState.graph.vertices.length) - 2)));\n\n                while (edgesNumber--) {\n                    const vertexTo = newState.graph.vertices[Math.floor(Math.random() * Math.floor(newState.graph.vertices.length))];\n                    const weight = Math.floor(Math.random() * Math.floor(100));\n\n                    newState.graph.addEdge(vertexFrom, vertexTo, weight);\n                }\n            });\n\n            return newState;\n        case ActionType.CLEAR_GRAPH:\n            newState = {\n                ...state,\n                graph: clone(state.graph)\n            };\n\n            newState.graph.clearGraph();\n\n            return newState;\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    graphReducer: reducer,\n    dialogReducer: dialog,\n    algorithmReducer: algorithm,\n    matrixDialogReducer: matrixDialog,\n    generatorDialogReducer: generatorDialog\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2at_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plain_graph\":\"PlainGraph_plain_graph__132cd\",\"drawing_area\":\"PlainGraph_drawing_area__poiJd\",\"cell\":\"PlainGraph_cell__2tDfs\",\"cell-blocked\":\"PlainGraph_cell-blocked__13I9p\",\"cell-path\":\"PlainGraph_cell-path__1JSUa\",\"cell-start\":\"PlainGraph_cell-start__2FTb6\",\"cell-finish\":\"PlainGraph_cell-finish__2icJo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2xbQm\",\"menu-sub\":\"Menu_menu-sub__2jhA1\",\"graph-control-buttons\":\"Menu_graph-control-buttons__2CY62\",\"switch\":\"Menu_switch__3Y97k\",\"visualization-control-buttons\":\"Menu_visualization-control-buttons__1OTXW\",\"file-control-buttons\":\"Menu_file-control-buttons__3PmTU\",\"algorithms-list\":\"Menu_algorithms-list__2mwx1\",\"slider\":\"Menu_slider__RA1Ez\",\"matrix-control-buttons\":\"Menu_matrix-control-buttons__26fCf\",\"collapse-button\":\"Menu_collapse-button__Jv6Lk\",\"menu-hidden\":\"Menu_menu-hidden__2Ff-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__1L6GG\",\"activated\":\"Buttons_activated__EZOmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider-wrapper\":\"Sliders_slider-wrapper__GIw-8\",\"slider-label\":\"Sliders_slider-label__1w08l\",\"slider\":\"Sliders_slider__1gqJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drop-down-list\":\"DropDownLists_drop-down-list__ix94o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch-round-wrapper\":\"ToggleSwitches_switch-round-wrapper__g2bxh\",\"switch-round\":\"ToggleSwitches_switch-round__1bQ1T\",\"slider\":\"ToggleSwitches_slider__Q-bUA\",\"text\":\"ToggleSwitches_text__1sKta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message-box\":\"MessageBox_message-box__2uEgD\",\"invisible\":\"MessageBox_invisible__10Wwp\",\"alert\":\"MessageBox_alert__14QTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-dialog\":\"InputDialog_input-dialog__2SLyF\",\"text-input\":\"InputDialog_text-input__2zjdU\",\"button\":\"InputDialog_button__1ZFHJ\",\"text\":\"InputDialog_text__2HUnn\",\"hint\":\"InputDialog_hint__1ftkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-input\":\"TextInputs_text-input__3mPdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info-box\":\"InfoBox_info-box__3t_A2\",\"text\":\"InfoBox_text__sgPCj\",\"save-button\":\"InfoBox_save-button__2-on2\",\"invisible\":\"InfoBox_invisible__1un1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix-dialog\":\"MatrixDialog_matrix-dialog__2YGd3\",\"button\":\"MatrixDialog_button__3KxWd\",\"deactivated-button\":\"MatrixDialog_deactivated-button__ONTjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"AdjacencyMatrix_matrix__3b96v\",\"matrix-row\":\"AdjacencyMatrix_matrix-row__3vHpl\",\"top-left-cell\":\"AdjacencyMatrix_top-left-cell__1-lFt\",\"top-right-cell\":\"AdjacencyMatrix_top-right-cell__1RYRb\",\"bottom-left-cell\":\"AdjacencyMatrix_bottom-left-cell__23nQC\",\"bottom-right-cell\":\"AdjacencyMatrix_bottom-right-cell__2r29f\",\"matrix-cell\":\"AdjacencyMatrix_matrix-cell__2Z91s\",\"label-cell\":\"AdjacencyMatrix_label-cell__3YJYr\",\"empty\":\"AdjacencyMatrix_empty__3-1PZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hint-box\":\"HintBox_hint-box__3wNFO\",\"close-button\":\"HintBox_close-button__2Liam\",\"text\":\"HintBox_text__10ytA\",\"hint-box-hidden\":\"HintBox_hint-box-hidden__kYj-a\",\"hint\":\"HintBox_hint__3M49H\",\"invisible\":\"HintBox_invisible__13kxh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"algorithm-info-box\":\"AlgorithmInfoBox_algorithm-info-box__2f-JP\",\"text\":\"AlgorithmInfoBox_text__2JncT\",\"invisible\":\"AlgorithmInfoBox_invisible__3-C-v\"};"],"sourceRoot":""}